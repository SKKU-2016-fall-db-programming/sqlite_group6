!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDR	vdbe.h	162;"	d
AGGREGATE	sqliteInt.h	1613;"	d
AGGREGATE2	sqliteInt.h	1616;"	d
ALLBITS	sqliteInt.h	2471;"	d
ALWAYS	sqliteInt.h	423;"	d
ALWAYS	sqliteInt.h	426;"	d
ALWAYS	sqliteInt.h	429;"	d
AggInfo	sqliteInt.h	/^struct AggInfo {$/;"	s
AggInfo	sqliteInt.h	/^typedef struct AggInfo AggInfo;$/;"	t	typeref:struct:AggInfo
AggInfo_col	sqliteInt.h	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo
AggInfo_func	sqliteInt.h	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo
ApplyCostMultiplier	where.c	2195;"	d	file:
ApplyCostMultiplier	where.c	2197;"	d	file:
Argv0	shell.c	/^static char *Argv0;$/;"	v	file:
ArraySize	shell.c	704;"	d	file:
ArraySize	sqliteInt.h	936;"	d
AuthContext	sqliteInt.h	/^struct AuthContext {$/;"	s
AuthContext	sqliteInt.h	/^typedef struct AuthContext AuthContext;$/;"	t	typeref:struct:AuthContext
AutoincInfo	sqliteInt.h	/^struct AutoincInfo {$/;"	s
AutoincInfo	sqliteInt.h	/^typedef struct AutoincInfo AutoincInfo;$/;"	t	typeref:struct:AutoincInfo
AuxData	vdbeInt.h	/^struct AuxData {$/;"	s
AuxData	vdbeInt.h	/^typedef struct AuxData AuxData;$/;"	t	typeref:struct:AuxData
BAD_INTPTR_T	test_windirent.h	71;"	d
BEGIN_TIMER	shell.c	235;"	d	file:
BEGIN_TIMER	shell.c	312;"	d	file:
BEGIN_TIMER	shell.c	317;"	d	file:
BITVEC_HASH	bitvec.c	68;"	d	file:
BITVEC_MXHASH	bitvec.c	63;"	d	file:
BITVEC_NBIT	bitvec.c	57;"	d	file:
BITVEC_NELEM	bitvec.c	55;"	d	file:
BITVEC_NINT	bitvec.c	60;"	d	file:
BITVEC_NPTR	bitvec.c	70;"	d	file:
BITVEC_SZ	bitvec.c	40;"	d	file:
BITVEC_SZELEM	bitvec.c	53;"	d	file:
BITVEC_TELEM	bitvec.c	51;"	d	file:
BITVEC_USIZE	bitvec.c	44;"	d	file:
BLOBSIZE	test_onefile.c	90;"	d	file:
BLOCKSIZE	test_onefile.c	89;"	d	file:
BMS	sqliteInt.h	2464;"	d
BTALLOC_ANY	btree.c	49;"	d	file:
BTALLOC_EXACT	btree.c	50;"	d	file:
BTALLOC_LE	btree.c	51;"	d	file:
BTCF_AtLast	btreeInt.h	538;"	d
BTCF_Incrblob	btreeInt.h	539;"	d
BTCF_Multiple	btreeInt.h	540;"	d
BTCF_ValidNKey	btreeInt.h	536;"	d
BTCF_ValidOvfl	btreeInt.h	537;"	d
BTCF_WriteFlag	btreeInt.h	535;"	d
BTCURSOR_MAX_DEPTH	btreeInt.h	484;"	d
BTREE_APPLICATION_ID	btree.h	150;"	d
BTREE_AUTOVACUUM_FULL	btree.h	33;"	d
BTREE_AUTOVACUUM_INCR	btree.h	34;"	d
BTREE_AUTOVACUUM_NONE	btree.h	32;"	d
BTREE_AUXDELETE	btree.h	252;"	d
BTREE_BLOBKEY	btree.h	113;"	d
BTREE_BULKLOAD	btree.h	195;"	d
BTREE_DATA_VERSION	btree.h	151;"	d
BTREE_DEFAULT_CACHE_SIZE	btree.h	145;"	d
BTREE_FILE_FORMAT	btree.h	144;"	d
BTREE_FORDELETE	btree.h	222;"	d
BTREE_FREE_PAGE_COUNT	btree.h	142;"	d
BTREE_HINT_RANGE	btree.h	180;"	d
BTREE_INCR_VACUUM	btree.h	149;"	d
BTREE_INTKEY	btree.h	112;"	d
BTREE_LARGEST_ROOT_PAGE	btree.h	146;"	d
BTREE_MEMORY	btree.h	61;"	d
BTREE_OMIT_JOURNAL	btree.h	60;"	d
BTREE_SAVEPOSITION	btree.h	251;"	d
BTREE_SCHEMA_VERSION	btree.h	143;"	d
BTREE_SEEK_EQ	btree.h	196;"	d
BTREE_SINGLE	btree.h	62;"	d
BTREE_TEXT_ENCODING	btree.h	147;"	d
BTREE_UNORDERED	btree.h	63;"	d
BTREE_USER_VERSION	btree.h	148;"	d
BTREE_WRCSR	btree.h	221;"	d
BTS_EXCLUSIVE	btreeInt.h	459;"	d
BTS_INITIALLY_EMPTY	btreeInt.h	457;"	d
BTS_NO_WAL	btreeInt.h	458;"	d
BTS_PAGESIZE_FIXED	btreeInt.h	455;"	d
BTS_PENDING	btreeInt.h	460;"	d
BTS_READ_ONLY	btreeInt.h	454;"	d
BTS_SECURE_DELETE	btreeInt.h	456;"	d
BYTESWAP32	wal.c	602;"	d	file:
BenignMallocHooks	fault.c	/^static SQLITE_WSD struct BenignMallocHooks {$/;"	s	file:
BenignMallocHooks	fault.c	/^typedef struct BenignMallocHooks BenignMallocHooks;$/;"	t	typeref:struct:BenignMallocHooks	file:
Bitmask	sqliteInt.h	/^  typedef SQLITE_BITMASK_TYPE Bitmask;$/;"	t
Bitmask	sqliteInt.h	/^  typedef u64 Bitmask;$/;"	t
Bitvec	bitvec.c	/^struct Bitvec {$/;"	s	file:
Bitvec	sqliteInt.h	/^typedef struct Bitvec Bitvec;$/;"	t	typeref:struct:Bitvec
Bool	vdbeInt.h	/^typedef unsigned Bool;$/;"	t
Box	test_rtree.c	/^  struct Box {$/;"	s	struct:Circle	file:
BtCursor	btree.h	/^typedef struct BtCursor BtCursor;$/;"	t	typeref:struct:BtCursor
BtCursor	btreeInt.h	/^struct BtCursor {$/;"	s
BtLock	btreeInt.h	/^struct BtLock {$/;"	s
BtLock	btreeInt.h	/^typedef struct BtLock BtLock;$/;"	t	typeref:struct:BtLock
BtShared	btree.h	/^typedef struct BtShared BtShared;$/;"	t	typeref:struct:BtShared
BtShared	btreeInt.h	/^struct BtShared {$/;"	s
Btree	btree.h	/^typedef struct Btree Btree;$/;"	t	typeref:struct:Btree
Btree	btreeInt.h	/^struct Btree {$/;"	s
BtreePayload	btree.h	/^struct BtreePayload {$/;"	s
BtreePayload	btree.h	/^typedef struct BtreePayload BtreePayload;$/;"	t	typeref:struct:BtreePayload
BusyHandler	sqliteInt.h	/^struct BusyHandler {$/;"	s
BusyHandler	sqliteInt.h	/^typedef struct BusyHandler BusyHandler;$/;"	t	typeref:struct:BusyHandler
ByteRangeLockPB2	os_unix.c	/^struct ByteRangeLockPB2$/;"	s	file:
CACHE_STALE	vdbeInt.h	181;"	d
CC_AND	tokenize.c	53;"	d	file:
CC_BANG	tokenize.c	44;"	d	file:
CC_COMMA	tokenize.c	52;"	d	file:
CC_DIGIT	tokenize.c	32;"	d	file:
CC_DOLLAR	tokenize.c	33;"	d	file:
CC_DOT	tokenize.c	55;"	d	file:
CC_EQ	tokenize.c	43;"	d	file:
CC_GT	tokenize.c	42;"	d	file:
CC_ID	tokenize.c	31;"	d	file:
CC_ILLEGAL	tokenize.c	56;"	d	file:
CC_KYWD	tokenize.c	30;"	d	file:
CC_LP	tokenize.c	46;"	d	file:
CC_LT	tokenize.c	41;"	d	file:
CC_MINUS	tokenize.c	40;"	d	file:
CC_PERCENT	tokenize.c	51;"	d	file:
CC_PIPE	tokenize.c	39;"	d	file:
CC_PLUS	tokenize.c	49;"	d	file:
CC_QUOTE	tokenize.c	37;"	d	file:
CC_QUOTE2	tokenize.c	38;"	d	file:
CC_RP	tokenize.c	47;"	d	file:
CC_SEMI	tokenize.c	48;"	d	file:
CC_SLASH	tokenize.c	45;"	d	file:
CC_SPACE	tokenize.c	36;"	d	file:
CC_STAR	tokenize.c	50;"	d	file:
CC_TILDA	tokenize.c	54;"	d	file:
CC_VARALPHA	tokenize.c	34;"	d	file:
CC_VARNUM	tokenize.c	35;"	d	file:
CC_X	tokenize.c	29;"	d	file:
CCurHint	wherecode.c	/^struct CCurHint {$/;"	s	file:
CHECK_PAGE	pager.c	1207;"	d	file:
CHECK_PAGE	pager.c	1218;"	d	file:
CKCNSTRNT_COLUMN	insert.c	1083;"	d	file:
CKCNSTRNT_ROWID	insert.c	1084;"	d	file:
CLEARBIT	bitvec.c	304;"	d	file:
CODEC1	pager.c	413;"	d	file:
CODEC1	pager.c	419;"	d	file:
CODEC2	pager.c	415;"	d	file:
CODEC2	pager.c	420;"	d	file:
COLFLAG_HASTYPE	sqliteInt.h	1673;"	d
COLFLAG_HIDDEN	sqliteInt.h	1672;"	d
COLFLAG_PRIMKEY	sqliteInt.h	1671;"	d
COLNAME_COLUMN	vdbe.h	145;"	d
COLNAME_DATABASE	vdbe.h	143;"	d
COLNAME_DECLTYPE	vdbe.h	142;"	d
COLNAME_N	vdbe.h	147;"	d
COLNAME_N	vdbe.h	150;"	d
COLNAME_N	vdbe.h	152;"	d
COLNAME_NAME	vdbe.h	141;"	d
COLNAME_TABLE	vdbe.h	144;"	d
COLUMN_MASK	fkey.c	1047;"	d	file:
CORRUPT_DB	sqliteInt.h	3248;"	d
CTIMEOPT_VAL	ctime.c	34;"	d	file:
CTIMEOPT_VAL_	ctime.c	33;"	d	file:
CTRL_FREE	mem5.c	84;"	d	file:
CTRL_LOGSIZE	mem5.c	83;"	d	file:
CURSOR_FAULT	btreeInt.h	576;"	d
CURSOR_INVALID	btreeInt.h	572;"	d
CURSOR_REQUIRESEEK	btreeInt.h	575;"	d
CURSOR_SKIPNEXT	btreeInt.h	574;"	d
CURSOR_VALID	btreeInt.h	573;"	d
CURTYPE_BTREE	vdbeInt.h	62;"	d
CURTYPE_PSEUDO	vdbeInt.h	65;"	d
CURTYPE_SORTER	vdbeInt.h	63;"	d
CURTYPE_VTAB	vdbeInt.h	64;"	d
CellArray	btree.c	/^struct CellArray {$/;"	s	file:
CellArray	btree.c	/^typedef struct CellArray CellArray;$/;"	t	typeref:struct:CellArray	file:
CellInfo	btreeInt.h	/^struct CellInfo {$/;"	s
CellInfo	btreeInt.h	/^typedef struct CellInfo CellInfo;$/;"	t	typeref:struct:CellInfo
Circle	test_rtree.c	/^struct Circle {$/;"	s	file:
Circle	test_rtree.c	/^typedef struct Circle Circle;$/;"	t	typeref:struct:Circle	file:
Cleanup	vdbeaux.c	/^static void Cleanup(Vdbe *p){$/;"	f	file:
CollSeq	sqliteInt.h	/^struct CollSeq {$/;"	s
CollSeq	sqliteInt.h	/^typedef struct CollSeq CollSeq;$/;"	t	typeref:struct:CollSeq
Column	sqliteInt.h	/^struct Column {$/;"	s
Column	sqliteInt.h	/^typedef struct Column Column;$/;"	t	typeref:struct:Column
ConstFactorOk	sqliteInt.h	1475;"	d
CountCtx	func.c	/^struct CountCtx {$/;"	s	file:
CountCtx	func.c	/^typedef struct CountCtx CountCtx;$/;"	t	typeref:struct:CountCtx	file:
CrashFile	test6.c	/^struct CrashFile {$/;"	s	file:
CrashFile	test6.c	/^typedef struct CrashFile CrashFile;$/;"	t	typeref:struct:CrashFile	file:
CrashFileVtab	test6.c	/^static const sqlite3_io_methods CrashFileVtab = {$/;"	v	file:
CrashGlobal	test6.c	/^struct CrashGlobal {$/;"	s	file:
CrashGlobal	test6.c	/^typedef struct CrashGlobal CrashGlobal;$/;"	t	typeref:struct:CrashGlobal	file:
CreateFunctionV2	test1.c	/^struct CreateFunctionV2 {$/;"	s	file:
CreateFunctionV2	test1.c	/^typedef struct CreateFunctionV2 CreateFunctionV2;$/;"	t	typeref:struct:CreateFunctionV2	file:
Cte	sqliteInt.h	/^  struct Cte {                    \/* For each CTE in the WITH clause.... *\/$/;"	s	struct:With
Cube	test_rtree.c	/^struct Cube {$/;"	s	file:
Cube	test_rtree.c	/^typedef struct Cube Cube;$/;"	t	typeref:struct:Cube	file:
D	date.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
DATABASE_FILE	test_onefile.c	125;"	d	file:
DB_Empty	sqliteInt.h	1159;"	d
DB_SchemaLoaded	sqliteInt.h	1157;"	d
DB_UnresetViews	sqliteInt.h	1158;"	d
DEFAULT_SECTOR_SIZE	test_multiplex.c	69;"	d	file:
DEVSYM_MAX_PATHNAME	test_devsym.c	25;"	d	file:
DEVSYM_VFS_NAME	test_devsym.c	30;"	d	file:
DFUNCTION	sqliteInt.h	1601;"	d
DIR	test_windirent.h	/^struct DIR {$/;"	s
DIR	test_windirent.h	/^typedef struct DIR DIR;$/;"	t	typeref:struct:DIR
DIRECT_MODE	pager.c	6053;"	d	file:
DIRENT	test_fs.c	81;"	d	file:
DIRENT	test_windirent.h	/^struct DIRENT {$/;"	s
DIRENT	test_windirent.h	/^typedef struct DIRENT DIRENT;$/;"	t	typeref:struct:DIRENT
DOTLOCK_SUFFIX	os_unix.c	2061;"	d	file:
DO_OS_MALLOC_TEST	os.c	66;"	d	file:
DO_OS_MALLOC_TEST	os.c	73;"	d	file:
DateTime	date.c	/^struct DateTime {$/;"	s	file:
DateTime	date.c	/^typedef struct DateTime DateTime;$/;"	t	typeref:struct:DateTime	file:
Db	sqliteInt.h	/^struct Db {$/;"	s
Db	sqliteInt.h	/^typedef struct Db Db;$/;"	t	typeref:struct:Db
DbBusyHandler	tclsqlite.c	/^static int DbBusyHandler(void *cd, int nTries){$/;"	f	file:
DbClearProperty	sqliteInt.h	1145;"	d
DbCommitHandler	tclsqlite.c	/^static int DbCommitHandler(void *cd){$/;"	f	file:
DbDeleteCmd	tclsqlite.c	/^static void SQLITE_TCLAPI DbDeleteCmd(void *db){$/;"	f	file:
DbEvalContext	tclsqlite.c	/^struct DbEvalContext {$/;"	s	file:
DbEvalContext	tclsqlite.c	/^typedef struct DbEvalContext DbEvalContext;$/;"	t	typeref:struct:DbEvalContext	file:
DbEvalNextCmd	tclsqlite.c	/^static int SQLITE_TCLAPI DbEvalNextCmd($/;"	f	file:
DbFixer	sqliteInt.h	/^struct DbFixer {$/;"	s
DbFixer	sqliteInt.h	/^typedef struct DbFixer DbFixer;$/;"	t	typeref:struct:DbFixer
DbHasAnyProperty	sqliteInt.h	1143;"	d
DbHasProperty	sqliteInt.h	1142;"	d
DbHookCmd	tclsqlite.c	/^static void DbHookCmd($/;"	f	file:
DbMain	tclsqlite.c	/^static int SQLITE_TCLAPI DbMain($/;"	f	file:
DbMaskAllZero	sqliteInt.h	2847;"	d
DbMaskAllZero	sqliteInt.h	2854;"	d
DbMaskNonZero	sqliteInt.h	2848;"	d
DbMaskNonZero	sqliteInt.h	2855;"	d
DbMaskSet	sqliteInt.h	2846;"	d
DbMaskSet	sqliteInt.h	2853;"	d
DbMaskTest	sqliteInt.h	2844;"	d
DbMaskTest	sqliteInt.h	2851;"	d
DbMaskZero	sqliteInt.h	2845;"	d
DbMaskZero	sqliteInt.h	2852;"	d
DbObjCmd	tclsqlite.c	/^static int SQLITE_TCLAPI DbObjCmd($/;"	f	file:
DbObjCmdAdaptor	tclsqlite.c	/^static int SQLITE_TCLAPI DbObjCmdAdaptor($/;"	f	file:
DbPage	pager.h	/^typedef struct PgHdr DbPage;$/;"	t	typeref:struct:PgHdr
DbPreUpdateHandler	tclsqlite.c	/^static void DbPreUpdateHandler($/;"	f	file:
DbProfileHandler	tclsqlite.c	/^static void DbProfileHandler(void *cd, const char *zSql, sqlite_uint64 tm){$/;"	f	file:
DbProgressHandler	tclsqlite.c	/^static int DbProgressHandler(void *cd){$/;"	f	file:
DbRollbackHandler	tclsqlite.c	/^static void DbRollbackHandler(void *clientData){$/;"	f	file:
DbSetProperty	sqliteInt.h	1144;"	d
DbTraceHandler	tclsqlite.c	/^static void DbTraceHandler(void *cd, const char *zSql){$/;"	f	file:
DbTraceV2Handler	tclsqlite.c	/^static int DbTraceV2Handler($/;"	f	file:
DbTransPostCmd	tclsqlite.c	/^static int SQLITE_TCLAPI DbTransPostCmd($/;"	f	file:
DbUnlockNotify	tclsqlite.c	/^static void DbUnlockNotify(void **apArg, int nArg){$/;"	f	file:
DbUpdateHandler	tclsqlite.c	/^static void DbUpdateHandler($/;"	f	file:
DbUseNre	tclsqlite.c	/^static int DbUseNre(void){$/;"	f	file:
DbUseNre	tclsqlite.c	1690;"	d	file:
DbWalHandler	tclsqlite.c	/^static int DbWalHandler($/;"	f	file:
Deephemeralize	vdbe.c	173;"	d	file:
DemoFile	test_demovfs.c	/^struct DemoFile {$/;"	s	file:
DemoFile	test_demovfs.c	/^typedef struct DemoFile DemoFile;$/;"	t	typeref:struct:DemoFile	file:
DevsymGlobal	test_devsym.c	/^struct DevsymGlobal {$/;"	s	file:
DistinctCtx	select.c	/^struct DistinctCtx {$/;"	s	file:
DistinctCtx	select.c	/^typedef struct DistinctCtx DistinctCtx;$/;"	t	typeref:struct:DistinctCtx	file:
EIGHT_BYTE_ALIGNMENT	sqliteInt.h	827;"	d
EIGHT_BYTE_ALIGNMENT	sqliteInt.h	829;"	d
ENC	sqliteInt.h	1394;"	d
END_TIMER	shell.c	236;"	d	file:
END_TIMER	shell.c	313;"	d	file:
END_TIMER	shell.c	318;"	d	file:
ENVIRONMENT_VARIABLE1_NAME	test_sqllog.c	95;"	d	file:
ENVIRONMENT_VARIABLE2_NAME	test_sqllog.c	96;"	d	file:
ENVIRONMENT_VARIABLE3_NAME	test_sqllog.c	97;"	d	file:
EP_Agg	sqliteInt.h	2316;"	d
EP_Alias	sqliteInt.h	2337;"	d
EP_CanBeNull	sqliteInt.h	2335;"	d
EP_Collate	sqliteInt.h	2323;"	d
EP_ConstFunc	sqliteInt.h	2334;"	d
EP_DblQuoted	sqliteInt.h	2321;"	d
EP_Distinct	sqliteInt.h	2319;"	d
EP_Error	sqliteInt.h	2318;"	d
EP_FromJoin	sqliteInt.h	2315;"	d
EP_Generic	sqliteInt.h	2324;"	d
EP_InfixFunc	sqliteInt.h	2322;"	d
EP_IntValue	sqliteInt.h	2325;"	d
EP_MemToken	sqliteInt.h	2331;"	d
EP_NoReduce	sqliteInt.h	2332;"	d
EP_Propagate	sqliteInt.h	2342;"	d
EP_Reduced	sqliteInt.h	2328;"	d
EP_Resolved	sqliteInt.h	2317;"	d
EP_Skip	sqliteInt.h	2327;"	d
EP_Static	sqliteInt.h	2330;"	d
EP_Subquery	sqliteInt.h	2336;"	d
EP_TokenOnly	sqliteInt.h	2329;"	d
EP_Unlikely	sqliteInt.h	2333;"	d
EP_VarSelect	sqliteInt.h	2320;"	d
EP_xIsSelect	sqliteInt.h	2326;"	d
EXCLUSIVE_LOCK	os.h	89;"	d
EXPRDUP_REDUCE	sqliteInt.h	2376;"	d
EXPR_FULLSIZE	sqliteInt.h	2368;"	d
EXPR_REDUCEDSIZE	sqliteInt.h	2369;"	d
EXPR_TOKENONLYSIZE	sqliteInt.h	2370;"	d
EXTRA_SIZE	btreeInt.h	309;"	d
EchoModule	test8.c	/^struct EchoModule {$/;"	s	file:
EchoModule	test8.c	/^typedef struct EchoModule EchoModule;$/;"	t	typeref:struct:EchoModule	file:
EntropyGatherer	os_win.c	/^struct EntropyGatherer {$/;"	s	file:
EntropyGatherer	os_win.c	/^typedef struct EntropyGatherer EntropyGatherer;$/;"	t	typeref:struct:EntropyGatherer	file:
EvalEvent	test_thread.c	/^struct EvalEvent {$/;"	s	file:
EvalEvent	test_thread.c	/^typedef struct EvalEvent EvalEvent;$/;"	t	typeref:struct:EvalEvent	file:
ExpandBlob	vdbeInt.h	555;"	d
ExpandBlob	vdbeInt.h	558;"	d
Explain	vdbeInt.h	/^struct Explain {$/;"	s
Explain	vdbeInt.h	/^typedef struct Explain Explain;$/;"	t	typeref:struct:Explain
Expr	sqliteInt.h	/^struct Expr {$/;"	s
Expr	sqliteInt.h	/^typedef struct Expr Expr;$/;"	t	typeref:struct:Expr
ExprClearProperty	sqliteInt.h	2351;"	d
ExprHasAllProperty	sqliteInt.h	2349;"	d
ExprHasProperty	sqliteInt.h	2348;"	d
ExprList	sqliteInt.h	/^struct ExprList {$/;"	s
ExprList	sqliteInt.h	/^typedef struct ExprList ExprList;$/;"	t	typeref:struct:ExprList
ExprList_item	sqliteInt.h	/^  struct ExprList_item { \/* For each expression in the list *\/$/;"	s	struct:ExprList
ExprSetProperty	sqliteInt.h	2350;"	d
ExprSetVVAProperty	sqliteInt.h	2358;"	d
ExprSetVVAProperty	sqliteInt.h	2360;"	d
ExprSpan	sqliteInt.h	/^struct ExprSpan {$/;"	s
ExprSpan	sqliteInt.h	/^typedef struct ExprSpan ExprSpan;$/;"	t	typeref:struct:ExprSpan
F1	tclsqlite.c	3571;"	d	file:
F2	tclsqlite.c	3572;"	d	file:
F3	tclsqlite.c	3573;"	d	file:
F4	tclsqlite.c	3574;"	d	file:
FAULT_INJECT_NONE	test_vfs.c	65;"	d	file:
FAULT_INJECT_PERSISTENT	test_vfs.c	67;"	d	file:
FAULT_INJECT_TRANSIENT	test_vfs.c	66;"	d	file:
FILEHANDLEID	pager.c	132;"	d	file:
FILE_ATTRIBUTE_MASK	os_win.c	236;"	d	file:
FILE_FLAG_MASK	os_win.c	232;"	d	file:
FKey	sqliteInt.h	/^struct FKey {$/;"	s
FKey	sqliteInt.h	/^typedef struct FKey FKey;$/;"	t	typeref:struct:FKey
FLAG_INTERN	printf.c	62;"	d	file:
FLAG_SIGNED	printf.c	61;"	d	file:
FLAG_STRING	printf.c	63;"	d	file:
FOREGUARD	mem2.c	68;"	d	file:
FOUR_BYTE_INT	vdbeaux.c	3313;"	d	file:
FOUR_BYTE_UINT	vdbeaux.c	3312;"	d	file:
FS_VFS_NAME	test_onefile.c	95;"	d	file:
FUNCTION	sqliteInt.h	1595;"	d
FUNCTION2	sqliteInt.h	1604;"	d
FUNC_PERFECT_MATCH	callback.c	250;"	d	file:
F_OK	test_demovfs.c	483;"	d	file:
FileChunk	memjournal.c	/^struct FileChunk {$/;"	s	file:
FileChunk	memjournal.c	/^typedef struct FileChunk FileChunk;$/;"	t	typeref:struct:FileChunk	file:
FilePoint	memjournal.c	/^struct FilePoint {$/;"	s	file:
FilePoint	memjournal.c	/^typedef struct FilePoint FilePoint;$/;"	t	typeref:struct:FilePoint	file:
FsdirCsr	test_fs.c	/^struct FsdirCsr {$/;"	s	file:
FsdirCsr	test_fs.c	/^typedef struct FsdirCsr FsdirCsr;$/;"	t	typeref:struct:FsdirCsr	file:
FsdirVtab	test_fs.c	/^struct FsdirVtab {$/;"	s	file:
FsdirVtab	test_fs.c	/^typedef struct FsdirVtab FsdirVtab;$/;"	t	typeref:struct:FsdirVtab	file:
FstreeCsr	test_fs.c	/^struct FstreeCsr {$/;"	s	file:
FstreeCsr	test_fs.c	/^typedef struct FstreeCsr FstreeCsr;$/;"	t	typeref:struct:FstreeCsr	file:
FstreeVtab	test_fs.c	/^struct FstreeVtab {$/;"	s	file:
FstreeVtab	test_fs.c	/^typedef struct FstreeVtab FstreeVtab;$/;"	t	typeref:struct:FstreeVtab	file:
FuncDef	sqliteInt.h	/^struct FuncDef {$/;"	s
FuncDef	sqliteInt.h	/^typedef struct FuncDef FuncDef;$/;"	t	typeref:struct:FuncDef
FuncDefHash	sqliteInt.h	/^struct FuncDefHash {$/;"	s
FuncDefHash	sqliteInt.h	/^typedef struct FuncDefHash FuncDefHash;$/;"	t	typeref:struct:FuncDefHash
FuncDestructor	sqliteInt.h	/^struct FuncDestructor {$/;"	s
FuncDestructor	sqliteInt.h	/^typedef struct FuncDestructor FuncDestructor;$/;"	t	typeref:struct:FuncDestructor
GCC_VERSION	sqliteInt.h	108;"	d
GCC_VERSION	sqliteInt.h	110;"	d
GETPID	tclsqlite.c	62;"	d	file:
GETPID	tclsqlite.c	68;"	d	file:
GETPROCTIMES	shell.c	/^typedef BOOL (WINAPI *GETPROCTIMES)(HANDLE, LPFILETIME, LPFILETIME,$/;"	t	file:
GLOBAL	sqliteInt.h	969;"	d
GLOBAL	sqliteInt.h	975;"	d
HANDLE_TO_WINFILE	os_win.c	2170;"	d	file:
HASHTABLE_HASH_1	wal.c	516;"	d	file:
HASHTABLE_NPAGE	wal.c	515;"	d	file:
HASHTABLE_NPAGE_ONE	wal.c	524;"	d	file:
HASHTABLE_NSLOT	wal.c	517;"	d	file:
HAS_TIMER	shell.c	237;"	d	file:
HAS_TIMER	shell.c	314;"	d	file:
HAS_TIMER	shell.c	319;"	d	file:
HAS_UPDATE_HOOK	vdbe.c	94;"	d	file:
HAS_UPDATE_HOOK	vdbe.c	96;"	d	file:
HAVE_FCHOWN	vxworks.h	29;"	d
HAVE_FULLFSYNC	os_unix.c	3383;"	d	file:
HAVE_FULLFSYNC	os_unix.c	3385;"	d	file:
HAVE_GETHOSTUUID	os_unix.c	111;"	d	file:
HAVE_LOCALTIME_S	date.c	445;"	d	file:
HAVE_LOCALTIME_S	date.c	446;"	d	file:
HAVE_LSTAT	vxworks.h	31;"	d
HAVE_MREMAP	os_unix.c	317;"	d	file:
HAVE_MREMAP	os_unix.c	319;"	d	file:
HAVE_PREAD	os_unix.c	76;"	d	file:
HAVE_PWRITE	os_unix.c	77;"	d	file:
HAVE_READLINK	vxworks.h	30;"	d
HAVE_UTIME	vxworks.h	25;"	d
HasRowid	sqliteInt.h	1879;"	d
Hash	hash.h	/^struct Hash {$/;"	s
Hash	hash.h	/^typedef struct Hash Hash;$/;"	t	typeref:struct:Hash
HashElem	hash.h	/^struct HashElem {$/;"	s
HashElem	hash.h	/^typedef struct HashElem HashElem;$/;"	t	typeref:struct:HashElem
INCRINIT_NORMAL	vdbesort.c	2082;"	d	file:
INCRINIT_ROOT	vdbesort.c	2084;"	d	file:
INCRINIT_TASK	vdbesort.c	2083;"	d	file:
INO_T_DEFINED	test_windirent.h	46;"	d
INST_MAX_PATHNAME	test_osinst.c	86;"	d	file:
INT16_TYPE	sqliteInt.h	651;"	d
INT16_TYPE	sqliteInt.h	653;"	d
INT8_TYPE	sqliteInt.h	665;"	d
INT8_TYPE	sqliteInt.h	667;"	d
INVALID_FILE_ATTRIBUTES	os_win.c	228;"	d	file:
INVALID_SET_FILE_POINTER	os_win.c	2522;"	d	file:
IN_DECLARE_VTAB	sqliteInt.h	2986;"	d
IN_DECLARE_VTAB	sqliteInt.h	2988;"	d
IN_INDEX_EPH	sqliteInt.h	4149;"	d
IN_INDEX_INDEX_ASC	sqliteInt.h	4150;"	d
IN_INDEX_INDEX_DESC	sqliteInt.h	4151;"	d
IN_INDEX_LOOP	sqliteInt.h	4158;"	d
IN_INDEX_MEMBERSHIP	sqliteInt.h	4157;"	d
IN_INDEX_NOOP	sqliteInt.h	4152;"	d
IN_INDEX_NOOP_OK	sqliteInt.h	4156;"	d
IN_INDEX_ROWID	sqliteInt.h	4148;"	d
IOMETHODS	os_unix.c	4957;"	d	file:
IOTRACE	sqliteInt.h	4202;"	d
IOTRACE	sqliteInt.h	4206;"	d
ISAUTOVACUUM	btreeInt.h	655;"	d
ISAUTOVACUUM	btreeInt.h	657;"	d
IS_BIG_INT	sqliteInt.h	486;"	d
IS_LOCK_ERROR	os_unix.c	178;"	d	file:
IdChar	complete.c	27;"	d	file:
IdChar	complete.c	31;"	d	file:
IdChar	tokenize.c	165;"	d	file:
IdChar	tokenize.c	183;"	d	file:
IdList	sqliteInt.h	/^struct IdList {$/;"	s
IdList	sqliteInt.h	/^typedef struct IdList IdList;$/;"	t	typeref:struct:IdList
IdList_item	sqliteInt.h	/^  struct IdList_item {$/;"	s	struct:IdList
IdxCover	expr.c	/^struct IdxCover {$/;"	s	file:
IfNotOmitAV	btree.c	60;"	d	file:
IfNotOmitAV	btree.c	62;"	d	file:
IgnorableOrderby	sqliteInt.h	2768;"	d
ImportCtx	shell.c	/^struct ImportCtx {$/;"	s	file:
ImportCtx	shell.c	/^typedef struct ImportCtx ImportCtx;$/;"	t	typeref:struct:ImportCtx	file:
InLoop	whereInt.h	/^      struct InLoop {$/;"	s	struct:WhereLevel::__anon3::__anon4
IncrMerger	vdbesort.c	/^struct IncrMerger {$/;"	s	file:
IncrMerger	vdbesort.c	/^typedef struct IncrMerger IncrMerger;       \/* Read & merge multiple PMAs *\/$/;"	t	typeref:struct:IncrMerger	file:
Incrblob	vdbeblob.c	/^struct Incrblob {$/;"	s	file:
Incrblob	vdbeblob.c	/^typedef struct Incrblob Incrblob;$/;"	t	typeref:struct:Incrblob	file:
IncrblobChannel	tclsqlite.c	/^struct IncrblobChannel {$/;"	s	file:
IncrblobChannel	tclsqlite.c	/^typedef struct IncrblobChannel IncrblobChannel;$/;"	t	typeref:struct:IncrblobChannel	file:
IncrblobChannelType	tclsqlite.c	/^static Tcl_ChannelType IncrblobChannelType = {$/;"	v	file:
Index	sqliteInt.h	/^struct Index {$/;"	s
Index	sqliteInt.h	/^typedef struct Index Index;$/;"	t	typeref:struct:Index
IndexSample	sqliteInt.h	/^struct IndexSample {$/;"	s
IndexSample	sqliteInt.h	/^typedef struct IndexSample IndexSample;$/;"	t	typeref:struct:IndexSample
InitData	sqliteInt.h	/^} InitData;$/;"	t	typeref:struct:__anon18
IntegrityCk	btreeInt.h	/^struct IntegrityCk {$/;"	s
IntegrityCk	btreeInt.h	/^typedef struct IntegrityCk IntegrityCk;$/;"	t	typeref:struct:IntegrityCk
InterpAndScript	test_superlock.c	/^struct InterpAndScript {$/;"	s	file:
InterpAndScript	test_superlock.c	/^typedef struct InterpAndScript InterpAndScript;$/;"	t	typeref:struct:InterpAndScript	file:
IsDigit	shell.c	136;"	d	file:
IsHiddenColumn	sqliteInt.h	1867;"	d
IsHiddenColumn	sqliteInt.h	1870;"	d
IsHiddenColumn	sqliteInt.h	1873;"	d
IsOrdinaryHiddenColumn	sqliteInt.h	1868;"	d
IsOrdinaryHiddenColumn	sqliteInt.h	1871;"	d
IsOrdinaryHiddenColumn	sqliteInt.h	1874;"	d
IsPowerOfTwo	sqliteInt.h	941;"	d
IsPrimaryKeyIndex	sqliteInt.h	2108;"	d
IsSpace	shell.c	135;"	d	file:
IsStat3	analyze.c	147;"	d	file:
IsStat3	analyze.c	150;"	d	file:
IsStat3	analyze.c	153;"	d	file:
IsStat34	analyze.c	157;"	d	file:
IsStat4	analyze.c	146;"	d	file:
IsStat4	analyze.c	149;"	d	file:
IsStat4	analyze.c	152;"	d	file:
IsUniqueIndex	sqliteInt.h	2111;"	d
IsVirtual	sqliteInt.h	1855;"	d
IsVirtual	sqliteInt.h	1857;"	d
JOURNAL_FILE	test_onefile.c	126;"	d	file:
JOURNAL_HDR_SZ	pager.c	772;"	d	file:
JOURNAL_PG_SZ	pager.c	766;"	d	file:
JT_CROSS	sqliteInt.h	2533;"	d
JT_ERROR	sqliteInt.h	2538;"	d
JT_INNER	sqliteInt.h	2532;"	d
JT_LEFT	sqliteInt.h	2535;"	d
JT_MAX_PATHNAME	test_journal.c	104;"	d	file:
JT_NATURAL	sqliteInt.h	2534;"	d
JT_OUTER	sqliteInt.h	2537;"	d
JT_RIGHT	sqliteInt.h	2536;"	d
JT_VFS_NAME	test_journal.c	109;"	d	file:
JtGlobal	test_journal.c	/^struct JtGlobal {$/;"	s	file:
KeyClass	sqliteInt.h	/^typedef struct KeyClass KeyClass;$/;"	t	typeref:struct:KeyClass
KeyInfo	sqliteInt.h	/^struct KeyInfo {$/;"	s
KeyInfo	sqliteInt.h	/^typedef struct KeyInfo KeyInfo;$/;"	t	typeref:struct:KeyInfo
LARGEST_INT64	sqliteInt.h	803;"	d
LIKEFUNC	sqliteInt.h	1610;"	d
LINKVAR	test_config.c	717;"	d	file:
LOCATE_NOERR	sqliteInt.h	3698;"	d
LOCATE_VIEW	sqliteInt.h	3697;"	d
LOCKFILE_EXCLUSIVE_LOCK	os_win.c	3040;"	d	file:
LOCKFILE_FAIL_IMMEDIATELY	os_win.c	3036;"	d	file:
LOGMAX	mem5.c	78;"	d	file:
LONGDOUBLE_TYPE	sqliteInt.h	513;"	d
LONGDOUBLE_TYPE	sqliteInt.h	671;"	d
LPDIR	test_windirent.h	/^typedef DIR *LPDIR;$/;"	t
LPDIRENT	test_windirent.h	/^typedef DIRENT *LPDIRENT;$/;"	t
LogCallback	test1.c	/^static struct LogCallback {$/;"	s	file:
LogEst	sqliteInt.h	/^typedef INT16_TYPE LogEst;$/;"	t
Lookaside	sqliteInt.h	/^struct Lookaside {$/;"	s
Lookaside	sqliteInt.h	/^typedef struct Lookaside Lookaside;$/;"	t	typeref:struct:Lookaside
LookasideSlot	sqliteInt.h	/^struct LookasideSlot {$/;"	s
LookasideSlot	sqliteInt.h	/^typedef struct LookasideSlot LookasideSlot;$/;"	t	typeref:struct:LookasideSlot
M	date.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
MALLOC_LOG_FRAMES	test_malloc.c	743;"	d	file:
MALLOC_LOG_KEYINTS	test_malloc.c	744;"	d	file:
MASKBIT	sqliteInt.h	2469;"	d
MASKBIT32	sqliteInt.h	2470;"	d
MASTER_NAME	sqliteInt.h	919;"	d
MASTER_ROOT	sqliteInt.h	925;"	d
MAX	sqliteInt.h	610;"	d
MAX	test_onefile.c	251;"	d	file:
MAXPATHNAME	test_demovfs.c	141;"	d	file:
MAX_6BYTE	vdbeaux.c	3129;"	d	file:
MAX_CONNECTIONS	test_sqllog.c	106;"	d	file:
MAX_MUTEXES	test_mutex.c	26;"	d	file:
MAX_PAGE_SIZE	test_multiplex.c	68;"	d	file:
MAX_PATH	os_win.c	112;"	d	file:
MAX_PATHNAME	os_unix.c	163;"	d	file:
MAX_PREPARED_STMTS	tclsqlite.c	81;"	d	file:
MAX_ROWID	vdbe.c	4178;"	d	file:
MAX_SECTOR_SIZE	pager.c	429;"	d	file:
MD5Context	tclsqlite.c	/^struct MD5Context {$/;"	s	file:
MD5Context	tclsqlite.c	/^typedef struct MD5Context MD5Context;$/;"	t	typeref:struct:MD5Context	file:
MD5DigestToBase10x8	tclsqlite.c	/^static void MD5DigestToBase10x8(unsigned char digest[16], char zDigest[50]){$/;"	f	file:
MD5DigestToBase16	tclsqlite.c	/^static void MD5DigestToBase16(unsigned char *digest, char *zBuf){$/;"	f	file:
MD5Final	tclsqlite.c	/^static void MD5Final(unsigned char digest[16], MD5Context *ctx){$/;"	f	file:
MD5Init	tclsqlite.c	/^static void MD5Init(MD5Context *ctx){$/;"	f	file:
MD5STEP	tclsqlite.c	3577;"	d	file:
MD5Transform	tclsqlite.c	/^static void MD5Transform(uint32 buf[4], const uint32 in[16]){$/;"	f	file:
MD5Update	tclsqlite.c	/^void MD5Update(MD5Context *ctx, const unsigned char *buf, unsigned int len){$/;"	f	file:
MEM5LINK	mem5.c	143;"	d	file:
MEMCELLSIZE	vdbeInt.h	218;"	d
MEMDB	pager.c	781;"	d	file:
MEMDB	pager.c	783;"	d	file:
MEMJOURNAL_DFLT_FILECHUNKSIZE	memjournal.c	47;"	d	file:
MEMTYPE_HEAP	sqliteInt.h	4247;"	d
MEMTYPE_LOOKASIDE	sqliteInt.h	4248;"	d
MEMTYPE_PCACHE	sqliteInt.h	4250;"	d
MEMTYPE_SCRATCH	sqliteInt.h	4249;"	d
MEM_AffMask	vdbeInt.h	237;"	d
MEM_Agg	vdbeInt.h	254;"	d
MEM_Blob	vdbeInt.h	236;"	d
MEM_Cleared	vdbeInt.h	241;"	d
MEM_Dyn	vdbeInt.h	251;"	d
MEM_Ephem	vdbeInt.h	253;"	d
MEM_Frame	vdbeInt.h	239;"	d
MEM_Int	vdbeInt.h	234;"	d
MEM_Null	vdbeInt.h	232;"	d
MEM_Real	vdbeInt.h	235;"	d
MEM_RowSet	vdbeInt.h	238;"	d
MEM_Static	vdbeInt.h	252;"	d
MEM_Str	vdbeInt.h	233;"	d
MEM_Subtype	vdbeInt.h	256;"	d
MEM_Term	vdbeInt.h	250;"	d
MEM_TypeMask	vdbeInt.h	242;"	d
MEM_Undefined	vdbeInt.h	240;"	d
MEM_Zero	vdbeInt.h	255;"	d
MEM_Zero	vdbeInt.h	258;"	d
MEM_Zero	vdbeInt.h	259;"	d
MIN	sqliteInt.h	607;"	d
MIN	test_onefile.c	250;"	d	file:
MODE_Ascii	shell.c	671;"	d	file:
MODE_Column	shell.c	663;"	d	file:
MODE_Csv	shell.c	669;"	d	file:
MODE_Explain	shell.c	670;"	d	file:
MODE_Html	shell.c	666;"	d	file:
MODE_Insert	shell.c	667;"	d	file:
MODE_Line	shell.c	662;"	d	file:
MODE_List	shell.c	664;"	d	file:
MODE_Pretty	shell.c	672;"	d	file:
MODE_Semi	shell.c	665;"	d	file:
MODE_Tcl	shell.c	668;"	d	file:
MSG_Close	test_server.c	244;"	d	file:
MSG_Done	test_server.c	245;"	d	file:
MSG_Finalize	test_server.c	243;"	d	file:
MSG_Open	test_server.c	239;"	d	file:
MSG_Prepare	test_server.c	240;"	d	file:
MSG_Reset	test_server.c	242;"	d	file:
MSG_Step	test_server.c	241;"	d	file:
MULTIPLEX_CTRL_ENABLE	test_multiplex.h	45;"	d
MULTIPLEX_CTRL_SET_CHUNK_SIZE	test_multiplex.h	46;"	d
MULTIPLEX_CTRL_SET_MAX_CHUNKS	test_multiplex.h	47;"	d
MUTEX_LOGIC	mutex.h	67;"	d
MUTEX_LOGIC	mutex.h	69;"	d
MX_CELL	btreeInt.h	229;"	d
MX_CELL_SIZE	btreeInt.h	222;"	d
MX_CHUNK_NUMBER	test_multiplex.c	85;"	d	file:
MX_CLOSE_ATTEMPT	os_win.c	2602;"	d	file:
MX_SMALL	mem3.c	40;"	d	file:
MallocLog	test_malloc.c	/^struct MallocLog {$/;"	s	file:
MallocLog	test_malloc.c	/^typedef struct MallocLog MallocLog;$/;"	t	typeref:struct:MallocLog	file:
Md5_Init	tclsqlite.c	/^int Md5_Init(Tcl_Interp *interp){$/;"	f
Md5_Register	tclsqlite.c	/^int Md5_Register($/;"	f
Mem	vdbe.h	/^typedef struct Mem Mem;$/;"	t	typeref:struct:Mem
Mem	vdbeInt.h	/^struct Mem {$/;"	s
Mem0Global	malloc.c	/^static SQLITE_WSD struct Mem0Global {$/;"	s	file:
Mem3Block	mem3.c	/^struct Mem3Block {$/;"	s	file:
Mem3Block	mem3.c	/^typedef struct Mem3Block Mem3Block;$/;"	t	typeref:struct:Mem3Block	file:
Mem3Global	mem3.c	/^static SQLITE_WSD struct Mem3Global {$/;"	s	file:
Mem5Global	mem5.c	/^static SQLITE_WSD struct Mem5Global {$/;"	s	file:
Mem5Link	mem5.c	/^struct Mem5Link {$/;"	s	file:
Mem5Link	mem5.c	/^typedef struct Mem5Link Mem5Link;$/;"	t	typeref:struct:Mem5Link	file:
MemBlockHdr	mem2.c	/^struct MemBlockHdr {$/;"	s	file:
MemFault	test_malloc.c	/^static struct MemFault {$/;"	s	file:
MemJournal	memjournal.c	/^struct MemJournal {$/;"	s	file:
MemJournal	memjournal.c	/^typedef struct MemJournal MemJournal;$/;"	t	typeref:struct:MemJournal	file:
MemJournalMethods	memjournal.c	/^static const struct sqlite3_io_methods MemJournalMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
MemPage	btreeInt.h	/^struct MemPage {$/;"	s
MemPage	btreeInt.h	/^typedef struct MemPage MemPage;$/;"	t	typeref:struct:MemPage
MemSetTypeFlag	vdbeInt.h	271;"	d
MemValue	vdbeInt.h	/^  union MemValue {$/;"	u	struct:Mem
MergeEngine	vdbesort.c	/^struct MergeEngine {$/;"	s	file:
MergeEngine	vdbesort.c	/^typedef struct MergeEngine MergeEngine;     \/* Merge PMAs together *\/$/;"	t	typeref:struct:MergeEngine	file:
Module	sqliteInt.h	/^struct Module {$/;"	s
Module	sqliteInt.h	/^typedef struct Module Module;$/;"	t	typeref:struct:Module
NAME_MAX	test_windirent.h	56;"	d
NAME_MAX	test_windirent.h	58;"	d
NB	btree.c	6724;"	d	file:
NCSIZE	mem2.c	74;"	d	file:
NC_AllowAgg	sqliteInt.h	2614;"	d
NC_HasAgg	sqliteInt.h	2618;"	d
NC_IdxExpr	sqliteInt.h	2619;"	d
NC_InAggFunc	sqliteInt.h	2617;"	d
NC_IsCheck	sqliteInt.h	2616;"	d
NC_MinMaxAgg	sqliteInt.h	2621;"	d
NC_PartIdx	sqliteInt.h	2615;"	d
NC_VarSelect	sqliteInt.h	2620;"	d
NDEBUG	sqliteInt.h	348;"	d
NDEBUG	sqliteInt.h	351;"	d
NDELAY	main.c	1440;"	d	file:
NEVER	sqliteInt.h	424;"	d
NEVER	sqliteInt.h	427;"	d
NEVER	sqliteInt.h	430;"	d
NN	btree.c	6723;"	d	file:
NO_LOCK	os.h	85;"	d
NTDDI_WIN8	os_win.c	72;"	d	file:
NTDDI_WINBLUE	os_win.c	76;"	d	file:
NTDDI_WINTHRESHOLD	os_win.c	80;"	d	file:
NULL_INTPTR_T	test_windirent.h	67;"	d
NUM_PREPARED_STMTS	tclsqlite.c	80;"	d	file:
N_HASH	mem3.c	46;"	d	file:
N_OR_COST	whereInt.h	160;"	d
N_SORT_BUCKET	pcache.c	728;"	d	file:
N_THREAD	test4.c	60;"	d	file:
N_THREAD	test7.c	89;"	d	file:
NameContext	sqliteInt.h	/^struct NameContext {$/;"	s
NameContext	sqliteInt.h	/^typedef struct NameContext NameContext;$/;"	t	typeref:struct:NameContext
OE_Abort	sqliteInt.h	1954;"	d
OE_Cascade	sqliteInt.h	1962;"	d
OE_Default	sqliteInt.h	1964;"	d
OE_Fail	sqliteInt.h	1955;"	d
OE_Ignore	sqliteInt.h	1956;"	d
OE_None	sqliteInt.h	1952;"	d
OE_Replace	sqliteInt.h	1957;"	d
OE_Restrict	sqliteInt.h	1959;"	d
OE_Rollback	sqliteInt.h	1953;"	d
OE_SetDflt	sqliteInt.h	1961;"	d
OE_SetNull	sqliteInt.h	1960;"	d
OMIT_TEMPDB	sqliteInt.h	532;"	d
OMIT_TEMPDB	sqliteInt.h	534;"	d
ONEPASS_MULTI	sqliteInt.h	3670;"	d
ONEPASS_OFF	sqliteInt.h	3668;"	d
ONEPASS_SINGLE	sqliteInt.h	3669;"	d
ONE_BYTE_INT	vdbeaux.c	3309;"	d	file:
ONLY_IF_REALLOC_STRESS	sqliteInt.h	441;"	d
ONLY_IF_REALLOC_STRESS	sqliteInt.h	443;"	d
ONLY_IF_REALLOC_STRESS	sqliteInt.h	445;"	d
OPFLAG_APPEND	sqliteInt.h	3017;"	d
OPFLAG_AUXDELETE	sqliteInt.h	3030;"	d
OPFLAG_BULKCSR	sqliteInt.h	3024;"	d
OPFLAG_EPHEM	sqliteInt.h	3014;"	d
OPFLAG_FORDELETE	sqliteInt.h	3026;"	d
OPFLAG_ISNOOP	sqliteInt.h	3020;"	d
OPFLAG_ISUPDATE	sqliteInt.h	3016;"	d
OPFLAG_LASTROWID	sqliteInt.h	3015;"	d
OPFLAG_LENGTHARG	sqliteInt.h	3022;"	d
OPFLAG_NCHANGE	sqliteInt.h	3012;"	d
OPFLAG_P2ISREG	sqliteInt.h	3027;"	d
OPFLAG_PERMUTE	sqliteInt.h	3028;"	d
OPFLAG_SAVEPOSITION	sqliteInt.h	3029;"	d
OPFLAG_SEEKEQ	sqliteInt.h	3025;"	d
OPFLAG_TYPEOFARG	sqliteInt.h	3023;"	d
OPFLAG_USESEEKRESULT	sqliteInt.h	3018;"	d
OSTRACE	sqliteInt.h	454;"	d
OSTRACE	sqliteInt.h	457;"	d
OS_ACCESS	test_osinst.c	88;"	d	file:
OS_ANNOTATE	test_osinst.c	111;"	d	file:
OS_CHECKRESERVEDLOCK	test_osinst.c	89;"	d	file:
OS_CLOSE	test_osinst.c	90;"	d	file:
OS_CURRENTTIME	test_osinst.c	91;"	d	file:
OS_DELETE	test_osinst.c	92;"	d	file:
OS_DEVCHAR	test_osinst.c	93;"	d	file:
OS_FILECONTROL	test_osinst.c	94;"	d	file:
OS_FILESIZE	test_osinst.c	95;"	d	file:
OS_FULLPATHNAME	test_osinst.c	96;"	d	file:
OS_LOCK	test_osinst.c	97;"	d	file:
OS_NUMEVENTS	test_osinst.c	113;"	d	file:
OS_OPEN	test_osinst.c	98;"	d	file:
OS_RANDOMNESS	test_osinst.c	99;"	d	file:
OS_READ	test_osinst.c	100;"	d	file:
OS_SECTORSIZE	test_osinst.c	101;"	d	file:
OS_SHMBARRIER	test_osinst.c	110;"	d	file:
OS_SHMLOCK	test_osinst.c	109;"	d	file:
OS_SHMMAP	test_osinst.c	108;"	d	file:
OS_SHMUNMAP	test_osinst.c	107;"	d	file:
OS_SLEEP	test_osinst.c	102;"	d	file:
OS_SYNC	test_osinst.c	103;"	d	file:
OS_TRUNCATE	test_osinst.c	104;"	d	file:
OS_UNLOCK	test_osinst.c	105;"	d	file:
OS_VXWORKS	vxworks.h	20;"	d
OS_VXWORKS	vxworks.h	28;"	d
OS_WRITE	test_osinst.c	106;"	d	file:
O_BINARY	os_unix.c	299;"	d	file:
O_LARGEFILE	os_unix.c	289;"	d	file:
O_LARGEFILE	os_unix.c	292;"	d	file:
O_LARGEFILE	os_unix.c	293;"	d	file:
O_NOFOLLOW	os_unix.c	296;"	d	file:
Op	vdbeInt.h	/^typedef struct VdbeOp Op;$/;"	t	typeref:struct:VdbeOp
OpenCounter	os_common.h	100;"	d
OpenCounter	os_common.h	102;"	d
OpenSession	shell.c	/^struct OpenSession {$/;"	s	file:
OpenSession	shell.c	/^typedef struct OpenSession OpenSession;$/;"	t	typeref:struct:OpenSession	file:
OptimizationDisabled	sqliteInt.h	1464;"	d
OptimizationDisabled	sqliteInt.h	1467;"	d
OptimizationEnabled	sqliteInt.h	1465;"	d
OptimizationEnabled	sqliteInt.h	1468;"	d
P4_ADVANCE	vdbe.h	127;"	d
P4_COLLSEQ	vdbe.h	114;"	d
P4_DYNAMIC	vdbe.h	112;"	d
P4_EXPR	vdbe.h	117;"	d
P4_FUNCCTX	vdbe.h	129;"	d
P4_FUNCDEF	vdbe.h	115;"	d
P4_INT32	vdbe.h	124;"	d
P4_INT64	vdbe.h	123;"	d
P4_INTARRAY	vdbe.h	125;"	d
P4_KEYINFO	vdbe.h	116;"	d
P4_MEM	vdbe.h	118;"	d
P4_MPRINTF	vdbe.h	121;"	d
P4_NOTUSED	vdbe.h	111;"	d
P4_REAL	vdbe.h	122;"	d
P4_STATIC	vdbe.h	113;"	d
P4_SUBPROGRAM	vdbe.h	126;"	d
P4_TABLE	vdbe.h	128;"	d
P4_TRANSIENT	vdbe.h	119;"	d
P4_VTAB	vdbe.h	120;"	d
P5_ConstraintCheck	vdbe.h	134;"	d
P5_ConstraintFK	vdbe.h	135;"	d
P5_ConstraintNotNull	vdbe.h	132;"	d
P5_ConstraintUnique	vdbe.h	133;"	d
PACKAGE_VERSION	tclsqlite.c	3461;"	d	file:
PAGERID	pager.c	131;"	d	file:
PAGERTRACE	pager.c	118;"	d	file:
PAGERTRACE	pager.c	120;"	d	file:
PAGER_CACHESPILL	pager.h	106;"	d
PAGER_CKPT_FULLFSYNC	pager.h	105;"	d
PAGER_ERROR	pager.c	357;"	d	file:
PAGER_FLAGS_MASK	pager.h	107;"	d
PAGER_FULLFSYNC	pager.h	104;"	d
PAGER_GET_NOCONTENT	pager.h	88;"	d
PAGER_GET_READONLY	pager.h	89;"	d
PAGER_INCR	pager.c	728;"	d	file:
PAGER_INCR	pager.c	730;"	d	file:
PAGER_JOURNALMODE_DELETE	pager.h	78;"	d
PAGER_JOURNALMODE_MEMORY	pager.h	82;"	d
PAGER_JOURNALMODE_OFF	pager.h	80;"	d
PAGER_JOURNALMODE_PERSIST	pager.h	79;"	d
PAGER_JOURNALMODE_QUERY	pager.h	77;"	d
PAGER_JOURNALMODE_TRUNCATE	pager.h	81;"	d
PAGER_JOURNALMODE_WAL	pager.h	83;"	d
PAGER_LOCKINGMODE_EXCLUSIVE	pager.h	68;"	d
PAGER_LOCKINGMODE_NORMAL	pager.h	67;"	d
PAGER_LOCKINGMODE_QUERY	pager.h	66;"	d
PAGER_MAX_PGNO	pager.c	799;"	d	file:
PAGER_MEMORY	pager.h	61;"	d
PAGER_MJ_PGNO	pager.h	53;"	d
PAGER_OMIT_JOURNAL	pager.h	60;"	d
PAGER_OPEN	pager.c	351;"	d	file:
PAGER_READER	pager.c	352;"	d	file:
PAGER_STAT_HIT	pager.c	715;"	d	file:
PAGER_STAT_MISS	pager.c	716;"	d	file:
PAGER_STAT_WRITE	pager.c	717;"	d	file:
PAGER_SYNCHRONOUS_EXTRA	pager.h	102;"	d
PAGER_SYNCHRONOUS_FULL	pager.h	101;"	d
PAGER_SYNCHRONOUS_MASK	pager.h	103;"	d
PAGER_SYNCHRONOUS_NORMAL	pager.h	100;"	d
PAGER_SYNCHRONOUS_OFF	pager.h	99;"	d
PAGER_WRITER_CACHEMOD	pager.c	354;"	d	file:
PAGER_WRITER_DBMOD	pager.c	355;"	d	file:
PAGER_WRITER_FINISHED	pager.c	356;"	d	file:
PAGER_WRITER_LOCKED	pager.c	353;"	d	file:
PARENTVFS	test_vfs.c	156;"	d	file:
PCACHE1_MIGHT_USE_GROUP_MUTEX	pcache1.c	232;"	d	file:
PCACHE1_MIGHT_USE_GROUP_MUTEX	pcache1.c	236;"	d	file:
PCACHE_DIRTYLIST_ADD	pcache.c	149;"	d	file:
PCACHE_DIRTYLIST_FRONT	pcache.c	150;"	d	file:
PCACHE_DIRTYLIST_REMOVE	pcache.c	148;"	d	file:
PCache	pcache.c	/^struct PCache {$/;"	s	file:
PCache	pcache.h	/^typedef struct PCache PCache;$/;"	t	typeref:struct:PCache
PCache1	pcache1.c	/^struct PCache1 {$/;"	s	file:
PCache1	pcache1.c	/^typedef struct PCache1 PCache1;$/;"	t	typeref:struct:PCache1	file:
PCacheGlobal	pcache1.c	/^static SQLITE_WSD struct PCacheGlobal {$/;"	s	file:
PENDING_BYTE	os.h	147;"	d
PENDING_BYTE	os.h	149;"	d
PENDING_BYTE_PAGE	btreeInt.h	581;"	d
PENDING_LOCK	os.h	88;"	d
PGHDR_CLEAN	pcache.h	49;"	d
PGHDR_DIRTY	pcache.h	50;"	d
PGHDR_DONT_WRITE	pcache.h	54;"	d
PGHDR_MMAP	pcache.h	55;"	d
PGHDR_NEED_SYNC	pcache.h	52;"	d
PGHDR_WAL_APPEND	pcache.h	57;"	d
PGHDR_WRITEABLE	pcache.h	51;"	d
PGroup	pcache1.c	/^struct PGroup {$/;"	s	file:
PGroup	pcache1.c	/^typedef struct PGroup PGroup;$/;"	t	typeref:struct:PGroup	file:
PLS_HASHSIZE	test_wsd.c	22;"	d	file:
PROXY_CONCHVERSION	os_unix.c	6678;"	d	file:
PROXY_HEADERLEN	os_unix.c	6679;"	d	file:
PROXY_HOSTIDLEN	os_unix.c	6639;"	d	file:
PROXY_MAXCONCHLEN	os_unix.c	6681;"	d	file:
PROXY_PATHINDEX	os_unix.c	6680;"	d	file:
PTF_INTKEY	btreeInt.h	256;"	d
PTF_LEAF	btreeInt.h	259;"	d
PTF_LEAFDATA	btreeInt.h	258;"	d
PTF_ZERODATA	btreeInt.h	257;"	d
PTRMAP_BTREE	btreeInt.h	637;"	d
PTRMAP_FREEPAGE	btreeInt.h	634;"	d
PTRMAP_ISPAGE	btreeInt.h	600;"	d
PTRMAP_OVERFLOW1	btreeInt.h	635;"	d
PTRMAP_OVERFLOW2	btreeInt.h	636;"	d
PTRMAP_PAGENO	btreeInt.h	598;"	d
PTRMAP_PTROFFSET	btreeInt.h	599;"	d
PTRMAP_ROOTPAGE	btreeInt.h	633;"	d
Pager	pager.c	/^struct Pager {$/;"	s	file:
Pager	pager.h	/^typedef struct Pager Pager;$/;"	t	typeref:struct:Pager
PagerSavepoint	pager.c	/^struct PagerSavepoint {$/;"	s	file:
PagerSavepoint	pager.c	/^typedef struct PagerSavepoint PagerSavepoint;$/;"	t	typeref:struct:PagerSavepoint	file:
Parse	sqliteInt.h	/^struct Parse {$/;"	s
Parse	sqliteInt.h	/^typedef struct Parse Parse;$/;"	t	typeref:struct:Parse
PgFreeslot	pcache1.c	/^struct PgFreeslot {$/;"	s	file:
PgFreeslot	pcache1.c	/^typedef struct PgFreeslot PgFreeslot;$/;"	t	typeref:struct:PgFreeslot	file:
PgHdr	pcache.h	/^struct PgHdr {$/;"	s
PgHdr	pcache.h	/^typedef struct PgHdr PgHdr;$/;"	t	typeref:struct:PgHdr
PgHdr1	pcache1.c	/^struct PgHdr1 {$/;"	s	file:
PgHdr1	pcache1.c	/^typedef struct PgHdr1 PgHdr1;$/;"	t	typeref:struct:PgHdr1	file:
Pgno	pager.h	/^typedef u32 Pgno;$/;"	t
PmaReader	vdbesort.c	/^struct PmaReader {$/;"	s	file:
PmaReader	vdbesort.c	/^typedef struct PmaReader PmaReader;         \/* Incrementally read one PMA *\/$/;"	t	typeref:struct:PmaReader	file:
PmaWriter	vdbesort.c	/^struct PmaWriter {$/;"	s	file:
PmaWriter	vdbesort.c	/^typedef struct PmaWriter PmaWriter;         \/* Incrementally write one PMA *\/$/;"	t	typeref:struct:PmaWriter	file:
PragFlag_NeedSchema	pragma.h	49;"	d
PragFlag_ReadOnly	pragma.h	50;"	d
PragTyp_ACTIVATE_EXTENSIONS	pragma.h	43;"	d
PragTyp_AUTO_VACUUM	pragma.h	7;"	d
PragTyp_BUSY_TIMEOUT	pragma.h	9;"	d
PragTyp_CACHE_SIZE	pragma.h	10;"	d
PragTyp_CACHE_SPILL	pragma.h	11;"	d
PragTyp_CASE_SENSITIVE_LIKE	pragma.h	12;"	d
PragTyp_COLLATION_LIST	pragma.h	13;"	d
PragTyp_COMPILE_OPTIONS	pragma.h	14;"	d
PragTyp_DATABASE_LIST	pragma.h	16;"	d
PragTyp_DATA_STORE_DIRECTORY	pragma.h	15;"	d
PragTyp_DEFAULT_CACHE_SIZE	pragma.h	17;"	d
PragTyp_ENCODING	pragma.h	18;"	d
PragTyp_FLAG	pragma.h	8;"	d
PragTyp_FOREIGN_KEY_CHECK	pragma.h	19;"	d
PragTyp_FOREIGN_KEY_LIST	pragma.h	20;"	d
PragTyp_HEADER_VALUE	pragma.h	6;"	d
PragTyp_HEXKEY	pragma.h	44;"	d
PragTyp_INCREMENTAL_VACUUM	pragma.h	21;"	d
PragTyp_INDEX_INFO	pragma.h	22;"	d
PragTyp_INDEX_LIST	pragma.h	23;"	d
PragTyp_INTEGRITY_CHECK	pragma.h	24;"	d
PragTyp_JOURNAL_MODE	pragma.h	25;"	d
PragTyp_JOURNAL_SIZE_LIMIT	pragma.h	26;"	d
PragTyp_KEY	pragma.h	45;"	d
PragTyp_LOCKING_MODE	pragma.h	28;"	d
PragTyp_LOCK_PROXY_FILE	pragma.h	27;"	d
PragTyp_LOCK_STATUS	pragma.h	47;"	d
PragTyp_MMAP_SIZE	pragma.h	30;"	d
PragTyp_PAGE_COUNT	pragma.h	29;"	d
PragTyp_PAGE_SIZE	pragma.h	31;"	d
PragTyp_PARSER_TRACE	pragma.h	48;"	d
PragTyp_REKEY	pragma.h	46;"	d
PragTyp_SECURE_DELETE	pragma.h	32;"	d
PragTyp_SHRINK_MEMORY	pragma.h	33;"	d
PragTyp_SOFT_HEAP_LIMIT	pragma.h	34;"	d
PragTyp_STATS	pragma.h	35;"	d
PragTyp_SYNCHRONOUS	pragma.h	36;"	d
PragTyp_TABLE_INFO	pragma.h	37;"	d
PragTyp_TEMP_STORE	pragma.h	38;"	d
PragTyp_TEMP_STORE_DIRECTORY	pragma.h	39;"	d
PragTyp_THREADS	pragma.h	40;"	d
PragTyp_WAL_AUTOCHECKPOINT	pragma.h	41;"	d
PragTyp_WAL_CHECKPOINT	pragma.h	42;"	d
PreUpdate	sqliteInt.h	/^typedef struct PreUpdate PreUpdate;$/;"	t	typeref:struct:PreUpdate
PreUpdate	vdbeInt.h	/^struct PreUpdate {$/;"	s
PrintfArguments	sqliteInt.h	/^struct PrintfArguments {$/;"	s
PrintfArguments	sqliteInt.h	/^typedef struct PrintfArguments PrintfArguments;$/;"	t	typeref:struct:PrintfArguments
ProcessLocalStorage	test_wsd.c	/^struct ProcessLocalStorage {$/;"	s	file:
ProcessLocalStorage	test_wsd.c	/^typedef struct ProcessLocalStorage ProcessLocalStorage;$/;"	t	typeref:struct:ProcessLocalStorage	file:
ProcessLocalVar	test_wsd.c	/^struct ProcessLocalVar {$/;"	s	file:
ProcessLocalVar	test_wsd.c	/^typedef struct ProcessLocalVar ProcessLocalVar;$/;"	t	typeref:struct:ProcessLocalVar	file:
READMARK_NOT_USED	wal.c	386;"	d	file:
READ_LOCK	btreeInt.h	326;"	d
READ_UTF16BE	utf.c	118;"	d	file:
READ_UTF16LE	utf.c	108;"	d	file:
READ_UTF8	utf.c	155;"	d	file:
REALVFS	test_osinst.c	137;"	d	file:
REARGUARD	mem2.c	69;"	d	file:
REGISTER_TRACE	vdbe.c	497;"	d	file:
REGISTER_TRACE	vdbe.c	499;"	d	file:
RESERVED_BYTE	os.h	151;"	d
RESERVED_LOCK	os.h	87;"	d
ROUND8	sqliteInt.h	810;"	d
ROUNDDOWN8	sqliteInt.h	815;"	d
ROWSET_ALLOCATION_SIZE	rowset.c	70;"	d	file:
ROWSET_ENTRY_PER_CHUNK	rowset.c	75;"	d	file:
ROWSET_NEXT	rowset.c	124;"	d	file:
ROWSET_SORTED	rowset.c	123;"	d	file:
R_OK	test_demovfs.c	486;"	d	file:
RecordCompare	vdbe.h	/^typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);$/;"	t
ReusableSpace	vdbeaux.c	/^struct ReusableSpace {$/;"	s	file:
RowSet	rowset.c	/^struct RowSet {$/;"	s	file:
RowSet	sqliteInt.h	/^typedef struct RowSet RowSet;$/;"	t	typeref:struct:RowSet
RowSetChunk	rowset.c	/^struct RowSetChunk {$/;"	s	file:
RowSetEntry	rowset.c	/^struct RowSetEntry {            $/;"	s	file:
SAVEPOINT_BEGIN	sqliteInt.h	1637;"	d
SAVEPOINT_RELEASE	sqliteInt.h	1638;"	d
SAVEPOINT_ROLLBACK	sqliteInt.h	1639;"	d
SAVE_SZ	build.c	263;"	d	file:
SCHEMA	test_schema.c	21;"	d	file:
SCHEMA_ENC	sqliteInt.h	1393;"	d
SCHEMA_TABLE	sqliteInt.h	930;"	d
SELECTTRACE	select.c	22;"	d	file:
SELECTTRACE	select.c	28;"	d	file:
SELECTTRACE_ENABLED	sqliteInt.h	893;"	d
SELECTTRACE_ENABLED	sqliteInt.h	895;"	d
SEP_Column	shell.c	692;"	d	file:
SEP_Comma	shell.c	696;"	d	file:
SEP_CrLf	shell.c	697;"	d	file:
SEP_Record	shell.c	699;"	d	file:
SEP_Row	shell.c	693;"	d	file:
SEP_Space	shell.c	695;"	d	file:
SEP_Tab	shell.c	694;"	d	file:
SEP_Unit	shell.c	698;"	d	file:
SETBIT	bitvec.c	303;"	d	file:
SET_FULLSYNC	os.h	33;"	d
SF_Aggregate	sqliteInt.h	2677;"	d
SF_All	sqliteInt.h	2675;"	d
SF_Compound	sqliteInt.h	2682;"	d
SF_Converted	sqliteInt.h	2690;"	d
SF_Distinct	sqliteInt.h	2674;"	d
SF_Expanded	sqliteInt.h	2680;"	d
SF_FixedLimit	sqliteInt.h	2688;"	d
SF_HasAgg	sqliteInt.h	2678;"	d
SF_HasTypeInfo	sqliteInt.h	2681;"	d
SF_IncludeHidden	sqliteInt.h	2691;"	d
SF_MaybeConvert	sqliteInt.h	2689;"	d
SF_MinMaxAgg	sqliteInt.h	2686;"	d
SF_MultiValue	sqliteInt.h	2684;"	d
SF_NestedFrom	sqliteInt.h	2685;"	d
SF_Recursive	sqliteInt.h	2687;"	d
SF_Resolved	sqliteInt.h	2676;"	d
SF_UsesEphemeral	sqliteInt.h	2679;"	d
SF_Values	sqliteInt.h	2683;"	d
SHARED_FIRST	os.h	152;"	d
SHARED_LOCK	os.h	86;"	d
SHARED_SIZE	os.h	153;"	d
SHELL_USE_LOCAL_GETLINE	shell.c	97;"	d	file:
SHFLG_Lookaside	shell.c	657;"	d	file:
SHFLG_Pagecache	shell.c	656;"	d	file:
SHFLG_Scratch	shell.c	655;"	d	file:
SLConn	test_sqllog.c	/^struct SLConn {$/;"	s	file:
SLGlobal	test_sqllog.c	/^static struct SLGlobal {$/;"	s	file:
SLOT_2_0	util.c	826;"	d	file:
SLOT_4_2_0	util.c	827;"	d	file:
SMALLEST_INT64	sqliteInt.h	804;"	d
SORTER_MAX_MERGE_COUNT	vdbesort.c	460;"	d	file:
SORTER_TYPE_INTEGER	vdbesort.c	338;"	d	file:
SORTER_TYPE_TEXT	vdbesort.c	339;"	d	file:
SORTFLAG_UseSorter	select.c	61;"	d	file:
SPILLFLAG_NOSYNC	pager.c	462;"	d	file:
SPILLFLAG_OFF	pager.c	460;"	d	file:
SPILLFLAG_ROLLBACK	pager.c	461;"	d	file:
SQLITE3EXT_H	sqlite3ext.h	19;"	d
SQLITE3_MUTEX_INITIALIZER	mutex_unix.c	53;"	d	file:
SQLITE3_MUTEX_INITIALIZER	mutex_unix.c	55;"	d	file:
SQLITE3_MUTEX_INITIALIZER	mutex_unix.c	57;"	d	file:
SQLITE3_MUTEX_INITIALIZER	mutex_w32.c	55;"	d	file:
SQLITE3_MUTEX_INITIALIZER	mutex_w32.c	58;"	d	file:
SQLITEINT_H	sqliteInt.h	16;"	d
SQLITE_AFF_BLOB	sqliteInt.h	1713;"	d
SQLITE_AFF_INTEGER	sqliteInt.h	1716;"	d
SQLITE_AFF_MASK	sqliteInt.h	1725;"	d
SQLITE_AFF_NUMERIC	sqliteInt.h	1715;"	d
SQLITE_AFF_REAL	sqliteInt.h	1717;"	d
SQLITE_AFF_TEXT	sqliteInt.h	1714;"	d
SQLITE_ALLOW_COVERING_INDEX_SCAN	global.c	153;"	d	file:
SQLITE_ASCII	sqliteInt.h	625;"	d
SQLITE_AllOpts	sqliteInt.h	1458;"	d
SQLITE_AutoIndex	sqliteInt.h	1427;"	d
SQLITE_BIGENDIAN	sqliteInt.h	775;"	d
SQLITE_BIGENDIAN	sqliteInt.h	782;"	d
SQLITE_BIGENDIAN	sqliteInt.h	793;"	d
SQLITE_BIG_DBL	sqliteInt.h	515;"	d
SQLITE_BIG_DBL	sqliteInt.h	523;"	d
SQLITE_BTREE_H	btree.h	17;"	d
SQLITE_BYTEORDER	sqliteInt.h	774;"	d
SQLITE_BYTEORDER	sqliteInt.h	781;"	d
SQLITE_BYTEORDER	sqliteInt.h	792;"	d
SQLITE_CANTOPEN_BKPT	sqliteInt.h	3336;"	d
SQLITE_CORE	loadext.c	17;"	d	file:
SQLITE_CORE	test_multiplex.c	57;"	d	file:
SQLITE_CORRUPT_BKPT	sqliteInt.h	3334;"	d
SQLITE_CacheSpill	sqliteInt.h	1409;"	d
SQLITE_CellSizeCk	sqliteInt.h	1436;"	d
SQLITE_CkptFullFSync	sqliteInt.h	1408;"	d
SQLITE_ColumnCache	sqliteInt.h	1446;"	d
SQLITE_CountRows	sqliteInt.h	1411;"	d
SQLITE_CoverIdxScan	sqliteInt.h	1451;"	d
SQLITE_CursorHints	sqliteInt.h	1457;"	d
SQLITE_DEBUG_OS_TRACE	main.c	71;"	d	file:
SQLITE_DEFAULT_AUTOVACUUM	btree.h	29;"	d
SQLITE_DEFAULT_CACHE_SIZE	sqliteLimit.h	110;"	d
SQLITE_DEFAULT_FILE_FORMAT	sqliteInt.h	545;"	d
SQLITE_DEFAULT_FILE_PERMISSIONS	os_unix.c	150;"	d	file:
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT	pager.h	26;"	d
SQLITE_DEFAULT_MEMSTATUS	sqliteInt.h	282;"	d
SQLITE_DEFAULT_MMAP_SIZE	sqliteInt.h	866;"	d
SQLITE_DEFAULT_MMAP_SIZE	sqliteInt.h	870;"	d
SQLITE_DEFAULT_MMAP_SIZE	sqliteInt.h	871;"	d
SQLITE_DEFAULT_MMAP_SIZE_xc	sqliteInt.h	867;"	d
SQLITE_DEFAULT_PAGE_SIZE	sqliteLimit.h	160;"	d
SQLITE_DEFAULT_PAGE_SIZE	sqliteLimit.h	163;"	d
SQLITE_DEFAULT_PAGE_SIZE	sqliteLimit.h	164;"	d
SQLITE_DEFAULT_PCACHE_INITSZ	sqliteInt.h	592;"	d
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS	os_unix.c	157;"	d	file:
SQLITE_DEFAULT_RECURSIVE_TRIGGERS	sqliteInt.h	553;"	d
SQLITE_DEFAULT_SECTOR_SIZE	os.h	40;"	d
SQLITE_DEFAULT_SYNCHRONOUS	sqliteInt.h	1066;"	d
SQLITE_DEFAULT_SYNCHRONOUS	sqliteInt.h	1086;"	d
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT	sqliteLimit.h	118;"	d
SQLITE_DEFAULT_WAL_SYNCHRONOUS	sqliteInt.h	1089;"	d
SQLITE_DEFAULT_WORKER_THREADS	sqliteInt.h	578;"	d
SQLITE_DEMOVFS_BUFFERSZ	test_demovfs.c	135;"	d	file:
SQLITE_DYNAMIC	sqliteInt.h	951;"	d
SQLITE_DeferFKs	sqliteInt.h	1432;"	d
SQLITE_DistinctOpt	sqliteInt.h	1450;"	d
SQLITE_EBCDIC	sqliteInt.h	623;"	d
SQLITE_ECEL_DUP	sqliteInt.h	3690;"	d
SQLITE_ECEL_FACTOR	sqliteInt.h	3691;"	d
SQLITE_ECEL_REF	sqliteInt.h	3692;"	d
SQLITE_ENABLE_EXPLAIN_COMMENTS	sqliteInt.h	358;"	d
SQLITE_ENABLE_EXPLAIN_COMMENTS	sqliteInt.h	478;"	d
SQLITE_ENABLE_FTS3	sqliteInt.h	3351;"	d
SQLITE_ENABLE_FTS3	sqliteInt.h	3361;"	d
SQLITE_ENABLE_FTS4	sqliteInt.h	3352;"	d
SQLITE_ENABLE_LOCKING_STYLE	os_unix.c	68;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	os_unix.c	70;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	pragma.c	18;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	pragma.c	20;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	test1.c	5579;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	test_config.c	572;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	vxworks.h	24;"	d
SQLITE_ENABLE_MEMSYS3	sqliteInt.h	3457;"	d
SQLITE_ENABLE_STAT3	sqliteInt.h	880;"	d
SQLITE_ENABLE_STAT3_OR_STAT4	sqliteInt.h	881;"	d
SQLITE_ENABLE_STAT3_OR_STAT4	sqliteInt.h	883;"	d
SQLITE_ENABLE_STAT3_OR_STAT4	sqliteInt.h	885;"	d
SQLITE_EXTENSION_INIT1	sqlite3ext.h	548;"	d
SQLITE_EXTENSION_INIT1	sqlite3ext.h	555;"	d
SQLITE_EXTENSION_INIT2	sqlite3ext.h	549;"	d
SQLITE_EXTENSION_INIT2	sqlite3ext.h	556;"	d
SQLITE_EXTENSION_INIT3	sqlite3ext.h	550;"	d
SQLITE_EXTENSION_INIT3	sqlite3ext.h	557;"	d
SQLITE_EnableTrigger	sqliteInt.h	1431;"	d
SQLITE_FAULTINJECTOR_COUNT	sqliteInt.h	4130;"	d
SQLITE_FAULTINJECTOR_MALLOC	sqliteInt.h	4129;"	d
SQLITE_FCNTL_DB_UNCHANGED	os.h	174;"	d
SQLITE_FILE_HEADER	btreeInt.h	249;"	d
SQLITE_FREE	mem1.c	63;"	d	file:
SQLITE_FREE	mem1.c	75;"	d	file:
SQLITE_FSFLAGS_IS_MSDOS	os_unix.c	135;"	d	file:
SQLITE_FUNC_CASE	sqliteInt.h	1548;"	d
SQLITE_FUNC_COALESCE	sqliteInt.h	1554;"	d
SQLITE_FUNC_CONSTANT	sqliteInt.h	1556;"	d
SQLITE_FUNC_COUNT	sqliteInt.h	1553;"	d
SQLITE_FUNC_ENCMASK	sqliteInt.h	1546;"	d
SQLITE_FUNC_EPHEM	sqliteInt.h	1549;"	d
SQLITE_FUNC_HASH_SZ	sqliteInt.h	1209;"	d
SQLITE_FUNC_LENGTH	sqliteInt.h	1551;"	d
SQLITE_FUNC_LIKE	sqliteInt.h	1547;"	d
SQLITE_FUNC_MINMAX	sqliteInt.h	1557;"	d
SQLITE_FUNC_NEEDCOLL	sqliteInt.h	1550;"	d
SQLITE_FUNC_SLOCHNG	sqliteInt.h	1558;"	d
SQLITE_FUNC_TYPEOF	sqliteInt.h	1552;"	d
SQLITE_FUNC_UNLIKELY	sqliteInt.h	1555;"	d
SQLITE_FactorOutConst	sqliteInt.h	1448;"	d
SQLITE_ForeignKeys	sqliteInt.h	1426;"	d
SQLITE_Fts3Tokenizer	sqliteInt.h	1437;"	d
SQLITE_FullColNames	sqliteInt.h	1406;"	d
SQLITE_FullFSync	sqliteInt.h	1407;"	d
SQLITE_GroupByOrder	sqliteInt.h	1447;"	d
SQLITE_HASH_H	hash.h	16;"	d
SQLITE_HAVE_ISNAN	sqliteInt.h	520;"	d
SQLITE_HAVE_OS_TRACE	sqliteInt.h	455;"	d
SQLITE_HAVE_OS_TRACE	sqliteInt.h	458;"	d
SQLITE_HOMEGROWN_RECURSIVE_MUTEX	vxworks.h	22;"	d
SQLITE_HWTIME_H	hwtime.h	17;"	d
SQLITE_IDXTYPE_APPDEF	sqliteInt.h	2103;"	d
SQLITE_IDXTYPE_PRIMARYKEY	sqliteInt.h	2105;"	d
SQLITE_IDXTYPE_UNIQUE	sqliteInt.h	2104;"	d
SQLITE_INTARRAY_H	test_intarray.h	79;"	d
SQLITE_INTEGRITY_CHECK_ERROR_MAX	pragma.c	1394;"	d	file:
SQLITE_INT_TO_PTR	sqliteInt.h	206;"	d
SQLITE_INT_TO_PTR	sqliteInt.h	209;"	d
SQLITE_INT_TO_PTR	sqliteInt.h	212;"	d
SQLITE_INT_TO_PTR	sqliteInt.h	215;"	d
SQLITE_IOERR_NOMEM_BKPT	sqliteInt.h	3341;"	d
SQLITE_IOERR_NOMEM_BKPT	sqliteInt.h	3344;"	d
SQLITE_IgnoreChecks	sqliteInt.h	1420;"	d
SQLITE_InternChanges	sqliteInt.h	1405;"	d
SQLITE_JUMPIFNULL	sqliteInt.h	1736;"	d
SQLITE_LITTLEENDIAN	sqliteInt.h	776;"	d
SQLITE_LITTLEENDIAN	sqliteInt.h	783;"	d
SQLITE_LITTLEENDIAN	sqliteInt.h	794;"	d
SQLITE_LOCKFILEEX_FLAGS	os_win.c	3060;"	d	file:
SQLITE_LOCKFILE_FLAGS	os_win.c	3051;"	d	file:
SQLITE_LegacyFileFmt	sqliteInt.h	1422;"	d
SQLITE_LoadExtFunc	sqliteInt.h	1430;"	d
SQLITE_LoadExtension	sqliteInt.h	1429;"	d
SQLITE_MAGIC_BUSY	sqliteInt.h	1485;"	d
SQLITE_MAGIC_CLOSED	sqliteInt.h	1483;"	d
SQLITE_MAGIC_ERROR	sqliteInt.h	1486;"	d
SQLITE_MAGIC_OPEN	sqliteInt.h	1482;"	d
SQLITE_MAGIC_SICK	sqliteInt.h	1484;"	d
SQLITE_MAGIC_ZOMBIE	sqliteInt.h	1487;"	d
SQLITE_MALLOC	mem1.c	62;"	d	file:
SQLITE_MALLOC	mem1.c	74;"	d	file:
SQLITE_MALLOCSIZE	mem1.c	107;"	d	file:
SQLITE_MALLOCSIZE	mem1.c	111;"	d	file:
SQLITE_MALLOCSIZE	mem1.c	65;"	d	file:
SQLITE_MALLOC_SOFT_LIMIT	sqliteInt.h	323;"	d
SQLITE_MAX_ATTACHED	sqliteLimit.h	128;"	d
SQLITE_MAX_COLUMN	sqliteLimit.h	45;"	d
SQLITE_MAX_COMPOUND_SELECT	sqliteLimit.h	82;"	d
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqliteLimit.h	175;"	d
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqliteLimit.h	178;"	d
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqliteLimit.h	179;"	d
SQLITE_MAX_EXPR_DEPTH	sqliteLimit.h	70;"	d
SQLITE_MAX_FILE_FORMAT	sqliteInt.h	543;"	d
SQLITE_MAX_FUNCTION_ARG	sqliteLimit.h	97;"	d
SQLITE_MAX_LENGTH	sqliteLimit.h	24;"	d
SQLITE_MAX_LIKE_PATTERN_LENGTH	sqliteLimit.h	199;"	d
SQLITE_MAX_MMAP_SIZE	sqliteInt.h	836;"	d
SQLITE_MAX_MMAP_SIZE	sqliteInt.h	837;"	d
SQLITE_MAX_MMAP_SIZE	sqliteInt.h	853;"	d
SQLITE_MAX_MMAP_SIZE	sqliteInt.h	855;"	d
SQLITE_MAX_MMAP_SIZE_xc	sqliteInt.h	857;"	d
SQLITE_MAX_PAGE_COUNT	sqliteLimit.h	191;"	d
SQLITE_MAX_PAGE_SIZE	sqliteLimit.h	151;"	d
SQLITE_MAX_PAGE_SIZE	sqliteLimit.h	153;"	d
SQLITE_MAX_PMASZ	vdbesort.c	155;"	d	file:
SQLITE_MAX_SCHEMA_RETRY	vdbeInt.h	26;"	d
SQLITE_MAX_SQL_LENGTH	sqliteLimit.h	56;"	d
SQLITE_MAX_SYMLINKS	os_unix.c	168;"	d	file:
SQLITE_MAX_TRIGGER_DEPTH	sqliteLimit.h	210;"	d
SQLITE_MAX_U32	sqliteInt.h	687;"	d
SQLITE_MAX_VARIABLE_NUMBER	sqliteLimit.h	136;"	d
SQLITE_MAX_VDBE_OP	sqliteLimit.h	90;"	d
SQLITE_MAX_WORKER_THREADS	sqliteInt.h	571;"	d
SQLITE_MAX_WORKER_THREADS	sqliteInt.h	572;"	d
SQLITE_MAX_WORKER_THREADS	sqliteInt.h	575;"	d
SQLITE_MAX_WORKER_THREADS	sqliteInt.h	581;"	d
SQLITE_MAX_WORKER_THREADS	sqliteInt.h	582;"	d
SQLITE_MINIMUM_FILE_DESCRIPTOR	os_unix.c	608;"	d	file:
SQLITE_MISUSE_BKPT	sqliteInt.h	3335;"	d
SQLITE_MIXED_ENDIAN_64BIT_FLOAT	sqliteInt.h	519;"	d
SQLITE_MSVC_H	msvc.h	16;"	d
SQLITE_MULTIPLEX_CHUNK_SIZE	test_multiplex.c	103;"	d	file:
SQLITE_MULTIPLEX_JOURNAL_8_3_OFFSET	test_multiplex.c	88;"	d	file:
SQLITE_MULTIPLEX_MAX_CHUNKS	test_multiplex.c	113;"	d	file:
SQLITE_MULTIPLEX_VFS_NAME	test_multiplex.c	95;"	d	file:
SQLITE_MULTIPLEX_WAL_8_3_OFFSET	test_multiplex.c	89;"	d	file:
SQLITE_MUTEX_NOOP	mutex.h	49;"	d
SQLITE_MUTEX_NREF	mutex_unix.c	33;"	d	file:
SQLITE_MUTEX_NREF	mutex_unix.c	35;"	d	file:
SQLITE_MUTEX_OMIT	mutex.h	41;"	d
SQLITE_MUTEX_PTHREADS	mutex.h	45;"	d
SQLITE_MUTEX_W32	mutex.h	47;"	d
SQLITE_NEED_ERR_NAME	sqliteInt.h	469;"	d
SQLITE_NEED_ERR_NAME	sqliteInt.h	471;"	d
SQLITE_NOINLINE	sqliteInt.h	224;"	d
SQLITE_NOINLINE	sqliteInt.h	226;"	d
SQLITE_NOINLINE	sqliteInt.h	228;"	d
SQLITE_NOMEM_BKPT	sqliteInt.h	3340;"	d
SQLITE_NOMEM_BKPT	sqliteInt.h	3343;"	d
SQLITE_NOTNULL	sqliteInt.h	1739;"	d
SQLITE_NULLEQ	sqliteInt.h	1738;"	d
SQLITE_N_BTREE_META	btree.h	22;"	d
SQLITE_N_COLCACHE	sqliteInt.h	2810;"	d
SQLITE_N_LIMIT	sqliteInt.h	1165;"	d
SQLITE_NullCallback	sqliteInt.h	1414;"	d
SQLITE_OMIT_DATETIME_FUNCS	sqliteInt.h	517;"	d
SQLITE_OMIT_LOAD_EXTENSION	shell.c	31;"	d	file:
SQLITE_OMIT_LOAD_EXTENSION	vxworks.h	23;"	d
SQLITE_OMIT_POPEN	shell.c	122;"	d	file:
SQLITE_OMIT_TRACE	sqliteInt.h	518;"	d
SQLITE_OS_OTHER	os_setup.h	34;"	d
SQLITE_OS_OTHER	os_setup.h	38;"	d
SQLITE_OS_OTHER	vxworks.h	21;"	d
SQLITE_OS_SETUP_H	os_setup.h	17;"	d
SQLITE_OS_UNIX	os_setup.h	29;"	d
SQLITE_OS_UNIX	os_setup.h	30;"	d
SQLITE_OS_UNIX	os_setup.h	43;"	d
SQLITE_OS_UNIX	os_setup.h	46;"	d
SQLITE_OS_UNIX	os_setup.h	49;"	d
SQLITE_OS_WIN	os_setup.h	31;"	d
SQLITE_OS_WIN	os_setup.h	32;"	d
SQLITE_OS_WIN	os_setup.h	42;"	d
SQLITE_OS_WIN	os_setup.h	45;"	d
SQLITE_OS_WIN	os_setup.h	53;"	d
SQLITE_OS_WINCE	os_win.h	54;"	d
SQLITE_OS_WINCE	os_win.h	56;"	d
SQLITE_OS_WINNT	os_win.h	46;"	d
SQLITE_OS_WINRT	os_win.h	64;"	d
SQLITE_OS_WIN_H	os_win.h	16;"	d
SQLITE_OS_WIN_THREADS	os_win.h	83;"	d
SQLITE_OS_WIN_THREADS	os_win.h	85;"	d
SQLITE_OmitNoopJoin	sqliteInt.h	1455;"	d
SQLITE_OrderByIdxJoin	sqliteInt.h	1452;"	d
SQLITE_PAGER_H	pager.h	18;"	d
SQLITE_POWERSAFE_OVERWRITE	sqliteInt.h	273;"	d
SQLITE_PRINTF_INTERNAL	sqliteInt.h	3153;"	d
SQLITE_PRINTF_MALLOCED	sqliteInt.h	3155;"	d
SQLITE_PRINTF_SQLFUNC	sqliteInt.h	3154;"	d
SQLITE_PRINT_BUF_SIZE	printf.c	165;"	d	file:
SQLITE_PTRSIZE	sqliteInt.h	731;"	d
SQLITE_PTRSIZE	sqliteInt.h	734;"	d
SQLITE_PTRSIZE	sqliteInt.h	736;"	d
SQLITE_PTR_TO_INT	sqliteInt.h	207;"	d
SQLITE_PTR_TO_INT	sqliteInt.h	210;"	d
SQLITE_PTR_TO_INT	sqliteInt.h	213;"	d
SQLITE_PTR_TO_INT	sqliteInt.h	216;"	d
SQLITE_PreferBuiltin	sqliteInt.h	1428;"	d
SQLITE_QueryFlattener	sqliteInt.h	1445;"	d
SQLITE_QueryOnly	sqliteInt.h	1433;"	d
SQLITE_REALLOC	mem1.c	64;"	d	file:
SQLITE_REALLOC	mem1.c	76;"	d	file:
SQLITE_ReadUncommitted	sqliteInt.h	1421;"	d
SQLITE_RecTriggers	sqliteInt.h	1425;"	d
SQLITE_RecoveryMode	sqliteInt.h	1423;"	d
SQLITE_ReverseOrder	sqliteInt.h	1424;"	d
SQLITE_SHELL_IS_UTF8	shell.c	5209;"	d	file:
SQLITE_SHELL_IS_UTF8	shell.c	5211;"	d	file:
SQLITE_SKIP_UTF8	sqliteInt.h	3318;"	d
SQLITE_SORTER_PMASZ	global.c	160;"	d	file:
SQLITE_SO_ASC	sqliteInt.h	1695;"	d
SQLITE_SO_DESC	sqliteInt.h	1696;"	d
SQLITE_SO_UNDEFINED	sqliteInt.h	1697;"	d
SQLITE_STAT4_SAMPLES	analyze.c	154;"	d	file:
SQLITE_STAT4_SAMPLES	analyze.c	155;"	d	file:
SQLITE_STAT4_SAMPLES	analyze.c	257;"	d	file:
SQLITE_STMTJRNL_SPILL	global.c	172;"	d	file:
SQLITE_STOREP2	sqliteInt.h	1737;"	d
SQLITE_SYNC_MASK	wal.h	26;"	d
SQLITE_SYSTEM_MALLOC	sqliteInt.h	315;"	d
SQLITE_ShortColNames	sqliteInt.h	1410;"	d
SQLITE_SqlTrace	sqliteInt.h	1416;"	d
SQLITE_Stat34	sqliteInt.h	1456;"	d
SQLITE_SubqCoroutine	sqliteInt.h	1453;"	d
SQLITE_TCLAPI	sqliteInt.h	50;"	d
SQLITE_TCLAPI	tclsqlite.c	41;"	d	file:
SQLITE_TCLAPI	test_async.c	23;"	d	file:
SQLITE_TCLAPI	test_autoext.c	19;"	d	file:
SQLITE_TCLAPI	test_backup.c	21;"	d	file:
SQLITE_TCLAPI	test_demovfs.c	649;"	d	file:
SQLITE_TCLAPI	test_intarray.c	278;"	d	file:
SQLITE_TCLAPI	test_multiplex.c	1237;"	d	file:
SQLITE_TCLAPI	test_osinst.c	1112;"	d	file:
SQLITE_TCLAPI	test_quota.c	1286;"	d	file:
SQLITE_TCLAPI	test_superlock.c	264;"	d	file:
SQLITE_TCL_NRE	tclsqlite.c	1673;"	d	file:
SQLITE_TCL_NRE	tclsqlite.c	1689;"	d	file:
SQLITE_TEMP_FILE_PREFIX	os.h	65;"	d
SQLITE_TEMP_STORE	sqliteInt.h	561;"	d
SQLITE_TEMP_STORE_xc	sqliteInt.h	562;"	d
SQLITE_TEST_MULTIPLEX_H	test_multiplex.h	24;"	d
SQLITE_THREADSAFE	sqliteInt.h	262;"	d
SQLITE_THREADSAFE	sqliteInt.h	264;"	d
SQLITE_THREADS_IMPLEMENTED	threads.c	110;"	d	file:
SQLITE_THREADS_IMPLEMENTED	threads.c	38;"	d	file:
SQLITE_TRACE_LEGACY	sqliteInt.h	1256;"	d
SQLITE_TRACE_LEGACY	sqliteInt.h	1258;"	d
SQLITE_Transitive	sqliteInt.h	1454;"	d
SQLITE_UNIX_THREADS	os_unix.c	143;"	d	file:
SQLITE_USE_MALLOC_H	mem1.c	83;"	d	file:
SQLITE_USE_MALLOC_H	mem1.c	92;"	d	file:
SQLITE_USE_MALLOC_USABLE_SIZE	mem1.c	84;"	d	file:
SQLITE_USE_MSIZE	mem1.c	93;"	d	file:
SQLITE_USE_URI	global.c	145;"	d	file:
SQLITE_UTF16NATIVE	sqliteInt.h	777;"	d
SQLITE_UTF16NATIVE	sqliteInt.h	784;"	d
SQLITE_UTF16NATIVE	sqliteInt.h	795;"	d
SQLITE_VDBEINT_H	vdbeInt.h	19;"	d
SQLITE_VDBE_H	vdbe.h	19;"	d
SQLITE_Vacuum	sqliteInt.h	1435;"	d
SQLITE_VdbeAddopTrace	sqliteInt.h	1419;"	d
SQLITE_VdbeEQP	sqliteInt.h	1434;"	d
SQLITE_VdbeListing	sqliteInt.h	1417;"	d
SQLITE_VdbeTrace	sqliteInt.h	1404;"	d
SQLITE_W32_MUTEX_INITIALIZER	mutex_w32.c	52;"	d	file:
SQLITE_WAL_H	wal.h	18;"	d
SQLITE_WIN32_CACHE_SIZE	os_win.c	364;"	d	file:
SQLITE_WIN32_CACHE_SIZE	os_win.c	366;"	d	file:
SQLITE_WIN32_CREATEFILEMAPPINGA	os_win.c	102;"	d	file:
SQLITE_WIN32_CREATEFILEMAPPINGA	os_win.c	104;"	d	file:
SQLITE_WIN32_DATA_DIRECTORY_TYPE	os_win.c	323;"	d	file:
SQLITE_WIN32_DBG_BUF_SIZE	os_win.c	315;"	d	file:
SQLITE_WIN32_GETVERSIONEX	os_win.c	89;"	d	file:
SQLITE_WIN32_GETVERSIONEX	os_win.c	91;"	d	file:
SQLITE_WIN32_HAS_ANSI	os_win.c	47;"	d	file:
SQLITE_WIN32_HAS_WIDE	os_win.c	56;"	d	file:
SQLITE_WIN32_HEAP_CREATE	os_win.c	355;"	d	file:
SQLITE_WIN32_HEAP_FLAGS	os_win.c	390;"	d	file:
SQLITE_WIN32_HEAP_INIT_SIZE	os_win.c	374;"	d	file:
SQLITE_WIN32_HEAP_MAX_SIZE	os_win.c	382;"	d	file:
SQLITE_WIN32_IOERR_RETRY	os_win.c	2055;"	d	file:
SQLITE_WIN32_IOERR_RETRY_DELAY	os_win.c	2058;"	d	file:
SQLITE_WIN32_MAX_ERRMSG_CHARS	os_win.c	160;"	d	file:
SQLITE_WIN32_MAX_PATH_BYTES	os_win.c	144;"	d	file:
SQLITE_WIN32_MAX_PATH_CHARS	os_win.c	120;"	d	file:
SQLITE_WIN32_TEMP_DIRECTORY_TYPE	os_win.c	331;"	d	file:
SQLITE_WIN32_VOLATILE	os_win.h	72;"	d
SQLITE_WIN32_VOLATILE	os_win.h	74;"	d
SQLITE_WINNT_MAX_PATH_BYTES	os_win.c	152;"	d	file:
SQLITE_WINNT_MAX_PATH_CHARS	os_win.c	135;"	d	file:
SQLITE_WITHIN	sqliteInt.h	758;"	d
SQLITE_WSD	sqliteInt.h	968;"	d
SQLITE_WSD	sqliteInt.h	974;"	d
SQLITE_WriteSchema	sqliteInt.h	1418;"	d
SQLLOG_NAMESZ	test_sqllog.c	100;"	d	file:
SQLiteThread	sqliteInt.h	/^typedef struct SQLiteThread SQLiteThread;$/;"	t	typeref:struct:SQLiteThread
SQLiteThread	threads.c	/^struct SQLiteThread {$/;"	s	file:
SRT_Coroutine	sqliteInt.h	2774;"	d
SRT_Discard	sqliteInt.h	2761;"	d
SRT_DistFifo	sqliteInt.h	2763;"	d
SRT_DistQueue	sqliteInt.h	2765;"	d
SRT_EphemTab	sqliteInt.h	2773;"	d
SRT_Except	sqliteInt.h	2759;"	d
SRT_Exists	sqliteInt.h	2760;"	d
SRT_Fifo	sqliteInt.h	2762;"	d
SRT_Mem	sqliteInt.h	2771;"	d
SRT_Output	sqliteInt.h	2770;"	d
SRT_Queue	sqliteInt.h	2764;"	d
SRT_Set	sqliteInt.h	2772;"	d
SRT_Table	sqliteInt.h	2775;"	d
SRT_Union	sqliteInt.h	2758;"	d
SRVAL	vdbesort.c	456;"	d	file:
STATIC_MUTEXES	test_mutex.c	27;"	d	file:
STAT_GET_NDLT	analyze.c	790;"	d	file:
STAT_GET_NEQ	analyze.c	788;"	d	file:
STAT_GET_NLT	analyze.c	789;"	d	file:
STAT_GET_ROWID	analyze.c	787;"	d	file:
STAT_GET_STAT1	analyze.c	786;"	d	file:
STRACCUM_NOMEM	sqliteInt.h	3151;"	d
STRACCUM_TOOBIG	sqliteInt.h	3152;"	d
STRINGVALUE	test_config.c	40;"	d	file:
STRINGVALUE2	test_config.c	39;"	d	file:
STR_FUNCTION	sqliteInt.h	1607;"	d
SWAP	sqliteInt.h	616;"	d
SYSCALL	os_win.c	467;"	d	file:
S_ISREG	test_fs.c	90;"	d	file:
SavedModeInfo	shell.c	/^struct SavedModeInfo {$/;"	s	file:
SavedModeInfo	shell.c	/^typedef struct SavedModeInfo SavedModeInfo;$/;"	t	typeref:struct:SavedModeInfo	file:
Savepoint	sqliteInt.h	/^struct Savepoint {$/;"	s
Savepoint	sqliteInt.h	/^typedef struct Savepoint Savepoint;$/;"	t	typeref:struct:Savepoint
ScanStatus	vdbeInt.h	/^struct ScanStatus {$/;"	s
ScanStatus	vdbeInt.h	/^typedef struct ScanStatus ScanStatus;$/;"	t	typeref:struct:ScanStatus
Schema	sqliteInt.h	/^struct Schema {$/;"	s
Schema	sqliteInt.h	/^typedef struct Schema Schema;$/;"	t	typeref:struct:Schema
ScratchFreeslot	malloc.c	/^typedef struct ScratchFreeslot {$/;"	s	file:
ScratchFreeslot	malloc.c	/^} ScratchFreeslot;$/;"	t	typeref:struct:ScratchFreeslot	file:
Select	sqliteInt.h	/^struct Select {$/;"	s
Select	sqliteInt.h	/^typedef struct Select Select;$/;"	t	typeref:struct:Select
SelectDest	sqliteInt.h	/^struct SelectDest {$/;"	s
SelectDest	sqliteInt.h	/^typedef struct SelectDest SelectDest;$/;"	t	typeref:struct:SelectDest
ServerState	test_server.c	/^static struct ServerState {$/;"	s	file:
ShellState	shell.c	/^struct ShellState {$/;"	s	file:
ShellState	shell.c	/^typedef struct ShellState ShellState;$/;"	t	typeref:struct:ShellState	file:
ShmRegion	os_win.c	/^  struct ShmRegion {$/;"	s	struct:winShmNode	file:
SimulateDiskfullError	os_common.h	78;"	d
SimulateDiskfullError	os_common.h	92;"	d
SimulateIOError	os_common.h	69;"	d
SimulateIOError	os_common.h	91;"	d
SimulateIOErrorBenign	os_common.h	68;"	d
SimulateIOErrorBenign	os_common.h	90;"	d
SortCtx	select.c	/^struct SortCtx {$/;"	s	file:
SortCtx	select.c	/^typedef struct SortCtx SortCtx;$/;"	t	typeref:struct:SortCtx	file:
SortSubtask	vdbesort.c	/^struct SortSubtask {$/;"	s	file:
SortSubtask	vdbesort.c	/^typedef struct SortSubtask SortSubtask;     \/* A sub-task in the sort process *\/$/;"	t	typeref:struct:SortSubtask	file:
SorterCompare	vdbesort.c	/^typedef int (*SorterCompare)(SortSubtask*,int*,const void*,int,const void*,int);$/;"	t	file:
SorterFile	vdbesort.c	/^struct SorterFile {$/;"	s	file:
SorterFile	vdbesort.c	/^typedef struct SorterFile SorterFile;       \/* Temporary file object wrapper *\/$/;"	t	typeref:struct:SorterFile	file:
SorterList	vdbesort.c	/^struct SorterList {$/;"	s	file:
SorterList	vdbesort.c	/^typedef struct SorterList SorterList;       \/* In-memory list of records *\/$/;"	t	typeref:struct:SorterList	file:
SorterRecord	vdbesort.c	/^struct SorterRecord {$/;"	s	file:
SorterRecord	vdbesort.c	/^typedef struct SorterRecord SorterRecord;   \/* A record being sorted *\/$/;"	t	typeref:struct:SorterRecord	file:
SqlCollate	tclsqlite.c	/^struct SqlCollate {$/;"	s	file:
SqlCollate	tclsqlite.c	/^typedef struct SqlCollate SqlCollate;$/;"	t	typeref:struct:SqlCollate	file:
SqlFunc	tclsqlite.c	/^struct SqlFunc {$/;"	s	file:
SqlFunc	tclsqlite.c	/^typedef struct SqlFunc SqlFunc;$/;"	t	typeref:struct:SqlFunc	file:
SqlMessage	test_server.c	/^struct SqlMessage {$/;"	s	file:
SqlMessage	test_server.c	/^typedef struct SqlMessage SqlMessage;$/;"	t	typeref:struct:SqlMessage	file:
SqlPreparedStmt	tclsqlite.c	/^struct SqlPreparedStmt {$/;"	s	file:
SqlPreparedStmt	tclsqlite.c	/^typedef struct SqlPreparedStmt SqlPreparedStmt;$/;"	t	typeref:struct:SqlPreparedStmt	file:
SqlThread	test_thread.c	/^struct SqlThread {$/;"	s	file:
SqlThread	test_thread.c	/^typedef struct SqlThread SqlThread;$/;"	t	typeref:struct:SqlThread	file:
Sqlite3Config	sqliteInt.h	/^struct Sqlite3Config {$/;"	s
Sqlite3_Init	tclsqlite.c	/^EXTERN int Sqlite3_Init(Tcl_Interp *interp){$/;"	f
Sqlite3_SafeInit	tclsqlite.c	/^EXTERN int Sqlite3_SafeInit(Tcl_Interp *interp){ return TCL_ERROR; }$/;"	f
Sqlite3_SafeUnload	tclsqlite.c	/^EXTERN int Sqlite3_SafeUnload(Tcl_Interp *interp, int flags){return TCL_ERROR;}$/;"	f
Sqlite3_Unload	tclsqlite.c	/^EXTERN int Sqlite3_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }$/;"	f
SqliteDb	tclsqlite.c	/^struct SqliteDb {$/;"	s	file:
SqliteDb	tclsqlite.c	/^typedef struct SqliteDb SqliteDb;$/;"	t	typeref:struct:SqliteDb	file:
SqliteDb	test1.c	/^struct SqliteDb {$/;"	s	file:
SqliteSuperlock_Init	test_superlock.c	/^int SqliteSuperlock_Init(Tcl_Interp *interp){$/;"	f
Sqlite_Init	tclsqlite.c	/^int Sqlite_Init(Tcl_Interp *interp){ return Sqlite3_Init(interp); }$/;"	f
Sqlite_Unload	tclsqlite.c	/^int Sqlite_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }$/;"	f
Sqliteconfig_Init	test_config.c	/^int Sqliteconfig_Init(Tcl_Interp *interp){$/;"	f
Sqlitemultiplex_Init	test_multiplex.c	/^int Sqlitemultiplex_Init(Tcl_Interp *interp){$/;"	f
Sqlitequota_Init	test_quota.c	/^int Sqlitequota_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest1_Init	test1.c	/^int Sqlitetest1_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest2_Init	test2.c	/^int Sqlitetest2_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest3_Init	test3.c	/^int Sqlitetest3_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest4_Init	test4.c	/^int Sqlitetest4_Init(Tcl_Interp *interp){ return TCL_OK; }$/;"	f
Sqlitetest4_Init	test4.c	/^int Sqlitetest4_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest5_Init	test5.c	/^int Sqlitetest5_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest6_Init	test6.c	/^int Sqlitetest6_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest7_Init	test7.c	/^int Sqlitetest7_Init(Tcl_Interp *interp){ return TCL_OK; }$/;"	f
Sqlitetest7_Init	test7.c	/^int Sqlitetest7_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest8_Init	test8.c	/^int Sqlitetest8_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest9_Init	test9.c	/^int Sqlitetest9_Init(Tcl_Interp *interp){$/;"	f
SqlitetestOnefile_Init	test_onefile.c	/^  int SqlitetestOnefile_Init() {return fs_register();}$/;"	f
SqlitetestOsinst_Init	test_osinst.c	/^int SqlitetestOsinst_Init(Tcl_Interp *interp){$/;"	f
SqlitetestSyscall_Init	test_syscall.c	/^int SqlitetestSyscall_Init(Tcl_Interp *interp){$/;"	f
SqlitetestThread_Init	test_thread.c	/^int SqlitetestThread_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest_autoext_Init	test_autoext.c	/^int Sqlitetest_autoext_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest_blob_Init	test_blob.c	/^int Sqlitetest_blob_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest_demovfs_Init	test_demovfs.c	/^int Sqlitetest_demovfs_Init(Tcl_Interp *interp){ return TCL_OK; }$/;"	f
Sqlitetest_demovfs_Init	test_demovfs.c	/^int Sqlitetest_demovfs_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest_func_Init	test_func.c	/^int Sqlitetest_func_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest_hexio_Init	test_hexio.c	/^int Sqlitetest_hexio_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest_init_Init	test_init.c	/^int Sqlitetest_init_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest_malloc_Init	test_malloc.c	/^int Sqlitetest_malloc_Init(Tcl_Interp *interp){$/;"	f
Sqlitetest_mutex_Init	test_mutex.c	/^int Sqlitetest_mutex_Init(Tcl_Interp *interp){$/;"	f
Sqlitetestasync_Init	test_async.c	/^int Sqlitetestasync_Init(Tcl_Interp *interp){$/;"	f
Sqlitetestbackup_Init	test_backup.c	/^int Sqlitetestbackup_Init(Tcl_Interp *interp){$/;"	f
Sqlitetestfs_Init	test_fs.c	/^int Sqlitetestfs_Init(Tcl_Interp *interp){$/;"	f
Sqlitetestintarray_Init	test_intarray.c	/^int Sqlitetestintarray_Init(Tcl_Interp *interp){$/;"	f
Sqlitetestrtree_Init	test_rtree.c	/^int Sqlitetestrtree_Init(Tcl_Interp *interp){$/;"	f
Sqlitetestschema_Init	test_schema.c	/^int Sqlitetestschema_Init(Tcl_Interp *interp){$/;"	f
Sqlitetesttcl_Init	test_bestindex.c	/^int Sqlitetesttcl_Init(Tcl_Interp *interp){$/;"	f
Sqlitetesttclvar_Init	test_tclvar.c	/^int Sqlitetesttclvar_Init(Tcl_Interp *interp){$/;"	f
Sqlitetestvfs_Init	test_vfs.c	/^int Sqlitetestvfs_Init(Tcl_Interp *interp){$/;"	f
SrcCount	expr.c	/^struct SrcCount {$/;"	s	file:
SrcList	sqliteInt.h	/^struct SrcList {$/;"	s
SrcList	sqliteInt.h	/^typedef struct SrcList SrcList;$/;"	t	typeref:struct:SrcList
SrcList_item	sqliteInt.h	/^  struct SrcList_item {$/;"	s	struct:SrcList
Stat4Accum	analyze.c	/^struct Stat4Accum {$/;"	s	file:
Stat4Accum	analyze.c	/^typedef struct Stat4Accum Stat4Accum;$/;"	t	typeref:struct:Stat4Accum	file:
Stat4Sample	analyze.c	/^struct Stat4Sample {$/;"	s	file:
Stat4Sample	analyze.c	/^typedef struct Stat4Sample Stat4Sample;$/;"	t	typeref:struct:Stat4Sample	file:
StatCell	dbstat.c	/^struct StatCell {$/;"	s	file:
StatCell	dbstat.c	/^typedef struct StatCell StatCell;$/;"	t	typeref:struct:StatCell	file:
StatCursor	dbstat.c	/^struct StatCursor {$/;"	s	file:
StatCursor	dbstat.c	/^typedef struct StatCursor StatCursor;$/;"	t	typeref:struct:StatCursor	file:
StatPage	dbstat.c	/^struct StatPage {$/;"	s	file:
StatPage	dbstat.c	/^typedef struct StatPage StatPage;$/;"	t	typeref:struct:StatPage	file:
StatTable	dbstat.c	/^struct StatTable {$/;"	s	file:
StatTable	dbstat.c	/^typedef struct StatTable StatTable;$/;"	t	typeref:struct:StatTable	file:
StmtToDb	test1.c	138;"	d	file:
StrAccum	sqliteInt.h	/^struct StrAccum {$/;"	s
StrAccum	sqliteInt.h	/^typedef struct StrAccum StrAccum;$/;"	t	typeref:struct:StrAccum
Stringify	vdbe.c	158;"	d	file:
SubProgram	vdbe.h	/^struct SubProgram {$/;"	s
SubProgram	vdbe.h	/^typedef struct SubProgram SubProgram;$/;"	t	typeref:struct:SubProgram
SumCtx	func.c	/^struct SumCtx {$/;"	s	file:
SumCtx	func.c	/^typedef struct SumCtx SumCtx;$/;"	t	typeref:struct:SumCtx	file:
Superlock	test_superlock.c	/^struct Superlock {$/;"	s	file:
Superlock	test_superlock.c	/^typedef struct Superlock Superlock;$/;"	t	typeref:struct:Superlock	file:
SuperlockBusy	test_superlock.c	/^struct SuperlockBusy {$/;"	s	file:
SuperlockBusy	test_superlock.c	/^typedef struct SuperlockBusy SuperlockBusy;$/;"	t	typeref:struct:SuperlockBusy	file:
TCLSH_MAIN	tclsqlite.c	/^int SQLITE_CDECL TCLSH_MAIN(int argc, char **argv){$/;"	f
TCLSH_MAIN	tclsqlite.c	4210;"	d	file:
TCLVAR_NAME_EQ	test_tclvar.c	33;"	d	file:
TCLVAR_NAME_MATCH	test_tclvar.c	34;"	d	file:
TCLVAR_VALUE_GLOB	test_tclvar.c	35;"	d	file:
TCLVAR_VALUE_LIKE	test_tclvar.c	37;"	d	file:
TCLVAR_VALUE_REGEXP	test_tclvar.c	36;"	d	file:
TCL_STORAGE_CLASS	tclsqlite.c	76;"	d	file:
TCL_STORAGE_CLASS	tclsqlite.c	77;"	d	file:
TCL_THREADS	test_async.c	17;"	d	file:
TEMP_MASTER_NAME	sqliteInt.h	920;"	d
TERM_ANDINFO	whereInt.h	272;"	d
TERM_CODED	whereInt.h	269;"	d
TERM_COPIED	whereInt.h	270;"	d
TERM_DYNAMIC	whereInt.h	267;"	d
TERM_IS	whereInt.h	282;"	d
TERM_LIKE	whereInt.h	281;"	d
TERM_LIKECOND	whereInt.h	280;"	d
TERM_LIKEOPT	whereInt.h	279;"	d
TERM_ORINFO	whereInt.h	271;"	d
TERM_OR_OK	whereInt.h	273;"	d
TERM_VIRTUAL	whereInt.h	268;"	d
TERM_VNULL	whereInt.h	275;"	d
TERM_VNULL	whereInt.h	277;"	d
TESTBIT	bitvec.c	305;"	d	file:
TESTONLY	sqliteInt.h	388;"	d
TESTONLY	sqliteInt.h	390;"	d
TESTPCACHE_CLEAR	test_pcache.c	95;"	d	file:
TESTPCACHE_NPAGE	test_pcache.c	85;"	d	file:
TESTPCACHE_NPAGE	test_pcache.c	87;"	d	file:
TESTPCACHE_RESERVE	test_pcache.c	89;"	d	file:
TESTPCACHE_VALID	test_pcache.c	94;"	d	file:
TESTVFS_ACCESS_MASK	test_vfs.c	130;"	d	file:
TESTVFS_ALL_MASK	test_vfs.c	137;"	d	file:
TESTVFS_CKLOCK_MASK	test_vfs.c	135;"	d	file:
TESTVFS_CLOSE_MASK	test_vfs.c	127;"	d	file:
TESTVFS_DELETE_MASK	test_vfs.c	126;"	d	file:
TESTVFS_FULLPATHNAME_MASK	test_vfs.c	131;"	d	file:
TESTVFS_LOCK_MASK	test_vfs.c	134;"	d	file:
TESTVFS_MAX_ARGS	test_vfs.c	158;"	d	file:
TESTVFS_MAX_PAGES	test_vfs.c	140;"	d	file:
TESTVFS_OPEN_MASK	test_vfs.c	124;"	d	file:
TESTVFS_READ_MASK	test_vfs.c	132;"	d	file:
TESTVFS_SHMBARRIER_MASK	test_vfs.c	121;"	d	file:
TESTVFS_SHMCLOSE_MASK	test_vfs.c	122;"	d	file:
TESTVFS_SHMLOCK_MASK	test_vfs.c	119;"	d	file:
TESTVFS_SHMMAP_MASK	test_vfs.c	120;"	d	file:
TESTVFS_SHMOPEN_MASK	test_vfs.c	118;"	d	file:
TESTVFS_SYNC_MASK	test_vfs.c	125;"	d	file:
TESTVFS_TRUNCATE_MASK	test_vfs.c	129;"	d	file:
TESTVFS_UNLOCK_MASK	test_vfs.c	133;"	d	file:
TESTVFS_WRITE_MASK	test_vfs.c	128;"	d	file:
TF_Autoincrement	sqliteInt.h	1842;"	d
TF_Ephemeral	sqliteInt.h	1840;"	d
TF_HasPrimaryKey	sqliteInt.h	1841;"	d
TF_NoVisibleRowid	sqliteInt.h	1845;"	d
TF_OOOHidden	sqliteInt.h	1846;"	d
TF_Readonly	sqliteInt.h	1839;"	d
TF_Virtual	sqliteInt.h	1843;"	d
TF_WithoutRowid	sqliteInt.h	1844;"	d
THREE_BYTE_INT	vdbeaux.c	3311;"	d	file:
TIMER_ELAPSED	os_common.h	48;"	d
TIMER_ELAPSED	os_common.h	52;"	d
TIMER_END	os_common.h	47;"	d
TIMER_END	os_common.h	51;"	d
TIMER_START	os_common.h	46;"	d
TIMER_START	os_common.h	50;"	d
TRACE	btree.c	30;"	d	file:
TRACE	btree.c	32;"	d	file:
TRACE_IDX_INPUTS	where.c	/^static void TRACE_IDX_INPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_INPUTS	where.c	585;"	d	file:
TRACE_IDX_OUTPUTS	where.c	/^static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_OUTPUTS	where.c	586;"	d	file:
TRANS_NONE	btreeInt.h	374;"	d
TRANS_READ	btreeInt.h	375;"	d
TRANS_WRITE	btreeInt.h	376;"	d
TRIGGER_AFTER	sqliteInt.h	3069;"	d
TRIGGER_BEFORE	sqliteInt.h	3068;"	d
TWOPOWER31	util.c	1309;"	d	file:
TWOPOWER32	util.c	1308;"	d	file:
TWO_BYTE_INT	vdbeaux.c	3310;"	d	file:
TabResult	table.c	/^typedef struct TabResult {$/;"	s	file:
TabResult	table.c	/^} TabResult;$/;"	t	typeref:struct:TabResult	file:
Table	sqliteInt.h	/^struct Table {$/;"	s
Table	sqliteInt.h	/^typedef struct Table Table;$/;"	t	typeref:struct:Table
TableLock	build.c	/^struct TableLock {$/;"	s	file:
TableLock	sqliteInt.h	/^typedef struct TableLock TableLock;$/;"	t	typeref:struct:TableLock
TclQuotaCallback	test_quota.c	/^struct TclQuotaCallback {$/;"	s	file:
TclQuotaCallback	test_quota.c	/^typedef struct TclQuotaCallback TclQuotaCallback;$/;"	t	typeref:struct:TclQuotaCallback	file:
Tcl_InitStubs	tclsqlite.c	3451;"	d	file:
Tcl_InitStubs	tclsqlite.c	3452;"	d	file:
Tcl_NRAddCallback	tclsqlite.c	1691;"	d	file:
Tcl_NRCreateCommand	tclsqlite.c	1693;"	d	file:
Tcl_NREvalObj	tclsqlite.c	1692;"	d	file:
Tclsqlite3_Init	tclsqlite.c	/^EXTERN int Tclsqlite3_Init(Tcl_Interp *interp){ return Sqlite3_Init(interp); }$/;"	f
Tclsqlite3_Unload	tclsqlite.c	/^EXTERN int Tclsqlite3_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }$/;"	f
Tclsqlite_Init	tclsqlite.c	/^int Tclsqlite_Init(Tcl_Interp *interp){ return Sqlite3_Init(interp); }$/;"	f
Tclsqlite_Unload	tclsqlite.c	/^int Tclsqlite_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }$/;"	f
TestAsyncGlobal	test_async.c	/^struct TestAsyncGlobal {$/;"	s	file:
TestCollationX	test1.c	/^struct TestCollationX {$/;"	s	file:
TestCollationX	test1.c	/^typedef struct TestCollationX TestCollationX;$/;"	t	typeref:struct:TestCollationX	file:
TestFaultInject	test_vfs.c	/^struct TestFaultInject {$/;"	s	file:
TestFaultInject	test_vfs.c	/^typedef struct TestFaultInject TestFaultInject;$/;"	t	typeref:struct:TestFaultInject	file:
TestSyscallArray	test_syscall.c	/^struct TestSyscallArray {$/;"	s	file:
TestSyscallGlobal	test_syscall.c	/^static struct TestSyscallGlobal {$/;"	s	file:
Testvfs	test_vfs.c	/^struct Testvfs {$/;"	s	file:
Testvfs	test_vfs.c	/^typedef struct Testvfs Testvfs;$/;"	t	typeref:struct:Testvfs	file:
TestvfsBuffer	test_vfs.c	/^struct TestvfsBuffer {$/;"	s	file:
TestvfsBuffer	test_vfs.c	/^typedef struct TestvfsBuffer TestvfsBuffer;$/;"	t	typeref:struct:TestvfsBuffer	file:
TestvfsFd	test_vfs.c	/^struct TestvfsFd {$/;"	s	file:
TestvfsFd	test_vfs.c	/^typedef struct TestvfsFd TestvfsFd;$/;"	t	typeref:struct:TestvfsFd	file:
TestvfsFile	test_vfs.c	/^struct TestvfsFile {$/;"	s	file:
TestvfsFile	test_vfs.c	/^typedef struct TestvfsFile TestvfsFile;$/;"	t	typeref:struct:TestvfsFile	file:
TestvfsShm	test_vfs.c	/^typedef struct TestvfsShm TestvfsShm;$/;"	t	typeref:struct:TestvfsShm	file:
Thread	test4.c	/^struct Thread {$/;"	s	file:
Thread	test4.c	/^typedef struct Thread Thread;$/;"	t	typeref:struct:Thread	file:
Thread	test7.c	/^struct Thread {$/;"	s	file:
Thread	test7.c	/^typedef struct Thread Thread;$/;"	t	typeref:struct:Thread	file:
ToLower	shell.c	137;"	d	file:
Token	sqliteInt.h	/^struct Token {$/;"	s
Token	sqliteInt.h	/^typedef struct Token Token;$/;"	t	typeref:struct:Token
TreeView	sqliteInt.h	/^struct TreeView {$/;"	s
TreeView	sqliteInt.h	/^typedef struct TreeView TreeView;$/;"	t	typeref:struct:TreeView
Trigger	sqliteInt.h	/^struct Trigger {$/;"	s
Trigger	sqliteInt.h	/^typedef struct Trigger Trigger;$/;"	t	typeref:struct:Trigger
TriggerPrg	sqliteInt.h	/^struct TriggerPrg {$/;"	s
TriggerPrg	sqliteInt.h	/^typedef struct TriggerPrg TriggerPrg;$/;"	t	typeref:struct:TriggerPrg
TriggerStep	sqliteInt.h	/^struct TriggerStep {$/;"	s
TriggerStep	sqliteInt.h	/^typedef struct TriggerStep TriggerStep;$/;"	t	typeref:struct:TriggerStep
UAUTH_Admin	sqliteInt.h	1231;"	d
UAUTH_Fail	sqliteInt.h	1229;"	d
UAUTH_Unknown	sqliteInt.h	1228;"	d
UAUTH_User	sqliteInt.h	1230;"	d
UINT16_TYPE	sqliteInt.h	644;"	d
UINT16_TYPE	sqliteInt.h	646;"	d
UINT32_TYPE	sqliteInt.h	637;"	d
UINT32_TYPE	sqliteInt.h	639;"	d
UINT8_TYPE	sqliteInt.h	658;"	d
UINT8_TYPE	sqliteInt.h	660;"	d
UNICODE_STRING_MAX_CHARS	os_win.c	127;"	d	file:
UNIXFILE_DELETE	os_unix.c	276;"	d	file:
UNIXFILE_DIRSYNC	os_unix.c	271;"	d	file:
UNIXFILE_DIRSYNC	os_unix.c	273;"	d	file:
UNIXFILE_EXCL	os_unix.c	267;"	d	file:
UNIXFILE_NOLOCK	os_unix.c	278;"	d	file:
UNIXFILE_PERSIST_WAL	os_unix.c	269;"	d	file:
UNIXFILE_PSOW	os_unix.c	275;"	d	file:
UNIXFILE_RDONLY	os_unix.c	268;"	d	file:
UNIXFILE_URI	os_unix.c	277;"	d	file:
UNIXVFS	os_unix.c	7508;"	d	file:
UNIX_SHM_BASE	os_unix.c	4071;"	d	file:
UNIX_SHM_DMS	os_unix.c	4072;"	d	file:
UNKNOWN_LOCK	pager.c	407;"	d	file:
UNUSED_PARAMETER	shell.c	325;"	d	file:
UNUSED_PARAMETER	sqliteInt.h	995;"	d
UNUSED_PARAMETER	test_multiplex.c	67;"	d	file:
UNUSED_PARAMETER2	sqliteInt.h	996;"	d
UNUSED_VARIABLE_VALUE	os_win.c	176;"	d	file:
UPDATE_MAX_BLOBSIZE	vdbe.c	115;"	d	file:
UPDATE_MAX_BLOBSIZE	vdbe.c	117;"	d	file:
USEFETCH	pager.c	791;"	d	file:
USEFETCH	pager.c	793;"	d	file:
USE_PREAD	os_unix.c	80;"	d	file:
USE_PREAD	os_unix.c	84;"	d	file:
USE_PREAD64	os_unix.c	81;"	d	file:
USE_PREAD64	os_unix.c	83;"	d	file:
UnixUnusedFd	os_unix.c	/^struct UnixUnusedFd {$/;"	s	file:
UnixUnusedFd	os_unix.c	/^typedef struct UnixUnusedFd UnixUnusedFd;     \/* An unused file descriptor *\/$/;"	t	typeref:struct:UnixUnusedFd	file:
UnlockNotification	test_thread.c	/^struct UnlockNotification {$/;"	s	file:
UnlockNotification	test_thread.c	/^typedef struct UnlockNotification UnlockNotification;$/;"	t	typeref:struct:UnlockNotification	file:
UnpackedRecord	sqliteInt.h	/^struct UnpackedRecord {$/;"	s
UnpackedRecord	sqliteInt.h	/^typedef struct UnpackedRecord UnpackedRecord;$/;"	t	typeref:struct:UnpackedRecord
UpperToLower	util.c	277;"	d	file:
Utf8Read	func.c	585;"	d	file:
Utf8Read	func.c	587;"	d	file:
VDBE_DISPLAY_P4	vdbeInt.h	35;"	d
VDBE_DISPLAY_P4	vdbeInt.h	37;"	d
VDBE_MAGIC_DEAD	vdbeInt.h	429;"	d
VDBE_MAGIC_HALT	vdbeInt.h	428;"	d
VDBE_MAGIC_INIT	vdbeInt.h	426;"	d
VDBE_MAGIC_RUN	vdbeInt.h	427;"	d
VDBE_OFFSET_LINENO	vdbe.h	297;"	d
VDBE_OFFSET_LINENO	vdbe.h	303;"	d
VFSLOG_BUFFERSIZE	test_osinst.c	115;"	d	file:
VFUNCTION	sqliteInt.h	1598;"	d
VTAB_SCHEMA	dbstat.c	59;"	d	file:
VTable	sqliteInt.h	/^struct VTable {$/;"	s
VTable	sqliteInt.h	/^typedef struct VTable VTable;$/;"	t	typeref:struct:VTable
VVA_ONLY	sqliteInt.h	402;"	d
VVA_ONLY	sqliteInt.h	404;"	d
ValueNewStat4Ctx	vdbemem.c	/^struct ValueNewStat4Ctx {$/;"	s	file:
Vdbe	vdbe.h	/^typedef struct Vdbe Vdbe;$/;"	t	typeref:struct:Vdbe
Vdbe	vdbeInt.h	/^struct Vdbe {$/;"	s
VdbeBranchTaken	vdbe.c	137;"	d	file:
VdbeBranchTaken	vdbe.c	139;"	d	file:
VdbeComment	vdbe.h	255;"	d
VdbeComment	vdbe.h	264;"	d
VdbeCoverage	vdbe.h	293;"	d
VdbeCoverage	vdbe.h	299;"	d
VdbeCoverageAlwaysTaken	vdbe.h	295;"	d
VdbeCoverageAlwaysTaken	vdbe.h	301;"	d
VdbeCoverageIf	vdbe.h	294;"	d
VdbeCoverageIf	vdbe.h	300;"	d
VdbeCoverageNeverTaken	vdbe.h	296;"	d
VdbeCoverageNeverTaken	vdbe.h	302;"	d
VdbeCursor	vdbeInt.h	/^struct VdbeCursor {$/;"	s
VdbeCursor	vdbeInt.h	/^typedef struct VdbeCursor VdbeCursor;$/;"	t	typeref:struct:VdbeCursor
VdbeFrame	vdbeInt.h	/^struct VdbeFrame {$/;"	s
VdbeFrame	vdbeInt.h	/^typedef struct VdbeFrame VdbeFrame;$/;"	t	typeref:struct:VdbeFrame
VdbeFrameMem	vdbeInt.h	176;"	d
VdbeMemDynamic	vdbeInt.h	265;"	d
VdbeModuleComment	vdbe.h	259;"	d
VdbeModuleComment	vdbe.h	261;"	d
VdbeModuleComment	vdbe.h	266;"	d
VdbeNoopComment	vdbe.h	257;"	d
VdbeNoopComment	vdbe.h	265;"	d
VdbeOp	vdbe.h	/^struct VdbeOp {$/;"	s
VdbeOp	vdbe.h	/^typedef struct VdbeOp VdbeOp;$/;"	t	typeref:struct:VdbeOp
VdbeOpIter	vdbeaux.c	/^struct VdbeOpIter {$/;"	s	file:
VdbeOpIter	vdbeaux.c	/^typedef struct VdbeOpIter VdbeOpIter;$/;"	t	typeref:struct:VdbeOpIter	file:
VdbeOpList	vdbe.h	/^struct VdbeOpList {$/;"	s
VdbeOpList	vdbe.h	/^typedef struct VdbeOpList VdbeOpList;$/;"	t	typeref:struct:VdbeOpList
VdbeSorter	vdbeInt.h	/^typedef struct VdbeSorter VdbeSorter;$/;"	t	typeref:struct:VdbeSorter
VdbeSorter	vdbesort.c	/^struct VdbeSorter {$/;"	s	file:
VfslogCsr	test_osinst.c	/^struct VfslogCsr {$/;"	s	file:
VfslogCsr	test_osinst.c	/^typedef struct VfslogCsr VfslogCsr;$/;"	t	typeref:struct:VfslogCsr	file:
VfslogFile	test_osinst.c	/^struct VfslogFile {$/;"	s	file:
VfslogFile	test_osinst.c	/^typedef struct VfslogFile VfslogFile;$/;"	t	typeref:struct:VfslogFile	file:
VfslogVfs	test_osinst.c	/^struct VfslogVfs {$/;"	s	file:
VfslogVfs	test_osinst.c	/^typedef struct VfslogVfs VfslogVfs;$/;"	t	typeref:struct:VfslogVfs	file:
VfslogVtab	test_osinst.c	/^struct VfslogVtab {$/;"	s	file:
VfslogVtab	test_osinst.c	/^typedef struct VfslogVtab VfslogVtab;$/;"	t	typeref:struct:VfslogVtab	file:
VisibleRowid	sqliteInt.h	1880;"	d
VtabCtx	sqliteInt.h	/^typedef struct VtabCtx VtabCtx;$/;"	t	typeref:struct:VtabCtx
VtabCtx	vtab.c	/^struct VtabCtx {$/;"	s	file:
WALINDEX_HDR_SIZE	wal.c	395;"	d	file:
WALINDEX_LOCK_OFFSET	wal.c	394;"	d	file:
WALINDEX_MAX_VERSION	wal.c	272;"	d	file:
WALINDEX_PGSZ	wal.c	527;"	d	file:
WALTRACE	wal.c	253;"	d	file:
WALTRACE	wal.c	255;"	d	file:
WAL_ALL_BUT_WRITE	wal.c	280;"	d	file:
WAL_CKPT_LOCK	wal.c	281;"	d	file:
WAL_EXCLUSIVE_MODE	wal.c	464;"	d	file:
WAL_FRAME_HDRSIZE	wal.c	398;"	d	file:
WAL_HDRSIZE	wal.c	402;"	d	file:
WAL_HEAPMEMORY_MODE	wal.c	465;"	d	file:
WAL_MAGIC	wal.c	413;"	d	file:
WAL_MAX_VERSION	wal.c	271;"	d	file:
WAL_NORMAL_MODE	wal.c	463;"	d	file:
WAL_NREADER	wal.c	284;"	d	file:
WAL_RDONLY	wal.c	471;"	d	file:
WAL_RDWR	wal.c	470;"	d	file:
WAL_READ_LOCK	wal.c	283;"	d	file:
WAL_RECOVER_LOCK	wal.c	282;"	d	file:
WAL_RETRY	wal.c	2125;"	d	file:
WAL_SAVEPOINT_NDATA	wal.h	50;"	d
WAL_SHM_RDONLY	wal.c	472;"	d	file:
WAL_SYNC_TRANSACTIONS	wal.h	25;"	d
WAL_WRITE_LOCK	wal.c	279;"	d	file:
WHERETRACE	whereInt.h	26;"	d
WHERETRACE	whereInt.h	29;"	d
WHERETRACE_ENABLED	whereInt.h	27;"	d
WHERE_AUTO_INDEX	whereInt.h	545;"	d
WHERE_BOTH_LIMIT	whereInt.h	537;"	d
WHERE_BTM_LIMIT	whereInt.h	536;"	d
WHERE_COLUMN_EQ	whereInt.h	530;"	d
WHERE_COLUMN_IN	whereInt.h	532;"	d
WHERE_COLUMN_NULL	whereInt.h	533;"	d
WHERE_COLUMN_RANGE	whereInt.h	531;"	d
WHERE_CONSTRAINT	whereInt.h	534;"	d
WHERE_DISTINCTBY	sqliteInt.h	2557;"	d
WHERE_DISTINCT_NOOP	sqliteInt.h	2569;"	d
WHERE_DISTINCT_ORDERED	sqliteInt.h	2571;"	d
WHERE_DISTINCT_UNIQUE	sqliteInt.h	2570;"	d
WHERE_DISTINCT_UNORDERED	sqliteInt.h	2572;"	d
WHERE_DUPLICATES_OK	sqliteInt.h	2553;"	d
WHERE_GROUPBY	sqliteInt.h	2556;"	d
WHERE_IDX_ONLY	whereInt.h	538;"	d
WHERE_INDEXED	whereInt.h	540;"	d
WHERE_IN_ABLE	whereInt.h	542;"	d
WHERE_IPK	whereInt.h	539;"	d
WHERE_LOOP_XFER_SZ	whereInt.h	139;"	d
WHERE_MULTI_OR	whereInt.h	544;"	d
WHERE_ONEPASS_DESIRED	sqliteInt.h	2551;"	d
WHERE_ONEPASS_MULTIROW	sqliteInt.h	2552;"	d
WHERE_ONEROW	whereInt.h	543;"	d
WHERE_ORDERBY_LIMIT	sqliteInt.h	2561;"	d
WHERE_ORDERBY_MAX	sqliteInt.h	2550;"	d
WHERE_ORDERBY_MIN	sqliteInt.h	2549;"	d
WHERE_ORDERBY_NORMAL	sqliteInt.h	2548;"	d
WHERE_OR_SUBCLAUSE	sqliteInt.h	2554;"	d
WHERE_PARTIALIDX	whereInt.h	548;"	d
WHERE_SEEK_TABLE	sqliteInt.h	2560;"	d
WHERE_SKIPSCAN	whereInt.h	546;"	d
WHERE_SORTBYGROUP	sqliteInt.h	2559;"	d
WHERE_TOP_LIMIT	whereInt.h	535;"	d
WHERE_UNQ_WANTED	whereInt.h	547;"	d
WHERE_USE_LIMIT	sqliteInt.h	2564;"	d
WHERE_VIRTUALTABLE	whereInt.h	541;"	d
WHERE_WANT_DISTINCT	sqliteInt.h	2558;"	d
WIN32_LEAN_AND_MEAN	tclsqlite.c	65;"	d	file:
WIN32_LEAN_AND_MEAN	test_windirent.h	22;"	d
WINCE_DELETION_ATTEMPTS	os_win.c	2624;"	d	file:
WINFILE_PERSIST_WAL	os_win.c	308;"	d	file:
WINFILE_PSOW	os_win.c	309;"	d	file:
WINFILE_RDONLY	os_win.c	307;"	d	file:
WINMEM_MAGIC1	os_win.c	411;"	d	file:
WINMEM_MAGIC2	os_win.c	412;"	d	file:
WINSHM_RDLCK	os_win.c	3679;"	d	file:
WINSHM_UNLCK	os_win.c	3678;"	d	file:
WINSHM_WRLCK	os_win.c	3680;"	d	file:
WIN_SHM_BASE	os_win.c	3672;"	d	file:
WIN_SHM_DMS	os_win.c	3673;"	d	file:
WO_ALL	whereInt.h	522;"	d
WO_AND	whereInt.h	518;"	d
WO_EQ	whereInt.h	509;"	d
WO_EQUIV	whereInt.h	519;"	d
WO_GE	whereInt.h	513;"	d
WO_GT	whereInt.h	512;"	d
WO_IN	whereInt.h	508;"	d
WO_IS	whereInt.h	515;"	d
WO_ISNULL	whereInt.h	516;"	d
WO_LE	whereInt.h	511;"	d
WO_LT	whereInt.h	510;"	d
WO_MATCH	whereInt.h	514;"	d
WO_NOOP	whereInt.h	520;"	d
WO_OR	whereInt.h	517;"	d
WO_SINGLE	whereInt.h	523;"	d
WRC_Abort	sqliteInt.h	3286;"	d
WRC_Continue	sqliteInt.h	3284;"	d
WRC_Prune	sqliteInt.h	3285;"	d
WRITE_LOCK	btreeInt.h	327;"	d
WRITE_UTF16BE	utf.c	96;"	d	file:
WRITE_UTF16LE	utf.c	84;"	d	file:
WRITE_UTF8	utf.c	64;"	d	file:
W_OK	test_demovfs.c	489;"	d	file:
Wal	wal.c	/^struct Wal {$/;"	s	file:
Wal	wal.h	/^typedef struct Wal Wal;$/;"	t	typeref:struct:Wal
WalCkptInfo	wal.c	/^struct WalCkptInfo {$/;"	s	file:
WalCkptInfo	wal.c	/^typedef struct WalCkptInfo WalCkptInfo;$/;"	t	typeref:struct:WalCkptInfo	file:
WalIndexHdr	wal.c	/^struct WalIndexHdr {$/;"	s	file:
WalIndexHdr	wal.c	/^typedef struct WalIndexHdr WalIndexHdr;$/;"	t	typeref:struct:WalIndexHdr	file:
WalIterator	wal.c	/^struct WalIterator {$/;"	s	file:
WalIterator	wal.c	/^typedef struct WalIterator WalIterator;$/;"	t	typeref:struct:WalIterator	file:
WalSegment	wal.c	/^  struct WalSegment {$/;"	s	struct:WalIterator	file:
WalWriter	wal.c	/^typedef struct WalWriter {$/;"	s	file:
WalWriter	wal.c	/^} WalWriter;$/;"	t	typeref:struct:WalWriter	file:
Walker	sqliteInt.h	/^struct Walker {$/;"	s
Walker	sqliteInt.h	/^typedef struct Walker Walker;$/;"	t	typeref:struct:Walker
WhereAndInfo	whereInt.h	/^struct WhereAndInfo {$/;"	s
WhereAndInfo	whereInt.h	/^typedef struct WhereAndInfo WhereAndInfo;$/;"	t	typeref:struct:WhereAndInfo
WhereClause	whereInt.h	/^struct WhereClause {$/;"	s
WhereClause	whereInt.h	/^typedef struct WhereClause WhereClause;$/;"	t	typeref:struct:WhereClause
WhereInfo	sqliteInt.h	/^typedef struct WhereInfo WhereInfo;$/;"	t	typeref:struct:WhereInfo
WhereInfo	whereInt.h	/^struct WhereInfo {$/;"	s
WhereLevel	whereInt.h	/^struct WhereLevel {$/;"	s
WhereLevel	whereInt.h	/^typedef struct WhereLevel WhereLevel;$/;"	t	typeref:struct:WhereLevel
WhereLoop	whereInt.h	/^struct WhereLoop {$/;"	s
WhereLoop	whereInt.h	/^typedef struct WhereLoop WhereLoop;$/;"	t	typeref:struct:WhereLoop
WhereLoopBuilder	whereInt.h	/^struct WhereLoopBuilder {$/;"	s
WhereLoopBuilder	whereInt.h	/^typedef struct WhereLoopBuilder WhereLoopBuilder;$/;"	t	typeref:struct:WhereLoopBuilder
WhereMaskSet	whereInt.h	/^struct WhereMaskSet {$/;"	s
WhereMaskSet	whereInt.h	/^typedef struct WhereMaskSet WhereMaskSet;$/;"	t	typeref:struct:WhereMaskSet
WhereOrCost	whereInt.h	/^struct WhereOrCost {$/;"	s
WhereOrCost	whereInt.h	/^typedef struct WhereOrCost WhereOrCost;$/;"	t	typeref:struct:WhereOrCost
WhereOrInfo	whereInt.h	/^struct WhereOrInfo {$/;"	s
WhereOrInfo	whereInt.h	/^typedef struct WhereOrInfo WhereOrInfo;$/;"	t	typeref:struct:WhereOrInfo
WhereOrSet	whereInt.h	/^struct WhereOrSet {$/;"	s
WhereOrSet	whereInt.h	/^typedef struct WhereOrSet WhereOrSet;$/;"	t	typeref:struct:WhereOrSet
WherePath	whereInt.h	/^struct WherePath {$/;"	s
WherePath	whereInt.h	/^typedef struct WherePath WherePath;$/;"	t	typeref:struct:WherePath
WhereScan	whereInt.h	/^struct WhereScan {$/;"	s
WhereScan	whereInt.h	/^typedef struct WhereScan WhereScan;$/;"	t	typeref:struct:WhereScan
WhereTerm	whereInt.h	/^struct WhereTerm {$/;"	s
WhereTerm	whereInt.h	/^typedef struct WhereTerm WhereTerm;$/;"	t	typeref:struct:WhereTerm
With	sqliteInt.h	/^struct With {$/;"	s
With	sqliteInt.h	/^typedef struct With With;$/;"	t	typeref:struct:With
Wrapped	test_init.c	/^static struct Wrapped {$/;"	s	file:
WriteBuffer	test6.c	/^struct WriteBuffer {$/;"	s	file:
WriteBuffer	test6.c	/^typedef struct WriteBuffer WriteBuffer;$/;"	t	typeref:struct:WriteBuffer	file:
XN_EXPR	sqliteInt.h	2117;"	d
XN_ROWID	sqliteInt.h	2116;"	d
Y	date.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
_BSD_SOURCE	sqliteInt.h	119;"	d
_CRT_RAND_S	sqliteInt.h	58;"	d
_CRT_SECURE_NO_WARNINGS	shell.c	17;"	d	file:
_FILE_OFFSET_BITS	shell.c	40;"	d	file:
_FILE_OFFSET_BITS	sqliteInt.h	101;"	d
_GNU_SOURCE	sqliteInt.h	115;"	d
_LARGEFILE_SOURCE	shell.c	42;"	d	file:
_LARGEFILE_SOURCE	sqliteInt.h	103;"	d
_LARGE_FILE	shell.c	38;"	d	file:
_LARGE_FILE	sqliteInt.h	99;"	d
_OS_COMMON_H_	os_common.h	21;"	d
_SQLITE_OS_H_	os.h	21;"	d
_USE_32BIT_TIME_T	sqliteInt.h	151;"	d
_XOPEN_SOURCE	sqliteInt.h	333;"	d
__declspec	test_loadext.c	/^__declspec(dllexport)$/;"	f
__declspec	test_schema.c	/^__declspec(dllexport)$/;"	f
_all_whitespace	shell.c	/^static int _all_whitespace(const char *z){$/;"	f	file:
_ht	hash.h	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash
_sqliteZone_	mem1.c	/^static malloc_zone_t* _sqliteZone_;$/;"	v	file:
a	analyze.c	/^  Stat4Sample *a;           \/* Array of mxSample Stat4Sample objects *\/$/;"	m	struct:Stat4Accum	file:
a	os_win.c	/^  unsigned char *a;   \/* Gather entropy into this buffer *\/$/;"	m	struct:EntropyGatherer	file:
a	sqliteInt.h	/^  FuncDef *a[SQLITE_FUNC_HASH_SZ];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash
a	sqliteInt.h	/^  } *a;                  \/* Alloc a power of two greater or equal to nExpr *\/$/;"	m	struct:ExprList	typeref:struct:ExprList::ExprList_item
a	sqliteInt.h	/^  } *a;$/;"	m	struct:IdList	typeref:struct:IdList::IdList_item
a	sqliteInt.h	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	typeref:struct:SrcList::SrcList_item
a	sqliteInt.h	/^  } a[1];$/;"	m	struct:With	typeref:struct:With::Cte
a	test_intarray.c	/^  sqlite3_int64 *a;         \/* Contents of the array *\/$/;"	m	struct:sqlite3_intarray	file:
a	test_pcache.c	/^  } a[TESTPCACHE_NPAGE];    \/* All pages in the cache *\/$/;"	m	struct:testpcache	typeref:struct:testpcache::testpcachePage	file:
a	whereInt.h	/^  WhereLevel a[1];          \/* Information about each nest loop in WHERE *\/$/;"	m	struct:WhereInfo
a	whereInt.h	/^  WhereOrCost a[N_OR_COST];   \/* Set of best costs *\/$/;"	m	struct:WhereOrSet
a	whereInt.h	/^  WhereTerm *a;            \/* Each a[] describes a term of the WHERE cluase *\/$/;"	m	struct:WhereClause
aAction	sqliteInt.h	/^  u8 aAction[2];        \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey
aAlloc	vdbesort.c	/^  u8 *aAlloc;                 \/* Space for aKey if aBuffer and pMap wont work *\/$/;"	m	struct:PmaReader	file:
aAltMap	vdbeInt.h	/^  int *aAltMap;           \/* Mapping from table to index column numbers *\/$/;"	m	struct:VdbeCursor
aAvgEq	sqliteInt.h	/^  tRowcnt *aAvgEq;         \/* Average nEq values for keys not in aSample *\/$/;"	m	struct:Index
aBest	analyze.c	/^  Stat4Sample *aBest;       \/* Array of nCol best samples *\/$/;"	m	struct:Stat4Accum	file:
aBitmap	bitvec.c	/^    BITVEC_TELEM aBitmap[BITVEC_NELEM];    \/* Bitmap representation *\/$/;"	m	union:Bitvec::__anon26	file:
aBox	test_rtree.c	/^  } aBox[2];$/;"	m	struct:Circle	typeref:struct:Circle::Box	file:
aBuf	test_osinst.c	/^  char aBuf[VFSLOG_BUFFERSIZE];   \/* Write buffer *\/$/;"	m	struct:VfslogVfs	file:
aBuf	test_osinst.c	/^  unsigned char aBuf[1024];       \/* Current vfs log entry (read from file) *\/$/;"	m	struct:VfslogCsr	file:
aBuffer	test_demovfs.c	/^  char *aBuffer;                  \/* Pointer to malloc'd buffer *\/$/;"	m	struct:DemoFile	file:
aBuffer	vdbesort.c	/^  u8 *aBuffer;                    \/* Pointer to write buffer *\/$/;"	m	struct:PmaWriter	file:
aBuffer	vdbesort.c	/^  u8 *aBuffer;                \/* Current read buffer *\/$/;"	m	struct:PmaReader	file:
aCell	dbstat.c	/^  StatCell *aCell;                \/* Array of parsed cells *\/$/;"	m	struct:StatPage	file:
aCellIdx	btreeInt.h	/^  u8 *aCellIdx;        \/* The cell index area *\/$/;"	m	struct:MemPage
aCksum	test_journal.c	/^  u32 *aCksum;             \/* Checksum for first nPage pages *\/$/;"	m	struct:jt_file	file:
aCksum	wal.c	/^  u32 aCksum[2];                  \/* Checksum over all prior fields *\/$/;"	m	struct:WalIndexHdr	file:
aCol	sqliteInt.h	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table
aCol	sqliteInt.h	/^  } *aCol;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_col
aCol	sqliteInt.h	/^  } aCol[1];            \/* One entry for each of nCol columns *\/$/;"	m	struct:FKey	typeref:struct:FKey::sColMap
aCol	test8.c	/^  char **aCol;            \/* Array of size nCol. Column names *\/$/;"	m	struct:echo_vtab	file:
aColCache	sqliteInt.h	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	typeref:struct:Parse::yColCache
aColExpr	sqliteInt.h	/^  ExprList *aColExpr;      \/* Column expressions *\/$/;"	m	struct:Index
aColName	vdbeInt.h	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe
aColl	sqliteInt.h	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo
aCollSeq	sqliteInt.h	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3
aColmask	sqliteInt.h	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg
aConn	test_sqllog.c	/^  struct SLConn aConn[MAX_CONNECTIONS];$/;"	m	struct:SLGlobal	typeref:struct:SLGlobal::SLConn	file:
aCounter	test_mutex.c	/^  int aCounter[MAX_MUTEXES]; \/* Number of grabs of each type of mutex *\/$/;"	m	struct:test_mutex_globals	file:
aCounter	vdbeInt.h	/^  u32 aCounter[5];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe
aCtrl	mem5.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	file:
aData	btreeInt.h	/^  u8 *aData;           \/* Pointer to disk image of the page data *\/$/;"	m	struct:MemPage
aData	test_wsd.c	/^  ProcessLocalVar *aData[PLS_HASHSIZE];$/;"	m	struct:ProcessLocalStorage	file:
aDataEnd	btreeInt.h	/^  u8 *aDataEnd;        \/* One byte past the end of usable data *\/$/;"	m	struct:MemPage
aDataOfst	btreeInt.h	/^  u8 *aDataOfst;       \/* Same as aData for leaves.  aData+4 for interior *\/$/;"	m	struct:MemPage
aDb	sqliteInt.h	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3
aDbStatic	sqliteInt.h	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3
aDigits	printf.c	/^static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";$/;"	v	file:
aEntry	rowset.c	/^  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; \/* Allocated entries *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetEntry	file:
aExt	loadext.c	/^  void (**aExt)(void);   \/* Pointers to the extension init functions *\/$/;"	m	struct:sqlite3AutoExtList	file:
aExtension	sqliteInt.h	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3
aFile	vdbesort.c	/^  SorterFile aFile[2];            \/* aFile[0] for reading, [1] for writing *\/$/;"	m	struct:IncrMerger	file:
aFrameCksum	wal.c	/^  u32 aFrameCksum[2];             \/* Checksum of last frame in log *\/$/;"	m	struct:WalIndexHdr	file:
aFunc	sqliteInt.h	/^  Hash aFunc;                   \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3
aFunc	sqliteInt.h	/^  } *aFunc;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_func
aHardLimit	main.c	/^static const int aHardLimit[] = {$/;"	v	file:
aHash	bitvec.c	/^    u32 aHash[BITVEC_NINT];      \/* Hash table representation *\/$/;"	m	union:Bitvec::__anon26	file:
aInLoop	whereInt.h	/^      } *aInLoop;           \/* Information about each nested IN operator *\/$/;"	m	struct:WhereLevel::__anon3::__anon4	typeref:struct:WhereLevel::__anon3::__anon4::InLoop
aIndent	vdbeInt.h	/^  u16 aIndent[100];  \/* Levels of indentation *\/$/;"	m	struct:Explain
aIndex	test8.c	/^  int *aIndex;            \/* Array of size nCol. True if column has an index *\/$/;"	m	struct:echo_vtab	file:
aIndex	wal.c	/^    ht_slot *aIndex;              \/* i0, i1, i2... such that aPgno[iN] ascend *\/$/;"	m	struct:WalIterator::WalSegment	file:
aJournalMagic	pager.c	/^static const unsigned char aJournalMagic[] = {$/;"	v	file:
aKey	vdbesort.c	/^  u8 *aKey;                   \/* Pointer to current key *\/$/;"	m	struct:PmaReader	file:
aLTerm	whereInt.h	/^  WhereTerm **aLTerm;   \/* WhereTerms used *\/$/;"	m	struct:WhereLoop
aLTermSpace	whereInt.h	/^  WhereTerm *aLTermSpace[3];  \/* Initial aLTerm[] space *\/$/;"	m	struct:WhereLoop
aLabel	sqliteInt.h	/^  int *aLabel;         \/* Space to hold the labels *\/$/;"	m	struct:Parse
aLimit	sqliteInt.h	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3
aLock	wal.c	/^  u8 aLock[SQLITE_SHM_NLOCK];     \/* Reserved space for locks *\/$/;"	m	struct:WalCkptInfo	file:
aLoop	whereInt.h	/^  WhereLoop **aLoop;    \/* Array of WhereLoop objects implementing this path *\/$/;"	m	struct:WherePath
aMallocLog	test_malloc.c	/^static Tcl_HashTable aMallocLog;$/;"	v	file:
aMap	vdbesort.c	/^  u8 *aMap;                   \/* Pointer to mapping of entire file *\/$/;"	m	struct:PmaReader	file:
aMem	sqliteInt.h	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord
aMem	vdbeInt.h	/^  Mem *aMem;              \/* Array of memory cells for parent frame *\/$/;"	m	struct:VdbeFrame
aMem	vdbeInt.h	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe
aMemory	vdbesort.c	/^  u8 *aMemory;                    \/* If non-NULL, bulk memory to hold pList *\/$/;"	m	struct:SorterList	file:
aModule	sqliteInt.h	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3
aName	test_mutex.c	/^static const char *aName[MAX_MUTEXES+1] = {$/;"	v	file:
aNew	vdbeInt.h	/^  Mem *aNew;                      \/* Array of new.* values *\/$/;"	m	struct:PreUpdate
aOffset	vdbeInt.h	/^  u32 *aOffset;         \/* Pointer to aType[nField] *\/$/;"	m	struct:VdbeCursor
aOnceFlag	vdbeInt.h	/^  u8 *aOnceFlag;          \/* Array of OP_Once flags for parent frame *\/$/;"	m	struct:VdbeFrame
aOnceFlag	vdbeInt.h	/^  u8 *aOnceFlag;          \/* Flags for OP_Once *\/$/;"	m	struct:Vdbe
aOp	vdbe.h	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram
aOp	vdbeInt.h	/^  Op *aOp;                \/* Program instructions for parent frame *\/$/;"	m	struct:VdbeFrame
aOp	vdbeInt.h	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe
aOverflow	btreeInt.h	/^  Pgno *aOverflow;          \/* Cache of overflow page locations *\/$/;"	m	struct:BtCursor
aOvfl	dbstat.c	/^  u32 *aOvfl;                     \/* Array of overflow page numbers *\/$/;"	m	struct:StatCell	file:
aPadding	os_unix.c	/^  char aPadding[32];$/;"	m	struct:unixFile	file:
aPage	dbstat.c	/^  StatPage aPage[32];$/;"	m	struct:StatCursor	file:
aPage	test_vfs.c	/^  u8 *aPage[TESTVFS_MAX_PAGES];   \/* Array of ckalloc'd pages *\/$/;"	m	struct:TestvfsBuffer	file:
aPgRef	btreeInt.h	/^  u8 *aPgRef;       \/* 1 bit per page in the db (see above) *\/$/;"	m	struct:IntegrityCk
aPgno	wal.c	/^    u32 *aPgno;                   \/* Array of page numbers. *\/$/;"	m	struct:WalIterator::WalSegment	file:
aPool	mem3.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	file:
aPragmaNames	pragma.h	/^} aPragmaNames[] = {$/;"	v	typeref:struct:sPragmaNames
aPrefix	printf.c	/^static const char aPrefix[] = "-x0\\000X0";$/;"	v	file:
aReadMark	wal.c	/^  u32 aReadMark[WAL_NREADER];     \/* Reader marks *\/$/;"	m	struct:WalCkptInfo	file:
aReadr	vdbesort.c	/^  PmaReader *aReadr;         \/* Array of PmaReaders to merge data from *\/$/;"	m	struct:MergeEngine	file:
aReal	test_multiplex.c	/^  } *aReal;                        \/* list of all chunks *\/$/;"	m	struct:multiplexGroup	typeref:struct:multiplexGroup::multiplexReal	file:
aRecord	vdbeInt.h	/^  u8 *aRecord;                    \/* old.* database record *\/$/;"	m	struct:PreUpdate
aRegion	os_win.c	/^  } *aRegion;$/;"	m	struct:winShmNode	typeref:struct:winShmNode::ShmRegion	file:
aRow	vdbeInt.h	/^  const u8 *aRow;       \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor
aRowid	analyze.c	/^    u8 *aRowid;                     \/* Key for WITHOUT ROWID tables *\/$/;"	m	union:Stat4Sample::__anon9	file:
aSalt	wal.c	/^  u32 aSalt[2];                   \/* Two salt values copied from WAL header *\/$/;"	m	struct:WalIndexHdr	file:
aSample	sqliteInt.h	/^  IndexSample *aSample;    \/* Samples of the left-most key *\/$/;"	m	struct:Index
aSavepoint	pager.c	/^  PagerSavepoint *aSavepoint; \/* Array of active savepoints *\/$/;"	m	struct:Pager	file:
aScan	vdbeInt.h	/^  ScanStatus *aScan;      \/* Scan definitions for sqlite3_stmt_scanstatus() *\/$/;"	m	struct:Vdbe
aSegment	wal.c	/^  } aSegment[1];                  \/* One for every 32KB page in the wal-index *\/$/;"	m	struct:WalIterator	typeref:struct:WalIterator::WalSegment	file:
aSemName	os_unix.c	/^  char aSemName[MAX_PATHNAME+2];  \/* Name of that semaphore *\/$/;"	m	struct:unixInodeInfo	file:
aSession	shell.c	/^  OpenSession aSession[4];  \/* Array of sessions.  [0] is in focus. *\/$/;"	m	struct:ShellState	file:
aSortOrder	sqliteInt.h	/^  u8 *aSortOrder;          \/* for each column: True==DESC, False==ASC *\/$/;"	m	struct:Index
aSortOrder	sqliteInt.h	/^  u8 *aSortOrder;     \/* Sort order for each column. *\/$/;"	m	struct:KeyInfo
aStat	pager.c	/^  int aStat[3];               \/* Total cache hits, misses and writes *\/$/;"	m	struct:Pager	file:
aStatic	test_mutex.c	/^  sqlite3_mutex aStatic[STATIC_MUTEXES]; \/* The static mutexes *\/$/;"	m	struct:test_mutex_globals	file:
aStatic	whereInt.h	/^  WhereTerm aStatic[1];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause
aStatic	whereInt.h	/^  WhereTerm aStatic[8];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause
aSyscall	os_unix.c	/^} aSyscall[] = {$/;"	v	typeref:struct:unix_syscall	file:
aSyscall	os_win.c	/^} aSyscall[] = {$/;"	v	typeref:struct:win_syscall	file:
aSyscall	test_syscall.c	/^} aSyscall[] = {$/;"	v	typeref:struct:TestSyscallArray
aTableLock	sqliteInt.h	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse
aTask	vdbesort.c	/^  SortSubtask aTask[1];           \/* One or more subtasks *\/$/;"	m	struct:VdbeSorter	file:
aTempReg	sqliteInt.h	/^  int aTempReg[8];     \/* Holding area for temporary registers *\/$/;"	m	struct:Parse
aTree	vdbesort.c	/^  int *aTree;                \/* Current state of incremental merge *\/$/;"	m	struct:MergeEngine	file:
aType	vdbeInt.h	/^  u32 aType[1];         \/* Type values for all entries in the record *\/$/;"	m	struct:VdbeCursor
aVTrans	sqliteInt.h	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3
aVar	vdbeInt.h	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe
aWalData	pager.c	/^  u32 aWalData[WAL_SAVEPOINT_NDATA];        \/* WAL savepoint context *\/$/;"	m	struct:PagerSavepoint	file:
absFunc	func.c	/^static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
abuse_create_function	test_func.c	/^static int SQLITE_TCLAPI abuse_create_function($/;"	f	file:
accError	sqliteInt.h	/^  u8   accError;       \/* STRACCUM_NOMEM or STRACCUM_TOOBIG *\/$/;"	m	struct:StrAccum
access	shell.c	106;"	d	file:
accessPayload	btree.c	/^static int accessPayload($/;"	f	file:
actionName	pragma.c	/^static const char *actionName(u8 action){$/;"	f	file:
actualWidth	shell.c	/^  int actualWidth[100];  \/* Actual width of each column *\/$/;"	m	struct:ShellState	file:
addAggInfoColumn	expr.c	/^static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addAggInfoFunc	expr.c	/^static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addArgumentToVtab	vtab.c	/^static void addArgumentToVtab(Parse *pParse){$/;"	f	file:
addColOffset	sqliteInt.h	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table
addModuleArgument	vtab.c	/^static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){$/;"	f	file:
addToBlockedList	notify.c	/^static void addToBlockedList(sqlite3 *db){$/;"	f	file:
addToSavepointBitvecs	pager.c	/^static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){$/;"	f	file:
addToVTrans	vtab.c	/^static void addToVTrans(sqlite3 *db, VTable *pVTab){$/;"	f	file:
addWhereTerm	select.c	/^static void addWhereTerm($/;"	f	file:
add_alignment_test_collations	test1.c	/^static int SQLITE_TCLAPI add_alignment_test_collations($/;"	f	file:
add_column_fullname	parse.y	/^add_column_fullname ::= fullname(X). {$/;"	l
addrBody	whereInt.h	/^  int addrBody;         \/* Beginning of the body of this loop *\/$/;"	m	struct:WhereLevel
addrBrk	whereInt.h	/^  int addrBrk;          \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereLevel
addrCont	whereInt.h	/^  int addrCont;         \/* Jump here to continue with the next loop cycle *\/$/;"	m	struct:WhereLevel
addrCrTab	sqliteInt.h	/^  int addrCrTab;       \/* Address of OP_CreateTable opcode on CREATE TABLE *\/$/;"	m	struct:Parse
addrExplain	vdbeInt.h	/^  int addrExplain;                \/* OP_Explain for loop *\/$/;"	m	struct:ScanStatus
addrFillSub	sqliteInt.h	/^    int addrFillSub;  \/* Address of subroutine to manifest a subquery *\/$/;"	m	struct:SrcList::SrcList_item
addrFirst	whereInt.h	/^  int addrFirst;        \/* First instruction of interior of the loop *\/$/;"	m	struct:WhereLevel
addrInTop	whereInt.h	/^        int addrInTop;         \/* Top of the IN loop *\/$/;"	m	struct:WhereLevel::__anon3::__anon4::InLoop
addrLikeRep	whereInt.h	/^  int addrLikeRep;      \/* LIKE range processing address *\/$/;"	m	struct:WhereLevel
addrLoop	vdbeInt.h	/^  int addrLoop;                   \/* Address of "loops" counter *\/$/;"	m	struct:ScanStatus
addrNxt	whereInt.h	/^  int addrNxt;          \/* Jump here to start the next IN combination *\/$/;"	m	struct:WhereLevel
addrOpenEphm	sqliteInt.h	/^  int addrOpenEphm[2];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select
addrSkip	whereInt.h	/^  int addrSkip;         \/* Jump here for next iteration of skip-scan *\/$/;"	m	struct:WhereLevel
addrSortIndex	select.c	/^  int addrSortIndex;    \/* Address of the OP_SorterOpen or OP_OpenEphemeral *\/$/;"	m	struct:SortCtx	file:
addrTnct	select.c	/^  int addrTnct;   \/* Address of OP_OpenEphemeral opcode for tabTnct *\/$/;"	m	struct:DistinctCtx	file:
addrVisit	vdbeInt.h	/^  int addrVisit;                  \/* Address of "rows visited" counter *\/$/;"	m	struct:ScanStatus
addrVisit	whereInt.h	/^  int addrVisit;        \/* Address at which row is visited *\/$/;"	m	struct:WhereLevel
adjustStats	mem2.c	/^static void adjustStats(int iSize, int increment){$/;"	f	file:
affSdst	sqliteInt.h	/^  char affSdst;        \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest
affinity	sqliteInt.h	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr
affinity	sqliteInt.h	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column
afpCheckReservedLock	os_unix.c	/^static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
afpClose	os_unix.c	/^static int afpClose(sqlite3_file *id) {$/;"	f	file:
afpLock	os_unix.c	/^static int afpLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
afpLockingContext	os_unix.c	/^struct afpLockingContext {$/;"	s	file:
afpLockingContext	os_unix.c	/^typedef struct afpLockingContext afpLockingContext;$/;"	t	typeref:struct:afpLockingContext	file:
afpSetLock	os_unix.c	/^static int afpSetLock($/;"	f	file:
afpUnlock	os_unix.c	/^static int afpUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
afpfsByteRangeLock2FSCTL	os_unix.c	2628;"	d	file:
aggregate_context	sqlite3ext.h	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines
aggregate_count	sqlite3ext.h	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
ai	vdbe.h	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::p4union
aiClass	tokenize.c	/^static const unsigned char aiClass[] = {$/;"	v	file:
aiCol	sqliteInt.h	/^    int *aiCol;                                \/* array of column indexes *\/$/;"	m	union:Walker::__anon19
aiColumn	sqliteInt.h	/^  i16 *aiColumn;           \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index
aiColumn	whereInt.h	/^  i16 aiColumn[11];          \/* Corresponding column number in the eq-class *\/$/;"	m	struct:WhereScan
aiCur	whereInt.h	/^  int aiCur[11];             \/* Cursors in the equivalence class *\/$/;"	m	struct:WhereScan
aiCurOnePass	whereInt.h	/^  int aiCurOnePass[2];      \/* OP_OpenWrite cursors for the ONEPASS opt *\/$/;"	m	struct:WhereInfo
aiFreelist	mem5.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	file:
aiHash	mem3.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	file:
aiIdx	btreeInt.h	/^  u16 aiIdx[BTCURSOR_MAX_DEPTH];        \/* Current index in apPage[i] *\/$/;"	m	struct:BtCursor
aiIndent	shell.c	/^  int *aiIndent;         \/* Array of indents used in MODE_Explain *\/$/;"	m	struct:ShellState	file:
aiOvfl	btreeInt.h	/^  u16 aiOvfl[5];       \/* Insert the i-th overflow cell before the aiOvfl-th$/;"	m	struct:MemPage
aiRowEst	sqliteInt.h	/^  tRowcnt *aiRowEst;       \/* Non-logarithmic stat1 data for this index *\/$/;"	m	struct:Index
aiRowLogEst	sqliteInt.h	/^  LogEst *aiRowLogEst;     \/* From ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index
aiSmall	mem3.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	file:
alarmBusy	mem3.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	file:
alarmThreshold	malloc.c	/^  sqlite3_int64 alarmThreshold; \/* The soft heap limit *\/$/;"	m	struct:Mem0Global	file:
alignmentCollFunc	test1.c	/^static int alignmentCollFunc($/;"	f	file:
allSpaces	main.c	/^static int allSpaces(const char *z, int n){$/;"	f	file:
allocSpace	vdbeaux.c	/^static void *allocSpace($/;"	f	file:
allocVdbe	select.c	/^static SQLITE_NOINLINE Vdbe *allocVdbe(Parse *pParse){$/;"	f	file:
allocateBtreePage	btree.c	/^static int allocateBtreePage($/;"	f	file:
allocateCursor	vdbe.c	/^static VdbeCursor *allocateCursor($/;"	f	file:
allocateIndexInfo	where.c	/^static sqlite3_index_info *allocateIndexInfo($/;"	f	file:
allocateSpace	btree.c	/^static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){$/;"	f	file:
allocateTempSpace	btree.c	/^static void allocateTempSpace(BtShared *pBt){$/;"	f	file:
allowedOp	whereexpr.c	/^static int allowedOp(int op){$/;"	f	file:
anDLt	analyze.c	/^  tRowcnt *anDLt;                 \/* sqlite_stat4.nDLt *\/$/;"	m	struct:Stat4Sample	file:
anDLt	sqliteInt.h	/^  tRowcnt *anDLt;   \/* Est. number of distinct keys less than this sample *\/$/;"	m	struct:IndexSample
anEq	analyze.c	/^  tRowcnt *anEq;                  \/* sqlite_stat4.nEq *\/$/;"	m	struct:Stat4Sample	file:
anEq	sqliteInt.h	/^  tRowcnt *anEq;    \/* Est. number of rows where the key equals this sample *\/$/;"	m	struct:IndexSample
anExec	vdbeInt.h	/^  i64 *anExec;            \/* Event counters from parent frame *\/$/;"	m	struct:VdbeFrame
anExec	vdbeInt.h	/^  i64 *anExec;            \/* Number of times each op has been executed *\/$/;"	m	struct:Vdbe
anLt	analyze.c	/^  tRowcnt *anLt;                  \/* sqlite_stat4.nLt *\/$/;"	m	struct:Stat4Sample	file:
anLt	sqliteInt.h	/^  tRowcnt *anLt;    \/* Est. number of rows where key is less than this sample *\/$/;"	m	struct:IndexSample
anStat	sqliteInt.h	/^  int anStat[3];          \/* 0: hits.  1: size misses.  2: full misses *\/$/;"	m	struct:Lookaside
analysisInfo	analyze.c	/^struct analysisInfo {$/;"	s	file:
analysisInfo	analyze.c	/^typedef struct analysisInfo analysisInfo;$/;"	t	typeref:struct:analysisInfo	file:
analysisLoader	analyze.c	/^static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){$/;"	f	file:
analyzeAggregate	expr.c	/^static int analyzeAggregate(Walker *pWalker, Expr *pExpr){$/;"	f	file:
analyzeAggregatesInSelect	expr.c	/^static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){$/;"	f	file:
analyzeDatabase	analyze.c	/^static void analyzeDatabase(Parse *pParse, int iDb){$/;"	f	file:
analyzeOneTable	analyze.c	/^static void analyzeOneTable($/;"	f	file:
analyzeTable	analyze.c	/^static void analyzeTable(Parse *pParse, Table *pTab, Index *pOnlyIdx){$/;"	f	file:
anylist	parse.y	/^anylist ::= .$/;"	l
anylist	parse.y	/^anylist ::= anylist ANY.$/;"	l
anylist	parse.y	/^anylist ::= anylist LP anylist RP.$/;"	l
apArg	sqliteInt.h	/^  sqlite3_value **apArg;   \/* The argument values *\/$/;"	m	struct:PrintfArguments
apArg	vdbeInt.h	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe
apCell	btree.c	/^  u8 **apCell;            \/* All cells begin balanced *\/$/;"	m	struct:CellArray	file:
apColName	tclsqlite.c	/^  Tcl_Obj **apColName;            \/* Array of column names *\/$/;"	m	struct:DbEvalContext	file:
apCsr	vdbeInt.h	/^  VdbeCursor **apCsr;     \/* Array of Vdbe cursors for parent frame *\/$/;"	m	struct:VdbeFrame
apCsr	vdbeInt.h	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe
apHash	pcache1.c	/^  PgHdr1 **apHash;                    \/* Hash table for fast lookup by key *\/$/;"	m	struct:PCache1	file:
apOvfl	btreeInt.h	/^  u8 *apOvfl[5];       \/* Pointers to the body of overflow cells *\/$/;"	m	struct:MemPage
apPage	btreeInt.h	/^  MemPage *apPage[BTCURSOR_MAX_DEPTH];  \/* Pages from root to current page *\/$/;"	m	struct:BtCursor
apParm	tclsqlite.c	/^  Tcl_Obj **apParm;        \/* Array of referenced object pointers *\/$/;"	m	struct:SqlPreparedStmt	file:
apRegion	os_unix.c	/^  char **apRegion;           \/* Array of mapped shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
apSub	bitvec.c	/^    Bitvec *apSub[BITVEC_NPTR];  \/* Recursive representation *\/$/;"	m	union:Bitvec::__anon26	file:
apSub	vdbeaux.c	/^  SubProgram **apSub;        \/* Array of subprograms *\/$/;"	m	struct:VdbeOpIter	file:
apTrigger	sqliteInt.h	/^  Trigger *apTrigger[2];\/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey
apVfs	test1.c	/^static sqlite3_vfs *apVfs[20];$/;"	v	file:
apVtabLock	sqliteInt.h	/^  Table **apVtabLock;       \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse
apWiData	wal.c	/^  volatile u32 **apWiData;   \/* Pointer to wal-index content in memory *\/$/;"	m	struct:Wal	file:
apiOomError	malloc.c	/^static SQLITE_NOINLINE int apiOomError(sqlite3 *db){$/;"	f	file:
appendText	shell.c	/^static char *appendText(char *zIn, char const *zAppend, char quote){$/;"	f	file:
appendToEchoModule	test8.c	/^static void appendToEchoModule(Tcl_Interp *interp, const char *zArg){$/;"	f	file:
applyAffinity	vdbe.c	/^static void applyAffinity($/;"	f	file:
applyNumericAffinity	vdbe.c	/^static void applyNumericAffinity(Mem *pRec, int bTryForInt){$/;"	f	file:
approx	func.c	/^  u8 approx;        \/* True if non-integer value was input to the sum *\/$/;"	m	struct:SumCtx	file:
argc	test4.c	/^  int argc;             \/* number of columns in result *\/$/;"	m	struct:Thread	file:
argc	test7.c	/^  int argc;                \/* number of columns in result *\/$/;"	m	struct:Thread	file:
argc	vdbeInt.h	/^  u8 argc;                \/* Number of arguments *\/$/;"	m	struct:sqlite3_context
argv	test4.c	/^  const char *argv[100];    \/* result columns *\/$/;"	m	struct:Thread	file:
argv	test7.c	/^  const char *argv[100];   \/* result columns *\/$/;"	m	struct:Thread	file:
argv	vdbeInt.h	/^  sqlite3_value *argv[1]; \/* Argument set *\/$/;"	m	struct:sqlite3_context
ascii_read_one_field	shell.c	/^static char *SQLITE_CDECL ascii_read_one_field(ImportCtx *p){$/;"	f	file:
assertCellInfo	btree.c	/^  static void assertCellInfo(BtCursor *pCur){$/;"	f	file:
assertCellInfo	btree.c	4249;"	d	file:
assertMutexHeld	notify.c	31;"	d	file:
assertParentIndex	btree.c	/^static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){$/;"	f	file:
assertParentIndex	btree.c	4792;"	d	file:
assertTruncateConstraint	pager.c	/^static void assertTruncateConstraint(Pager *pPager){$/;"	f	file:
assertTruncateConstraint	pager.c	3879;"	d	file:
assertTruncateConstraintCb	pager.c	/^static void assertTruncateConstraintCb(PgHdr *pPg){$/;"	f	file:
assert_pager_state	pager.c	/^static int assert_pager_state(Pager *p){$/;"	f	file:
attachBackupObject	backup.c	/^static void attachBackupObject(sqlite3_backup *p){$/;"	f	file:
attachFunc	attach.c	/^static void attachFunc($/;"	f	file:
auth	sqliteInt.h	/^  sqlite3_userauth auth;        \/* User authentication information *\/$/;"	m	struct:sqlite3
authLevel	sqliteInt.h	/^  u8 authLevel;                 \/* Current authentication level *\/$/;"	m	struct:sqlite3_userauth
auth_callback	tclsqlite.c	/^static int auth_callback($/;"	f	file:
autoCommit	sqliteInt.h	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3
autoEQP	shell.c	/^  int autoEQP;           \/* Run EXPLAIN QUERY PLAN prior to seach SQL stmt *\/$/;"	m	struct:ShellState	file:
autoExplain	shell.c	/^  int autoExplain;       \/* Automatically turn on .explain mode *\/$/;"	m	struct:ShellState	file:
autoExtBrokenObjCmd	test_autoext.c	/^static int SQLITE_TCLAPI autoExtBrokenObjCmd($/;"	f	file:
autoExtCubeObjCmd	test_autoext.c	/^static int SQLITE_TCLAPI autoExtCubeObjCmd($/;"	f	file:
autoExtSqrObjCmd	test_autoext.c	/^static int SQLITE_TCLAPI autoExtSqrObjCmd($/;"	f	file:
autoIncBegin	insert.c	/^static int autoIncBegin($/;"	f	file:
autoIncBegin	insert.c	363;"	d	file:
autoIncStep	insert.c	/^static void autoIncStep(Parse *pParse, int memId, int regRowid){$/;"	f	file:
autoIncStep	insert.c	364;"	d	file:
autoIncrementEnd	insert.c	/^static SQLITE_NOINLINE void autoIncrementEnd(Parse *pParse){$/;"	f	file:
autoVacuum	btreeInt.h	/^  u8 autoVacuum;        \/* True if auto-vacuum is enabled *\/$/;"	m	struct:BtShared
autoVacuumCommit	btree.c	/^static int autoVacuumCommit(BtShared *pBt){$/;"	f	file:
auto_extension	sqlite3ext.h	/^  int (*auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines
autoinstall_test_funcs	test_func.c	/^static int SQLITE_TCLAPI autoinstall_test_funcs($/;"	f	file:
autolockIoFinder	os_unix.c	/^  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;$/;"	v	file:
autolockIoFinderImpl	os_unix.c	/^static const sqlite3_io_methods *autolockIoFinderImpl($/;"	f	file:
avgFinalize	func.c	/^static void avgFinalize(sqlite3_context *context){$/;"	f	file:
azColl	sqliteInt.h	/^  const char **azColl;     \/* Array of collation sequence names for index *\/$/;"	m	struct:Index
azCompileOpt	ctime.c	/^static const char * const azCompileOpt[] = {$/;"	v	file:
azFile	test_osinst.c	/^  char **azFile;                  \/* File strings *\/$/;"	m	struct:VfslogCsr	file:
azFileLock	os_unix.c	/^static const char *azFileLock(int eFileLock){$/;"	f	file:
azFilter	shell.c	/^  char **azFilter;         \/* Array of xFilter rejection GLOB patterns *\/$/;"	m	struct:OpenSession	file:
azModuleArg	sqliteInt.h	/^  char **azModuleArg;  \/* 0: module 1: schema 2: vtab name 3...: args *\/$/;"	m	struct:Table
azResult	table.c	/^  char **azResult;   \/* Accumulated output *\/$/;"	m	struct:TabResult	file:
azVar	sqliteInt.h	/^  char **azVar;             \/* Pointers to names of parameters *\/$/;"	m	struct:Parse
azVar	vdbeInt.h	/^  char **azVar;           \/* Name of variables *\/$/;"	m	struct:Vdbe
bBenignMalloc	sqliteInt.h	/^  u8 bBenignMalloc;             \/* Do not require OOMs if true *\/$/;"	m	struct:sqlite3
bBusy	btreeInt.h	/^  u8 bBusy;            \/* Prevent endless loops on corrupt database files *\/$/;"	m	struct:MemPage
bConditional	test_sqllog.c	/^  int bConditional;               \/* Only trace if *-sqllog file is present *\/$/;"	m	struct:SLGlobal	file:
bConstraint	sqliteInt.h	/^  u8 bConstraint;           \/* True if constraints are supported *\/$/;"	m	struct:VTable
bCoreMutex	sqliteInt.h	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config
bDeclared	vtab.c	/^  int bDeclared;      \/* True after sqlite3_declare_vtab() is called *\/$/;"	m	struct:VtabCtx	file:
bDestLocked	backup.c	/^  int bDestLocked;         \/* True once a write-transaction is open on pDest *\/$/;"	m	struct:sqlite3_backup	file:
bDisable	sqliteInt.h	/^  u32 bDisable;           \/* Only operate the lookaside when zero *\/$/;"	m	struct:Lookaside
bDoTruncate	btreeInt.h	/^  u8 bDoTruncate;       \/* True to truncate db on commit *\/$/;"	m	struct:BtShared
bDone	vdbesort.c	/^  int bDone;                      \/* Set if thread is finished but not joined *\/$/;"	m	struct:SortSubtask	file:
bEnabled	test_multiplex.c	/^  unsigned char bEnabled;          \/* TRUE to use Multiplex VFS for this file *\/$/;"	m	struct:multiplexGroup	file:
bEof	vdbesort.c	/^  int bEof;                       \/* Set to true when merge is finished *\/$/;"	m	struct:IncrMerger	file:
bExclusive	os_win.c	/^  BOOL bExclusive;    \/* Indicates an exclusive lock has been obtained *\/$/;"	m	struct:winceLock	file:
bFullMutex	sqliteInt.h	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config
bIsReader	vdbeInt.h	/^  bft bIsReader:1;        \/* True for statements that read *\/$/;"	m	struct:Vdbe
bLegacyPrepare	tclsqlite.c	/^  int bLegacyPrepare;        \/* True to use sqlite3_prepare() *\/$/;"	m	struct:SqliteDb	file:
bLine	sqliteInt.h	/^  u8  bLine[100];         \/* Draw vertical in column i if bLine[i] is true *\/$/;"	m	struct:TreeView
bLocaltimeFault	sqliteInt.h	/^  int bLocaltimeFault;              \/* True to fail localtime() calls *\/$/;"	m	struct:Sqlite3Config
bMalloced	sqliteInt.h	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside
bMemstat	sqliteInt.h	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config
bNoLock	os_win.c	/^  BOOL bNoLock;                      \/* Non-zero if locking is disabled. *\/$/;"	m	struct:winVfsAppData	file:
bOpenUri	sqliteInt.h	/^  int bOpenUri;                     \/* True to interpret filenames as URIs *\/$/;"	m	struct:Sqlite3Config
bOrderedInnerLoop	select.c	/^  u8 bOrderedInnerLoop; \/* ORDER BY correctly sorts the inner loop *\/$/;"	m	struct:SortCtx	file:
bOrderedInnerLoop	whereInt.h	/^  u8 bOrderedInnerLoop;     \/* True if only the inner-most loop is ordered *\/$/;"	m	struct:WhereInfo
bOwned	os_win.c	/^  BOOL bOwned;  \/* Do we own the heap (i.e. destroy it on shutdown)? *\/$/;"	m	struct:winMemData	file:
bPending	os_win.c	/^  BOOL bPending;      \/* Indicates a pending lock has been obtained *\/$/;"	m	struct:winceLock	file:
bPersist	test_syscall.c	/^  int bPersist;                   \/* 1 for persistent errors, 0 for transient *\/$/;"	m	struct:TestSyscallGlobal	file:
bProcessLock	os_unix.c	/^  unsigned char bProcessLock;     \/* An exclusive process lock is held *\/$/;"	m	struct:unixInodeInfo	file:
bPurgeable	pcache.c	/^  u8 bPurgeable;                      \/* True if pages are on backing store *\/$/;"	m	struct:PCache	file:
bPurgeable	pcache1.c	/^  int bPurgeable;                     \/* True if cache is purgeable *\/$/;"	m	struct:PCache1	file:
bPurgeable	test_pcache.c	/^  int bPurgeable;           \/* True if the page cache is purgeable *\/$/;"	m	struct:testpcache	file:
bRec	test_sqllog.c	/^  int bRec;                       \/* True if testSqllog() is called rec. *\/$/;"	m	struct:SLGlobal	file:
bReserved	os_win.c	/^  BOOL bReserved;     \/* Indicates a reserved lock has been obtained *\/$/;"	m	struct:winceLock	file:
bReuse	test_sqllog.c	/^  int bReuse;                     \/* True to avoid extra copies of db files *\/$/;"	m	struct:SLGlobal	file:
bSpanIsTab	sqliteInt.h	/^    unsigned bSpanIsTab :1; \/* zSpan holds DB.TABLE.COLUMN *\/$/;"	m	struct:ExprList::ExprList_item
bSyncSet	sqliteInt.h	/^  u8 bSyncSet;         \/* True if "PRAGMA synchronous=N" has been run *\/$/;"	m	struct:Db
bTruncate	test_multiplex.c	/^  unsigned char bTruncate;         \/* TRUE to enable truncation of databases *\/$/;"	m	struct:multiplexGroup	file:
bUnderPressure	pcache1.c	/^  int bUnderPressure;            \/* True if low on PAGECACHE memory *\/$/;"	m	struct:PCacheGlobal	file:
bUnordered	sqliteInt.h	/^  unsigned bUnordered:1;   \/* Use this index for == or IN queries only *\/$/;"	m	struct:Index
bUseCis	sqliteInt.h	/^  int bUseCis;                      \/* Use covering indices for full-scans *\/$/;"	m	struct:Sqlite3Config
bUseFetch	pager.c	/^  u8 bUseFetch;               \/* True to use xFetch() *\/$/;"	m	struct:Pager	file:
bUsePMA	vdbesort.c	/^  u8 bUsePMA;                     \/* True if one or more PMAs created *\/$/;"	m	struct:VdbeSorter	file:
bUseThread	vdbesort.c	/^  int bUseThread;                 \/* True to use a bg thread for this object *\/$/;"	m	struct:IncrMerger	file:
bUseThreads	vdbesort.c	/^  u8 bUseThreads;                 \/* True to use background threads *\/$/;"	m	struct:VdbeSorter	file:
bVarOnly	sqliteInt.h	/^  int bVarOnly;       \/* Check for variable references only *\/$/;"	m	struct:DbFixer
bWal	test_superlock.c	/^  int bWal;                       \/* True if db is a WAL database *\/$/;"	m	struct:Superlock	file:
backslashOn	shell.c	/^  int backslashOn;       \/* Resolve C-style \\x escapes in SQL input text *\/$/;"	m	struct:ShellState	file:
backtrace	mem2.c	37;"	d	file:
backtrace_symbols_fd	mem2.c	38;"	d	file:
backupOnePage	backup.c	/^static int backupOnePage($/;"	f	file:
backupTestCmd	test_backup.c	/^static int SQLITE_TCLAPI backupTestCmd($/;"	f	file:
backupTestFinish	test_backup.c	/^static void SQLITE_TCLAPI backupTestFinish(ClientData clientData){$/;"	f	file:
backupTestInit	test_backup.c	/^static int SQLITE_TCLAPI backupTestInit($/;"	f	file:
backupTruncateFile	backup.c	/^static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){$/;"	f	file:
backupUpdate	backup.c	/^static SQLITE_NOINLINE void backupUpdate($/;"	f	file:
backup_finish	sqlite3ext.h	/^  int (*backup_finish)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines
backup_init	sqlite3ext.h	/^  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines
backup_pagecount	sqlite3ext.h	/^  int (*backup_pagecount)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines
backup_remaining	sqlite3ext.h	/^  int (*backup_remaining)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines
backup_step	sqlite3ext.h	/^  int (*backup_step)(sqlite3_backup*,int);$/;"	m	struct:sqlite3_api_routines
bail_on_error	shell.c	/^static int bail_on_error = 0;$/;"	v	file:
balance	btree.c	/^static int balance(BtCursor *pCur){$/;"	f	file:
balance_deeper	btree.c	/^static int balance_deeper(MemPage *pRoot, MemPage **ppChild){$/;"	f	file:
balance_nonroot	btree.c	/^static int balance_nonroot($/;"	f	file:
balance_quick	btree.c	/^static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){$/;"	f	file:
base	dbstat.c	/^  sqlite3_vtab base;$/;"	m	struct:StatTable	file:
base	dbstat.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:StatCursor	file:
base	printf.c	/^  etByte base;             \/* The base for radix conversion *\/$/;"	m	struct:et_info	file:
base	test8.c	/^  sqlite3_vtab base;$/;"	m	struct:echo_vtab	file:
base	test8.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:echo_cursor	file:
base	test_bestindex.c	/^  sqlite3_vtab base;$/;"	m	struct:tcl_vtab	file:
base	test_bestindex.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:tcl_cursor	file:
base	test_demovfs.c	/^  sqlite3_file base;              \/* Base class. Must be first. *\/$/;"	m	struct:DemoFile	file:
base	test_devsym.c	/^  sqlite3_file base;$/;"	m	struct:devsym_file	file:
base	test_fs.c	/^  sqlite3_vtab base;$/;"	m	struct:FsdirVtab	file:
base	test_fs.c	/^  sqlite3_vtab base;$/;"	m	struct:FstreeVtab	file:
base	test_fs.c	/^  sqlite3_vtab base;$/;"	m	struct:fs_vtab	file:
base	test_fs.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:FsdirCsr	file:
base	test_fs.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:FstreeCsr	file:
base	test_fs.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:fs_cursor	file:
base	test_intarray.c	/^  sqlite3_vtab base;            \/* Base class *\/$/;"	m	struct:intarray_vtab	file:
base	test_intarray.c	/^  sqlite3_vtab_cursor base;    \/* Base class *\/$/;"	m	struct:intarray_cursor	file:
base	test_journal.c	/^  sqlite3_file base;$/;"	m	struct:jt_file	file:
base	test_multiplex.c	/^  sqlite3_file base;              \/* Base class - must be first *\/$/;"	m	struct:multiplexConn	file:
base	test_onefile.c	/^  sqlite3_file base;$/;"	m	struct:fs_file	file:
base	test_onefile.c	/^  sqlite3_file base;$/;"	m	struct:tmp_file	file:
base	test_onefile.c	/^  sqlite3_vfs base;$/;"	m	struct:fs_vfs_t	file:
base	test_osinst.c	/^  sqlite3_file base;              \/* IO methods *\/$/;"	m	struct:VfslogFile	file:
base	test_osinst.c	/^  sqlite3_vfs base;               \/* VFS methods *\/$/;"	m	struct:VfslogVfs	file:
base	test_osinst.c	/^  sqlite3_vtab base;              \/* Base class *\/$/;"	m	struct:VfslogVtab	file:
base	test_osinst.c	/^  sqlite3_vtab_cursor base;       \/* Base class *\/$/;"	m	struct:VfslogCsr	file:
base	test_quota.c	/^  sqlite3_file base;              \/* Base class - must be first *\/$/;"	m	struct:quotaConn	file:
base	test_schema.c	/^  sqlite3_vtab base;$/;"	m	struct:schema_vtab	file:
base	test_schema.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:schema_cursor	file:
base	test_tclvar.c	/^  sqlite3_vtab base;$/;"	m	struct:tclvar_vtab	file:
base	test_tclvar.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:tclvar_cursor	file:
base	test_thread.c	/^  Tcl_Event base;          \/* Base class of type Tcl_Event *\/$/;"	m	struct:EvalEvent	file:
base	test_vfs.c	/^  sqlite3_file base;              \/* Base class.  Must be first *\/$/;"	m	struct:TestvfsFile	file:
base	test_vfstrace.c	/^  sqlite3_file base;        \/* Base class.  Must be first *\/$/;"	m	struct:vfstrace_file	file:
beginTimer	shell.c	/^static void beginTimer(void){$/;"	f	file:
bfs_query_func	test_rtree.c	/^static int bfs_query_func(sqlite3_rtree_query_info *p){$/;"	f	file:
bft	vdbeInt.h	/^typedef unsigned bft;  \/* Bit Field Type *\/$/;"	t
bigEndCksum	wal.c	/^  u8 bigEndCksum;                 \/* True if checksums in WAL are big-endian *\/$/;"	m	struct:WalIndexHdr	file:
binCollFunc	main.c	/^static int binCollFunc($/;"	f	file:
binarize	test5.c	/^static int SQLITE_TCLAPI binarize($/;"	f	file:
binaryCompareP5	expr.c	/^static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){$/;"	f	file:
bindText	vdbeapi.c	/^static int bindText($/;"	f	file:
bind_blob	sqlite3ext.h	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
bind_blob64	sqlite3ext.h	/^  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines
bind_double	sqlite3ext.h	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines
bind_int	sqlite3ext.h	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines
bind_int64	sqlite3ext.h	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines
bind_null	sqlite3ext.h	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
bind_parameter_count	sqlite3ext.h	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
bind_parameter_index	sqlite3ext.h	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines
bind_parameter_name	sqlite3ext.h	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
bind_text	sqlite3ext.h	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
bind_text16	sqlite3ext.h	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
bind_text64	sqlite3ext.h	/^  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines
bind_value	sqlite3ext.h	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
bind_zeroblob	sqlite3ext.h	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines
bind_zeroblob64	sqlite3ext.h	/^  int (*bind_zeroblob64)(sqlite3_stmt*, int, sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines
bits	tclsqlite.c	/^  uint32 bits[2];$/;"	m	struct:MD5Context	file:
blobHandleFromObj	test1.c	/^static int SQLITE_TCLAPI blobHandleFromObj($/;"	f	file:
blobHandleFromObj	test_blob.c	/^static int blobHandleFromObj($/;"	f	file:
blobReadWrite	vdbeblob.c	/^static int blobReadWrite($/;"	f	file:
blobSeekToRow	vdbeblob.c	/^static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){$/;"	f	file:
blobStringFromObj	test_blob.c	/^static char *blobStringFromObj(Tcl_Obj *pObj){$/;"	f	file:
blob_bytes	sqlite3ext.h	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines
blob_close	sqlite3ext.h	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines
blob_open	sqlite3ext.h	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,$/;"	m	struct:sqlite3_api_routines
blob_read	sqlite3ext.h	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines
blob_reopen	sqlite3ext.h	/^  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines
blob_write	sqlite3ext.h	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines
blocking_prepare_v2_proc	test_thread.c	/^static Tcl_ObjCmdProc blocking_prepare_v2_proc;$/;"	v	file:
blocking_prepare_v2_proc	test_thread.c	/^static int SQLITE_TCLAPI blocking_prepare_v2_proc($/;"	f	file:
blocking_step_proc	test_thread.c	/^static Tcl_ObjCmdProc blocking_step_proc;$/;"	v	file:
blocking_step_proc	test_thread.c	/^static int SQLITE_TCLAPI blocking_step_proc($/;"	f	file:
booleanValue	shell.c	/^static int booleanValue(char *zArg){$/;"	f	file:
broken_init	test_autoext.c	/^static int broken_init($/;"	f	file:
btree	whereInt.h	/^    } btree;$/;"	m	union:WhereLoop::__anon5	typeref:struct:WhereLoop::__anon5::__anon6
btreeClearHasContent	btree.c	/^static void btreeClearHasContent(BtShared *pBt){$/;"	f	file:
btreeCreateTable	btree.c	/^static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){$/;"	f	file:
btreeCursor	btree.c	/^static int btreeCursor($/;"	f	file:
btreeDropTable	btree.c	/^static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){$/;"	f	file:
btreeEndTransaction	btree.c	/^static void btreeEndTransaction(Btree *p){$/;"	f	file:
btreeGetHasContent	btree.c	/^static int btreeGetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreeGetPage	btree.c	/^static int btreeGetPage($/;"	f	file:
btreeGetUnusedPage	btree.c	/^static int btreeGetUnusedPage($/;"	f	file:
btreeHeapInsert	btree.c	/^static void btreeHeapInsert(u32 *aHeap, u32 x){$/;"	f	file:
btreeHeapPull	btree.c	/^static int btreeHeapPull(u32 *aHeap, u32 *pOut){$/;"	f	file:
btreeInitPage	btree.c	/^static int btreeInitPage(MemPage *pPage){$/;"	f	file:
btreeIntegrity	btreeInt.h	642;"	d
btreeInvokeBusyHandler	btree.c	/^static int btreeInvokeBusyHandler(void *pArg){$/;"	f	file:
btreeLockCarefully	btmutex.c	/^static void SQLITE_NOINLINE btreeLockCarefully(Btree *p){$/;"	f	file:
btreeMask	vdbeInt.h	/^  yDbMask btreeMask;      \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe
btreeMoveto	btree.c	/^static int btreeMoveto($/;"	f	file:
btreeNext	btree.c	/^static SQLITE_NOINLINE int btreeNext(BtCursor *pCur, int *pRes){$/;"	f	file:
btreePageFromDbPage	btree.c	/^static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){$/;"	f	file:
btreePageLookup	btree.c	/^static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreePagecount	btree.c	/^static Pgno btreePagecount(BtShared *pBt){$/;"	f	file:
btreeParseCell	btree.c	/^static void btreeParseCell($/;"	f	file:
btreeParseCellAdjustSizeForOverflow	btree.c	/^static SQLITE_NOINLINE void btreeParseCellAdjustSizeForOverflow($/;"	f	file:
btreeParseCellPtr	btree.c	/^static void btreeParseCellPtr($/;"	f	file:
btreeParseCellPtrIndex	btree.c	/^static void btreeParseCellPtrIndex($/;"	f	file:
btreeParseCellPtrNoPayload	btree.c	/^static void btreeParseCellPtrNoPayload($/;"	f	file:
btreePrevious	btree.c	/^static SQLITE_NOINLINE int btreePrevious(BtCursor *pCur, int *pRes){$/;"	f	file:
btreeReleaseAllCursorPages	btree.c	/^static void btreeReleaseAllCursorPages(BtCursor *pCur){$/;"	f	file:
btreeRestoreCursorPosition	btree.c	/^static int btreeRestoreCursorPosition(BtCursor *pCur){$/;"	f	file:
btreeSetHasContent	btree.c	/^static int btreeSetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btree_begin_transaction	test3.c	/^static int SQLITE_TCLAPI btree_begin_transaction($/;"	f	file:
btree_close	test3.c	/^static int SQLITE_TCLAPI btree_close($/;"	f	file:
btree_close_cursor	test3.c	/^static int SQLITE_TCLAPI btree_close_cursor($/;"	f	file:
btree_cursor	test3.c	/^static int SQLITE_TCLAPI btree_cursor($/;"	f	file:
btree_eof	test3.c	/^static int SQLITE_TCLAPI btree_eof($/;"	f	file:
btree_first	test3.c	/^static int SQLITE_TCLAPI btree_first($/;"	f	file:
btree_from_db	test3.c	/^static int SQLITE_TCLAPI btree_from_db($/;"	f	file:
btree_insert	test3.c	/^static int SQLITE_TCLAPI btree_insert($/;"	f	file:
btree_ismemdb	test3.c	/^static int SQLITE_TCLAPI btree_ismemdb($/;"	f	file:
btree_next	test3.c	/^static int SQLITE_TCLAPI btree_next($/;"	f	file:
btree_open	test3.c	/^static int SQLITE_TCLAPI btree_open($/;"	f	file:
btree_pager_stats	test3.c	/^static int SQLITE_TCLAPI btree_pager_stats($/;"	f	file:
btree_payload_size	test3.c	/^static int SQLITE_TCLAPI btree_payload_size($/;"	f	file:
btree_set_cache_size	test3.c	/^static int SQLITE_TCLAPI btree_set_cache_size($/;"	f	file:
btree_varint_test	test3.c	/^static int SQLITE_TCLAPI btree_varint_test($/;"	f	file:
btsFlags	btreeInt.h	/^  u16 btsFlags;         \/* Boolean parameters.  See BTS_* macros below *\/$/;"	m	struct:BtShared
buf	tclsqlite.c	/^  uint32 buf[4];$/;"	m	struct:MD5Context	file:
busy	sqliteInt.h	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo
busy	test4.c	/^  int busy;              \/* True if this thread is in use *\/$/;"	m	struct:Thread	file:
busy	test7.c	/^  volatile int busy;       \/* True if this thread is in use *\/$/;"	m	struct:Thread	file:
busyHandler	sqliteInt.h	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3
busyTimeout	sqliteInt.h	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3
busy_handler	sqlite3ext.h	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines
busy_timeout	sqlite3ext.h	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines
byteReverse	tclsqlite.c	/^static void byteReverse (unsigned char *buf, unsigned longs){$/;"	f	file:
cColSep	shell.c	/^  int cColSep;        \/* The column separator character.  (Usually ",") *\/$/;"	m	struct:ImportCtx	file:
cId	whereInt.h	/^  char cId;             \/* Symbolic ID of this loop for debugging use *\/$/;"	m	struct:WhereLoop
cMode	shell.c	/^  int cMode;             \/* temporary output mode for the current query *\/$/;"	m	struct:ShellState	file:
cRowSep	shell.c	/^  int cRowSep;        \/* The row separator character.  (Usually "\\n") *\/$/;"	m	struct:ImportCtx	file:
cTerm	shell.c	/^  int cTerm;          \/* Character that terminated the most recent field *\/$/;"	m	struct:ImportCtx	file:
c_collation_test	test9.c	/^static int SQLITE_TCLAPI c_collation_test($/;"	f	file:
c_misuse_test	test9.c	/^static int SQLITE_TCLAPI c_misuse_test($/;"	f	file:
c_realloc_test	test9.c	/^static int SQLITE_TCLAPI c_realloc_test($/;"	f	file:
cacheCtr	vdbeInt.h	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe
cacheEntryClear	expr.c	/^static void cacheEntryClear(Parse *pParse, struct yColCache *p){$/;"	f	file:
cacheIsValid	expr.c	/^static int cacheIsValid(Parse *pParse){$/;"	f	file:
cacheStatus	vdbeInt.h	/^  u32 cacheStatus;      \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor
cache_size	sqliteInt.h	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema
cachedCellSize	btree.c	/^static u16 cachedCellSize(CellArray *p, int N){$/;"	f	file:
callCollNeeded	callback.c	/^static void callCollNeeded(sqlite3 *db, int enc, const char *zName){$/;"	f	file:
callFinaliser	vtab.c	/^static void callFinaliser(sqlite3 *db, int offset){$/;"	f	file:
callStatGet	analyze.c	/^static void callStatGet(Vdbe *v, int regStat4, int iParam, int regOut){$/;"	f	file:
callback	shell.c	/^static int callback(void *pArg, int nArg, char **azArg, char **azCol){$/;"	f	file:
cancelAutoExtBrokenObjCmd	test_autoext.c	/^static int SQLITE_TCLAPI cancelAutoExtBrokenObjCmd($/;"	f	file:
cancelAutoExtCubeObjCmd	test_autoext.c	/^static int SQLITE_TCLAPI cancelAutoExtCubeObjCmd($/;"	f	file:
cancelAutoExtSqrObjCmd	test_autoext.c	/^static int SQLITE_TCLAPI cancelAutoExtSqrObjCmd($/;"	f	file:
cancel_auto_extension	sqlite3ext.h	/^  int (*cancel_auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines
cannotBeFunction	select.c	/^static int cannotBeFunction(Parse *pParse, struct SrcList_item *pFrom){$/;"	f	file:
cantopen_err	test_vfs.c	/^  TestFaultInject cantopen_err;$/;"	m	struct:Testvfs	file:
carglist	parse.y	/^carglist ::= .$/;"	l
carglist	parse.y	/^carglist ::= carglist ccons.$/;"	l
ccons	parse.y	/^ccons ::= CHECK LP expr(X) RP.   {sqlite3AddCheckConstraint(pParse,X.pExpr);}$/;"	l
ccons	parse.y	/^ccons ::= COLLATE ids(C).        {sqlite3AddCollateType(pParse, &C);}$/;"	l
ccons	parse.y	/^ccons ::= CONSTRAINT nm(X).           {pParse->constraintName = X;}$/;"	l
ccons	parse.y	/^ccons ::= DEFAULT LP expr(X) RP.      {sqlite3AddDefaultValue(pParse,&X);}$/;"	l
ccons	parse.y	/^ccons ::= DEFAULT MINUS(A) term(X).      {$/;"	l
ccons	parse.y	/^ccons ::= DEFAULT PLUS term(X).       {sqlite3AddDefaultValue(pParse,&X);}$/;"	l
ccons	parse.y	/^ccons ::= DEFAULT id(X).              {$/;"	l
ccons	parse.y	/^ccons ::= DEFAULT term(X).            {sqlite3AddDefaultValue(pParse,&X);}$/;"	l
ccons	parse.y	/^ccons ::= NOT NULL onconf(R).    {sqlite3AddNotNull(pParse, R);}$/;"	l
ccons	parse.y	/^ccons ::= NULL onconf.$/;"	l
ccons	parse.y	/^ccons ::= PRIMARY KEY sortorder(Z) onconf(R) autoinc(I).$/;"	l
ccons	parse.y	/^ccons ::= REFERENCES nm(T) eidlist_opt(TA) refargs(R).$/;"	l
ccons	parse.y	/^ccons ::= UNIQUE onconf(R).      {sqlite3CreateIndex(pParse,0,0,0,0,R,0,0,0,0,$/;"	l
ccons	parse.y	/^ccons ::= defer_subclause(D).    {sqlite3DeferForeignKey(pParse,D);}$/;"	l
cdateFunc	date.c	/^static void cdateFunc($/;"	f	file:
cellOffset	btreeInt.h	/^  u16 cellOffset;      \/* Index in aData of first cell pointer *\/$/;"	m	struct:MemPage
cellSize	btree.c	/^static u16 cellSize(MemPage *pPage, int iCell){$/;"	f	file:
cellSizePtr	btree.c	/^static u16 cellSizePtr(MemPage *pPage, u8 *pCell){$/;"	f	file:
cellSizePtrNoPayload	btree.c	/^static u16 cellSizePtrNoPayload(MemPage *pPage, u8 *pCell){$/;"	f	file:
centerx	test_rtree.c	/^  double centerx;$/;"	m	struct:Circle	file:
centery	test_rtree.c	/^  double centery;$/;"	m	struct:Circle	file:
cf2Destroy	test1.c	/^static void cf2Destroy(void *pUser){$/;"	f	file:
cf2Final	test1.c	/^static void cf2Final(sqlite3_context *ctx){$/;"	f	file:
cf2Func	test1.c	/^static void cf2Func(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){$/;"	f	file:
cf2Step	test1.c	/^static void cf2Step(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){$/;"	f	file:
cfAccess	test6.c	/^static int cfAccess($/;"	f	file:
cfCheckReservedLock	test6.c	/^static int cfCheckReservedLock(sqlite3_file *pFile, int *pResOut){$/;"	f	file:
cfClose	test6.c	/^static int cfClose(sqlite3_file *pFile){$/;"	f	file:
cfCurrentTime	test6.c	/^static int cfCurrentTime(sqlite3_vfs *pCfVfs, double *pTimeOut){$/;"	f	file:
cfDelete	test6.c	/^static int cfDelete(sqlite3_vfs *pCfVfs, const char *zPath, int dirSync){$/;"	f	file:
cfDeviceCharacteristics	test6.c	/^static int cfDeviceCharacteristics(sqlite3_file *pFile){$/;"	f	file:
cfDlClose	test6.c	/^static void cfDlClose(sqlite3_vfs *pCfVfs, void *pHandle){$/;"	f	file:
cfDlError	test6.c	/^static void cfDlError(sqlite3_vfs *pCfVfs, int nByte, char *zErrMsg){$/;"	f	file:
cfDlOpen	test6.c	/^static void *cfDlOpen(sqlite3_vfs *pCfVfs, const char *zPath){$/;"	f	file:
cfDlSym	test6.c	/^static void (*cfDlSym(sqlite3_vfs *pCfVfs, void *pH, const char *zSym))(void){$/;"	f	file:
cfFileControl	test6.c	/^static int cfFileControl(sqlite3_file *pFile, int op, void *pArg){$/;"	f	file:
cfFileSize	test6.c	/^static int cfFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){$/;"	f	file:
cfFullPathname	test6.c	/^static int cfFullPathname($/;"	f	file:
cfGetLastError	test6.c	/^static int cfGetLastError(sqlite3_vfs *pCfVfs, int n, char *z){$/;"	f	file:
cfLock	test6.c	/^static int cfLock(sqlite3_file *pFile, int eLock){$/;"	f	file:
cfOpen	test6.c	/^static int cfOpen($/;"	f	file:
cfRandomness	test6.c	/^static int cfRandomness(sqlite3_vfs *pCfVfs, int nByte, char *zBufOut){$/;"	f	file:
cfRead	test6.c	/^static int cfRead($/;"	f	file:
cfSectorSize	test6.c	/^static int cfSectorSize(sqlite3_file *pFile){$/;"	f	file:
cfShmBarrier	test6.c	/^static void cfShmBarrier(sqlite3_file *pFile){$/;"	f	file:
cfShmLock	test6.c	/^static int cfShmLock(sqlite3_file *pFile, int ofst, int n, int flags){$/;"	f	file:
cfShmMap	test6.c	/^static int cfShmMap($/;"	f	file:
cfShmUnmap	test6.c	/^static int cfShmUnmap(sqlite3_file *pFile, int delFlag){$/;"	f	file:
cfSleep	test6.c	/^static int cfSleep(sqlite3_vfs *pCfVfs, int nMicro){$/;"	f	file:
cfSync	test6.c	/^static int cfSync(sqlite3_file *pFile, int flags){$/;"	f	file:
cfTruncate	test6.c	/^static int cfTruncate(sqlite3_file *pFile, sqlite_int64 size){$/;"	f	file:
cfUnlock	test6.c	/^static int cfUnlock(sqlite3_file *pFile, int eLock){$/;"	f	file:
cfWrite	test6.c	/^static int cfWrite($/;"	f	file:
chain	hash.h	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht
changeCntOn	vdbeInt.h	/^  bft changeCntOn:1;      \/* True to update the change-counter *\/$/;"	m	struct:Vdbe
changeCountDone	pager.c	/^  u8 changeCountDone;         \/* Set after incrementing the change-counter *\/$/;"	m	struct:Pager	file:
changeTempStorage	pragma.c	/^static int changeTempStorage(Parse *pParse, const char *zStorageType){$/;"	f	file:
changes	func.c	/^static void changes($/;"	f	file:
changes	sqlite3ext.h	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
channel	tclsqlite.c	/^  Tcl_Channel channel;      \/* Channel identifier *\/$/;"	m	struct:IncrblobChannel	file:
charFunc	func.c	/^static void charFunc($/;"	f	file:
charMap	tokenize.c	109;"	d	file:
charMap	tokenize.c	112;"	d	file:
charset	printf.c	/^  etByte charset;          \/* Offset into aDigits[] of the digits string *\/$/;"	m	struct:et_info	file:
checkActiveVdbeCnt	vdbeaux.c	/^static void checkActiveVdbeCnt(sqlite3 *db){$/;"	f	file:
checkActiveVdbeCnt	vdbeaux.c	2437;"	d	file:
checkAppendMsg	btree.c	/^static void checkAppendMsg($/;"	f	file:
checkColumnOverlap	trigger.c	/^static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){$/;"	f	file:
checkConstraintExprNode	insert.c	/^static int checkConstraintExprNode(Walker *pWalker, Expr *pExpr){$/;"	f	file:
checkConstraintUnchanged	insert.c	/^static int checkConstraintUnchanged(Expr *pExpr, int *aiChng, int chngRowid){$/;"	f	file:
checkForMultiColumnSelectError	select.c	/^static int checkForMultiColumnSelectError($/;"	f	file:
checkList	btree.c	/^static void checkList($/;"	f	file:
checkListProperties	notify.c	/^static void checkListProperties(sqlite3 *db){$/;"	f	file:
checkListProperties	notify.c	76;"	d	file:
checkPage	pager.c	/^static void checkPage(PgHdr *pPg){$/;"	f	file:
checkProfileCallback	vdbeapi.c	82;"	d	file:
checkProfileCallback	vdbeapi.c	85;"	d	file:
checkPtrmap	btree.c	/^static void checkPtrmap($/;"	f	file:
checkReadTransaction	backup.c	/^static int checkReadTransaction(sqlite3 *db, Btree *p){$/;"	f	file:
checkRef	btree.c	/^static int checkRef(IntegrityCk *pCheck, Pgno iPage){$/;"	f	file:
checkSavepointCount	vdbe.c	/^static int checkSavepointCount(sqlite3 *db){$/;"	f	file:
checkSchema	sqliteInt.h	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse
checkTreePage	btree.c	/^static int checkTreePage($/;"	f	file:
childPtrSize	btreeInt.h	/^  u8 childPtrSize;     \/* 0 if leaf==1.  4 if leaf==0 *\/$/;"	m	struct:MemPage
circle_del	test_rtree.c	/^static void circle_del(void *p){$/;"	f	file:
circle_geom	test_rtree.c	/^static int circle_geom($/;"	f	file:
circle_query_func	test_rtree.c	/^static int circle_query_func(sqlite3_rtree_query_info *p){$/;"	f	file:
ckBase	sqliteInt.h	/^  int ckBase;          \/* Base register of data during check constraints *\/$/;"	m	struct:Parse
ckptLock	wal.c	/^  u8 ckptLock;               \/* True if holding a checkpoint lock *\/$/;"	m	struct:Wal	file:
ckptSyncFlags	pager.c	/^  u8 ckptSyncFlags;           \/* SYNC_NORMAL or SYNC_FULL for checkpoint *\/$/;"	m	struct:Pager	file:
cksumInit	pager.c	/^  u32 cksumInit;              \/* Quasi-random value added to every checksum *\/$/;"	m	struct:Pager	file:
clang_sanitize_address	test1.c	/^static int SQLITE_TCLAPI clang_sanitize_address($/;"	f	file:
clearAllSharedCacheTableLocks	btree.c	/^static void clearAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
clearAllSharedCacheTableLocks	btree.c	109;"	d	file:
clearCell	btree.c	/^static int clearCell($/;"	f	file:
clearDatabasePage	btree.c	/^static int clearDatabasePage($/;"	f	file:
clearSelect	select.c	/^static void clearSelect(sqlite3 *db, Select *p, int bFree){$/;"	f	file:
clearYMD_HMS_TZ	date.c	/^static void clearYMD_HMS_TZ(DateTime *p){$/;"	f	file:
clear_bindings	sqlite3ext.h	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
clientMutex	test_server.c	/^  pthread_mutex_t clientMutex; \/* Hold this mutex to access the message *\/$/;"	m	struct:SqlMessage	file:
clientWakeup	test_server.c	/^  pthread_cond_t clientWakeup; \/* Signal to wake up the client *\/$/;"	m	struct:SqlMessage	file:
client_main	test7.c	/^static void *client_main(void *pArg){$/;"	f	file:
client_wait	test7.c	/^static void client_wait(Thread *p){$/;"	f	file:
clock_seconds_proc	test_thread.c	/^static Tcl_ObjCmdProc clock_seconds_proc;$/;"	v	file:
clock_seconds_proc	test_thread.c	/^static int SQLITE_TCLAPI clock_seconds_proc($/;"	f	file:
close	sqlite3ext.h	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
closeAllCursors	vdbeaux.c	/^static void closeAllCursors(Vdbe *p){$/;"	f	file:
closeCursorsInFrame	vdbeaux.c	/^static void closeCursorsInFrame(Vdbe *p){$/;"	f	file:
closeIncrblobChannels	tclsqlite.c	/^static void closeIncrblobChannels(SqliteDb *pDb){$/;"	f	file:
closeIncrblobChannels	tclsqlite.c	418;"	d	file:
closePendingFds	os_unix.c	/^static void closePendingFds(unixFile *pFile){$/;"	f	file:
closeTransaction	test_journal.c	/^static void closeTransaction(jt_file *p){$/;"	f	file:
closeUnixFile	os_unix.c	/^static int closeUnixFile(sqlite3_file *id){$/;"	f	file:
close_v2	sqlite3ext.h	/^  int (*close_v2)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
closedir	test_windirent.c	/^INT closedir($/;"	f
cmd	parse.y	/^cmd ::= ALTER TABLE add_column_fullname$/;"	l
cmd	parse.y	/^cmd ::= ALTER TABLE fullname(X) RENAME TO nm(Z). {$/;"	l
cmd	parse.y	/^cmd ::= ANALYZE nm(X) dbnm(Y).  {sqlite3Analyze(pParse, &X, &Y);}$/;"	l
cmd	parse.y	/^cmd ::= ANALYZE.                {sqlite3Analyze(pParse, 0, 0);}$/;"	l
cmd	parse.y	/^cmd ::= ATTACH database_kw_opt expr(F) AS expr(D) key_opt(K). {$/;"	l
cmd	parse.y	/^cmd ::= BEGIN transtype(Y) trans_opt.  {sqlite3BeginTransaction(pParse, Y);}$/;"	l
cmd	parse.y	/^cmd ::= COMMIT trans_opt.      {sqlite3CommitTransaction(pParse);}$/;"	l
cmd	parse.y	/^cmd ::= DETACH database_kw_opt expr(D). {$/;"	l
cmd	parse.y	/^cmd ::= DROP INDEX ifexists(E) fullname(X).   {sqlite3DropIndex(pParse, X, E);}$/;"	l
cmd	parse.y	/^cmd ::= DROP TABLE ifexists(E) fullname(X). {$/;"	l
cmd	parse.y	/^cmd ::= DROP TRIGGER ifexists(NOERR) fullname(X). {$/;"	l
cmd	parse.y	/^cmd ::= DROP VIEW ifexists(E) fullname(X). {$/;"	l
cmd	parse.y	/^cmd ::= END trans_opt.         {sqlite3CommitTransaction(pParse);}$/;"	l
cmd	parse.y	/^cmd ::= PRAGMA nm(X) dbnm(Z) EQ minus_num(Y). $/;"	l
cmd	parse.y	/^cmd ::= PRAGMA nm(X) dbnm(Z) EQ nmnum(Y).    {sqlite3Pragma(pParse,&X,&Z,&Y,0);}$/;"	l
cmd	parse.y	/^cmd ::= PRAGMA nm(X) dbnm(Z) LP minus_num(Y) RP.$/;"	l
cmd	parse.y	/^cmd ::= PRAGMA nm(X) dbnm(Z) LP nmnum(Y) RP. {sqlite3Pragma(pParse,&X,&Z,&Y,0);}$/;"	l
cmd	parse.y	/^cmd ::= PRAGMA nm(X) dbnm(Z).                {sqlite3Pragma(pParse,&X,&Z,0,0);}$/;"	l
cmd	parse.y	/^cmd ::= REINDEX nm(X) dbnm(Y).  {sqlite3Reindex(pParse, &X, &Y);}$/;"	l
cmd	parse.y	/^cmd ::= REINDEX.                {sqlite3Reindex(pParse, 0, 0);}$/;"	l
cmd	parse.y	/^cmd ::= RELEASE savepoint_opt nm(X). {$/;"	l
cmd	parse.y	/^cmd ::= ROLLBACK trans_opt TO savepoint_opt nm(X). {$/;"	l
cmd	parse.y	/^cmd ::= ROLLBACK trans_opt.    {sqlite3RollbackTransaction(pParse);}$/;"	l
cmd	parse.y	/^cmd ::= SAVEPOINT nm(X). {$/;"	l
cmd	parse.y	/^cmd ::= VACUUM nm.             {sqlite3Vacuum(pParse);}$/;"	l
cmd	parse.y	/^cmd ::= VACUUM.                {sqlite3Vacuum(pParse);}$/;"	l
cmd	parse.y	/^cmd ::= create_table create_table_args.$/;"	l
cmd	parse.y	/^cmd ::= create_vtab LP vtabarglist RP(X).  {sqlite3VtabFinishParse(pParse,&X);}$/;"	l
cmd	parse.y	/^cmd ::= create_vtab.                       {sqlite3VtabFinishParse(pParse,0);}$/;"	l
cmd	parse.y	/^cmd ::= createkw trigger_decl(A) BEGIN trigger_cmd_list(S) END(Z). {$/;"	l
cmd	parse.y	/^cmd ::= createkw(S) uniqueflag(U) INDEX ifnotexists(NE) nm(X) dbnm(D)$/;"	l
cmd	parse.y	/^cmd ::= createkw(X) temp(T) VIEW ifnotexists(E) nm(Y) dbnm(Z) eidlist_opt(C)$/;"	l
cmd	parse.y	/^cmd ::= select(X).  {$/;"	l
cmd	parse.y	/^cmd ::= with(C) DELETE FROM fullname(X) indexed_opt(I) where_opt(W) $/;"	l
cmd	parse.y	/^cmd ::= with(C) DELETE FROM fullname(X) indexed_opt(I) where_opt(W). {$/;"	l
cmd	parse.y	/^cmd ::= with(C) UPDATE orconf(R) fullname(X) indexed_opt(I) SET setlist(Y)$/;"	l
cmd	parse.y	/^cmd ::= with(W) insert_cmd(R) INTO fullname(X) idlist_opt(F) DEFAULT VALUES.$/;"	l
cmd	parse.y	/^cmd ::= with(W) insert_cmd(R) INTO fullname(X) idlist_opt(F) select(S). {$/;"	l
cmdline_option_value	shell.c	/^static char *cmdline_option_value(int argc, char **argv, int i){$/;"	f	file:
cmdlist	parse.y	/^cmdlist ::= cmdlist ecmd.$/;"	l
cmdlist	parse.y	/^cmdlist ::= ecmd.$/;"	l
cmdx	parse.y	/^cmdx ::= cmd.           { sqlite3FinishCoding(pParse); }$/;"	l
cnt	func.c	/^  i64 cnt;          \/* Number of elements summed *\/$/;"	m	struct:SumCtx	file:
cnt	mutex_noop.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	file:
cnt	shell.c	/^  int cnt;               \/* Number of records displayed so far *\/$/;"	m	struct:ShellState	file:
cnt	vdbe.h	/^  u32 cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp
codeAllEqualityTerms	wherecode.c	/^static int codeAllEqualityTerms($/;"	f	file:
codeApplyAffinity	wherecode.c	/^static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){$/;"	f	file:
codeAttach	attach.c	/^static void codeAttach($/;"	f	file:
codeCompare	expr.c	/^static int codeCompare($/;"	f	file:
codeCursorHint	wherecode.c	/^static void codeCursorHint($/;"	f	file:
codeCursorHint	wherecode.c	813;"	d	file:
codeCursorHintCheckExpr	wherecode.c	/^static int codeCursorHintCheckExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
codeCursorHintFixExpr	wherecode.c	/^static int codeCursorHintFixExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
codeCursorHintIsOrFunction	wherecode.c	/^static int codeCursorHintIsOrFunction(Walker *pWalker, Expr *pExpr){$/;"	f	file:
codeDeferredSeek	wherecode.c	/^static void codeDeferredSeek($/;"	f	file:
codeDistinct	select.c	/^static void codeDistinct($/;"	f	file:
codeEqualityTerm	wherecode.c	/^static int codeEqualityTerm($/;"	f	file:
codeInteger	expr.c	/^static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){$/;"	f	file:
codeOffset	select.c	/^static void codeOffset($/;"	f	file:
codeReal	expr.c	/^static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){$/;"	f	file:
codeRowTrigger	trigger.c	/^static TriggerPrg *codeRowTrigger($/;"	f	file:
codeTableLocks	build.c	/^static void codeTableLocks(Parse *pParse){$/;"	f	file:
codeTableLocks	build.c	104;"	d	file:
codeTriggerProgram	trigger.c	/^static int codeTriggerProgram($/;"	f	file:
colFlags	sqliteInt.h	/^  u8 colFlags;     \/* Boolean properties.  See COLFLAG_ defines below *\/$/;"	m	struct:Column
colNamesSet	sqliteInt.h	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse
colSeparator	shell.c	/^  char colSeparator[20]; \/* Column separator character for several modes *\/$/;"	m	struct:ShellState	file:
colUsed	sqliteInt.h	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item
colWidth	shell.c	/^  int colWidth[100];     \/* Requested width of each column when in column mode*\/$/;"	m	struct:ShellState	file:
colWidth	shell.c	/^  int colWidth[100];  \/* Column widths prior to ".explain on" *\/$/;"	m	struct:SavedModeInfo	file:
collationMatch	build.c	/^static int collationMatch(const char *zColl, Index *pIndex){$/;"	f	file:
collation_needed	sqlite3ext.h	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines
collation_needed16	sqlite3ext.h	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines
columnIndex	select.c	/^static int columnIndex(Table *pTab, const char *zCol){$/;"	f	file:
columnMallocFailure	vdbeapi.c	/^static void columnMallocFailure(sqlite3_stmt *pStmt)$/;"	f	file:
columnMem	vdbeapi.c	/^static Mem *columnMem(sqlite3_stmt *pStmt, int i){$/;"	f	file:
columnName	vdbeapi.c	/^static const void *columnName($/;"	f	file:
columnNullValue	vdbeapi.c	/^static const Mem *columnNullValue(void){$/;"	f	file:
columnType	select.c	1354;"	d	file:
columnType	select.c	1356;"	d	file:
columnTypeImpl	select.c	/^static const char *columnTypeImpl($/;"	f	file:
column_blob	sqlite3ext.h	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_bytes	sqlite3ext.h	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_bytes16	sqlite3ext.h	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_count	sqlite3ext.h	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines
column_database_name	sqlite3ext.h	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_database_name16	sqlite3ext.h	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_decltype	sqlite3ext.h	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines
column_decltype16	sqlite3ext.h	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_double	sqlite3ext.h	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_int	sqlite3ext.h	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_int64	sqlite3ext.h	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_name	sqlite3ext.h	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_name16	sqlite3ext.h	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_origin_name	sqlite3ext.h	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_origin_name16	sqlite3ext.h	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_table_name	sqlite3ext.h	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_table_name16	sqlite3ext.h	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_text	sqlite3ext.h	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_text16	sqlite3ext.h	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_type	sqlite3ext.h	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_value	sqlite3ext.h	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
columnlist	parse.y	/^columnlist ::= columnlist COMMA columnname carglist.$/;"	l
columnlist	parse.y	/^columnlist ::= columnname carglist.$/;"	l
columnsInIndex	where.c	/^static Bitmask columnsInIndex(Index *pIdx){$/;"	f	file:
colv	test4.c	/^  const char *colv[100];    \/* result column names *\/$/;"	m	struct:Thread	file:
colv	test7.c	/^  const char *colv[100];   \/* result column names *\/$/;"	m	struct:Thread	file:
commit_hook	sqlite3ext.h	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines
compare2pow63	util.c	/^static int compare2pow63(const char *zNum, int incr){$/;"	f	file:
compareInfo	func.c	/^struct compareInfo {$/;"	s	file:
comparisonAffinity	expr.c	/^static char comparisonAffinity(Expr *pExpr){$/;"	f	file:
compileoption_get	sqlite3ext.h	/^  const char *(*compileoption_get)(int);$/;"	m	struct:sqlite3_api_routines
compileoption_used	sqlite3ext.h	/^  int (*compileoption_used)(const char*);$/;"	m	struct:sqlite3_api_routines
compileoptiongetFunc	func.c	/^static void compileoptiongetFunc($/;"	f	file:
compileoptionusedFunc	func.c	/^static void compileoptionusedFunc($/;"	f	file:
complete	sqlite3ext.h	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines
complete16	sqlite3ext.h	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines
completed	test4.c	/^  int completed;        \/* Number of operations completed *\/$/;"	m	struct:Thread	file:
completed	test7.c	/^  volatile int completed;  \/* Number of operations completed *\/$/;"	m	struct:Thread	file:
computeCellSize	btree.c	/^static SQLITE_NOINLINE u16 computeCellSize(CellArray *p, int N){$/;"	f	file:
computeHMS	date.c	/^static void computeHMS(DateTime *p){$/;"	f	file:
computeJD	date.c	/^static void computeJD(DateTime *p){$/;"	f	file:
computeLimitRegisters	select.c	/^static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){$/;"	f	file:
computeNumericType	vdbe.c	/^static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){$/;"	f	file:
computeYMD	date.c	/^static void computeYMD(DateTime *p){$/;"	f	file:
computeYMD_HMS	date.c	/^static void computeYMD_HMS(DateTime *p){$/;"	f	file:
conchFile	os_unix.c	/^  unixFile *conchFile;         \/* Open conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchFilePath	os_unix.c	/^  char *conchFilePath;         \/* Name of the conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchHeld	os_unix.c	/^  int conchHeld;               \/* 1 if the conch is held, -1 if lockless *\/$/;"	m	struct:proxyLockingContext	file:
cond	test_thread.c	/^  pthread_cond_t cond;               \/* Condition variable to wait on *\/$/;"	m	struct:UnlockNotification	file:
connectionIsBusy	main.c	/^static int connectionIsBusy(sqlite3 *db){$/;"	f	file:
conslist	parse.y	/^conslist ::= conslist tconscomma tcons.$/;"	l
conslist	parse.y	/^conslist ::= tcons.$/;"	l
constraintName	sqliteInt.h	/^  Token constraintName;\/* Name of the constraint currently being parsed *\/$/;"	m	struct:Parse
constructAutomaticIndex	where.c	/^static void constructAutomaticIndex($/;"	f	file:
contextMalloc	func.c	/^static void *contextMalloc(sqlite3_context *context, i64 nByte){$/;"	f	file:
context_db_handle	sqlite3ext.h	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
continuePrompt	shell.c	/^static char continuePrompt[20]; \/* Continuation prompt. default: "   ...> " *\/$/;"	v	file:
convertCompoundSelectToSubquery	select.c	/^static int convertCompoundSelectToSubquery(Walker *pWalker, Select *p){$/;"	f	file:
convertToWithoutRowidTable	build.c	/^static void convertToWithoutRowidTable(Parse *pParse, Table *pTab){$/;"	f	file:
cookieMask	sqliteInt.h	/^  yDbMask cookieMask;  \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse
cookieValue	sqliteInt.h	/^  int cookieValue[SQLITE_MAX_ATTACHED+2];  \/* Values of cookies to verify *\/$/;"	m	struct:Parse
copyNodeContent	btree.c	/^static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){$/;"	f	file:
copyPayload	btree.c	/^static int copyPayload($/;"	f	file:
corruptSchema	prepare.c	/^static void corruptSchema($/;"	f	file:
costMult	sqliteInt.h	/^  LogEst costMult;     \/* Cost multiplier for using this table *\/$/;"	m	struct:Table
count	hash.h	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht
count	hash.h	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash
countChanges	shell.c	/^  int countChanges;      \/* True to display change counts *\/$/;"	m	struct:ShellState	file:
countFinalize	func.c	/^static void countFinalize(sqlite3_context *context){$/;"	f	file:
countStep	func.c	/^static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
countValidCursors	btree.c	/^static int countValidCursors(BtShared *pBt, int wrOnly){$/;"	f	file:
counterFunc	test_func.c	/^static void counterFunc($/;"	f	file:
counterMutexAlloc	test_mutex.c	/^static sqlite3_mutex *counterMutexAlloc(int eType){$/;"	f	file:
counterMutexEnd	test_mutex.c	/^static int counterMutexEnd(void){ $/;"	f	file:
counterMutexEnter	test_mutex.c	/^static void counterMutexEnter(sqlite3_mutex *p){$/;"	f	file:
counterMutexFree	test_mutex.c	/^static void counterMutexFree(sqlite3_mutex *p){$/;"	f	file:
counterMutexHeld	test_mutex.c	/^static int counterMutexHeld(sqlite3_mutex *p){$/;"	f	file:
counterMutexInit	test_mutex.c	/^static int counterMutexInit(void){ $/;"	f	file:
counterMutexLeave	test_mutex.c	/^static void counterMutexLeave(sqlite3_mutex *p){$/;"	f	file:
counterMutexNotheld	test_mutex.c	/^static int counterMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
counterMutexTry	test_mutex.c	/^static int counterMutexTry(sqlite3_mutex *p){$/;"	f	file:
crashAppData	test6.c	/^struct crashAppData {$/;"	s	file:
crashEnableCmd	test6.c	/^static int SQLITE_TCLAPI crashEnableCmd($/;"	f	file:
crashNowCmd	test6.c	/^static int SQLITE_TCLAPI crashNowCmd($/;"	f	file:
crashParamsObjCmd	test6.c	/^static int SQLITE_TCLAPI crashParamsObjCmd($/;"	f	file:
crash_free	test6.c	/^static void crash_free(void *p){$/;"	f	file:
crash_malloc	test6.c	/^static void *crash_malloc(int nByte){$/;"	f	file:
crash_realloc	test6.c	/^static void *crash_realloc(void *p, int n){$/;"	f	file:
createAggContext	vdbeapi.c	/^static SQLITE_NOINLINE void *createAggContext(sqlite3_context *p, int nByte){$/;"	f	file:
createCollation	main.c	/^static int createCollation($/;"	f	file:
createIncrblobChannel	tclsqlite.c	/^static int createIncrblobChannel($/;"	f	file:
createMask	where.c	/^static void createMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
createModule	vtab.c	/^static int createModule($/;"	f	file:
createTableStmt	build.c	/^static char *createTableStmt(sqlite3 *db, Table *p){$/;"	f	file:
create_collation	sqlite3ext.h	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines
create_collation16	sqlite3ext.h	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,$/;"	m	struct:sqlite3_api_routines
create_collation_v2	sqlite3ext.h	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines
create_function	sqlite3ext.h	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines
create_function16	sqlite3ext.h	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,$/;"	m	struct:sqlite3_api_routines
create_function_v2	sqlite3ext.h	/^  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines
create_module	sqlite3ext.h	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines
create_module_v2	sqlite3ext.h	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,$/;"	m	struct:sqlite3_api_routines
create_table	parse.y	/^create_table ::= createkw temp(T) TABLE ifnotexists(E) nm(Y) dbnm(Z). {$/;"	l
create_table_args	parse.y	/^create_table_args ::= AS select(S). {$/;"	l
create_table_args	parse.y	/^create_table_args ::= LP columnlist conslist_opt(X) RP(E) table_options(F). {$/;"	l
create_vtab	parse.y	/^create_vtab ::= createkw VIRTUAL TABLE ifnotexists(E)$/;"	l
csv_read_one_field	shell.c	/^static char *SQLITE_CDECL csv_read_one_field(ImportCtx *p){$/;"	f	file:
ctimeFunc	date.c	/^static void ctimeFunc($/;"	f	file:
ctimestampFunc	date.c	/^static void ctimestampFunc($/;"	f	file:
ctrlFlags	os_unix.c	/^  unsigned short int ctrlFlags;       \/* Behavioral bits.  UNIXFILE_* flags *\/$/;"	m	struct:unixFile	file:
ctrlFlags	os_win.c	/^  u8 ctrlFlags;           \/* Flags.  See WINFILE_* below *\/$/;"	m	struct:winFile	file:
cubeFunc	test_autoext.c	/^static void cubeFunc($/;"	f	file:
cube_context_free	test_rtree.c	/^static void cube_context_free(void *p){$/;"	f	file:
cube_geom	test_rtree.c	/^static int cube_geom($/;"	f	file:
cube_init	test_autoext.c	/^static int cube_init($/;"	f	file:
curFlags	btreeInt.h	/^  u8 curFlags;              \/* zero or more BTCF_* flags defined below *\/$/;"	m	struct:BtCursor
curIntKey	btreeInt.h	/^  u8 curIntKey;             \/* Value of apPage[0]->intKey *\/$/;"	m	struct:BtCursor
curPagerFlags	btreeInt.h	/^  u8 curPagerFlags;         \/* Flags to send to sqlite3PagerGet() *\/$/;"	m	struct:BtCursor
current	analyze.c	/^  Stat4Sample current;      \/* Current row as a Stat4Sample *\/$/;"	m	struct:Stat4Accum	file:
currentCount	mem5.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	file:
currentOut	mem5.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
currentTimeFunc	date.c	/^static void currentTimeFunc($/;"	f	file:
cursorHoldsMutex	btree.c	/^static int cursorHoldsMutex(BtCursor *p){$/;"	f	file:
cursorOwnsBtShared	btree.c	/^static int cursorOwnsBtShared(BtCursor *p){$/;"	f	file:
custom_errno	test_syscall.c	/^  int custom_errno;               \/* Current value for errno if error *\/$/;"	m	struct:TestSyscallArray	file:
cycles	vdbe.h	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp
d_attributes	test_windirent.h	/^  unsigned d_attributes;     \/* Win32 file attributes. *\/$/;"	m	struct:DIRENT
d_first	test_windirent.h	/^  DIRENT d_first;    \/* DIRENT constructed based on "_findfirst". *\/$/;"	m	struct:DIR
d_handle	test_windirent.h	/^  intptr_t d_handle; \/* Value returned by "_findfirst". *\/$/;"	m	struct:DIR
d_ino	test_windirent.h	/^  ino_t d_ino;               \/* Sequence number, do not use. *\/$/;"	m	struct:DIRENT
d_name	test_windirent.h	/^  char d_name[NAME_MAX + 1]; \/* Name within the directory. *\/$/;"	m	struct:DIRENT
d_next	test_windirent.h	/^  DIRENT d_next;     \/* DIRENT constructed based on "_findnext". *\/$/;"	m	struct:DIR
data	hash.h	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem
data_count	sqlite3ext.h	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines
databaseIsUnmoved	pager.c	/^static int databaseIsUnmoved(Pager *pPager){$/;"	f	file:
database_kw_opt	parse.y	/^database_kw_opt ::= .$/;"	l
database_kw_opt	parse.y	/^database_kw_opt ::= DATABASE.$/;"	l
database_may_be_corrupt	test1.c	/^static int SQLITE_TCLAPI database_may_be_corrupt($/;"	f	file:
database_never_corrupt	test1.c	/^static int SQLITE_TCLAPI database_never_corrupt($/;"	f	file:
dateFunc	date.c	/^static void dateFunc($/;"	f	file:
datetimeFunc	date.c	/^static void datetimeFunc($/;"	f	file:
db	analyze.c	/^  sqlite3 *db;              \/* Database connection, for malloc() *\/$/;"	m	struct:Stat4Accum	file:
db	analyze.c	/^  sqlite3 *db;$/;"	m	struct:analysisInfo	file:
db	btreeInt.h	/^  sqlite3 *db;          \/* Database connection currently using this Btree *\/$/;"	m	struct:BtShared
db	btreeInt.h	/^  sqlite3 *db;       \/* The database connection holding this btree *\/$/;"	m	struct:Btree
db	dbstat.c	/^  sqlite3 *db;$/;"	m	struct:StatTable	file:
db	rowset.c	/^  sqlite3 *db;                   \/* The database connection *\/$/;"	m	struct:RowSet	file:
db	shell.c	/^  sqlite3 *db;           \/* The database *\/$/;"	m	struct:ShellState	file:
db	sqliteInt.h	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable
db	sqliteInt.h	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum
db	sqliteInt.h	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse
db	sqliteInt.h	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:__anon18
db	sqliteInt.h	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo
db	tclsqlite.c	/^  sqlite3 *db;               \/* The "real" database structure. MUST BE FIRST *\/$/;"	m	struct:SqliteDb	file:
db	test1.c	/^  sqlite3 *db;$/;"	m	struct:SqliteDb	file:
db	test4.c	/^  sqlite3 *db;           \/* Open database *\/$/;"	m	struct:Thread	file:
db	test7.c	/^  sqlite3 *db;             \/* Open database *\/$/;"	m	struct:Thread	file:
db	test8.c	/^  sqlite3 *db;            \/* Database connection *\/$/;"	m	struct:echo_vtab	file:
db	test_bestindex.c	/^  sqlite3 *db;$/;"	m	struct:tcl_vtab	file:
db	test_fs.c	/^  sqlite3 *db;$/;"	m	struct:FstreeVtab	file:
db	test_fs.c	/^  sqlite3 *db;$/;"	m	struct:fs_vtab	file:
db	test_schema.c	/^  sqlite3 *db;$/;"	m	struct:schema_vtab	file:
db	test_sqllog.c	/^  sqlite3 *db;                    \/* Connection handle *\/$/;"	m	struct:SLConn	file:
db	test_superlock.c	/^  sqlite3 *db;                    \/* Database handle used to lock db *\/$/;"	m	struct:Superlock	file:
db	vdbeInt.h	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe
db	vdbeInt.h	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:Mem
db	vdbeblob.c	/^  sqlite3 *db;            \/* The associated database *\/$/;"	m	struct:Incrblob	file:
db	vdbesort.c	/^  sqlite3 *db;                    \/* Database connection *\/$/;"	m	struct:VdbeSorter	file:
dbEvalColumnValue	tclsqlite.c	/^static Tcl_Obj *dbEvalColumnValue(DbEvalContext *p, int iCol){$/;"	f	file:
dbEvalFinalize	tclsqlite.c	/^static void dbEvalFinalize(DbEvalContext *p){$/;"	f	file:
dbEvalInit	tclsqlite.c	/^static void dbEvalInit($/;"	f	file:
dbEvalRowInfo	tclsqlite.c	/^static void dbEvalRowInfo($/;"	f	file:
dbEvalStep	tclsqlite.c	/^static int dbEvalStep(DbEvalContext *p){$/;"	f	file:
dbFileSize	pager.c	/^  Pgno dbFileSize;            \/* Number of pages in the database file *\/$/;"	m	struct:Pager	file:
dbFileVers	pager.c	/^  char dbFileVers[16];        \/* Changes whenever database file changes *\/$/;"	m	struct:Pager	file:
dbFreeStmt	tclsqlite.c	/^static void dbFreeStmt(SqlPreparedStmt *pStmt){$/;"	f	file:
dbHintSize	pager.c	/^  Pgno dbHintSize;            \/* Value passed to FCNTL_SIZE_HINT call *\/$/;"	m	struct:Pager	file:
dbMallocRawFinish	malloc.c	/^static SQLITE_NOINLINE void *dbMallocRawFinish(sqlite3 *db, u64 n){$/;"	f	file:
dbOptFlags	sqliteInt.h	/^  u16 dbOptFlags;               \/* Flags to enable\/disable optimizations *\/$/;"	m	struct:sqlite3
dbOrigSize	pager.c	/^  Pgno dbOrigSize;            \/* dbSize before the current transaction *\/$/;"	m	struct:Pager	file:
dbPath	os_unix.c	/^  char *dbPath;                \/* Name of the open file *\/$/;"	m	struct:proxyLockingContext	file:
dbPath	os_unix.c	/^  const char *dbPath;             \/* Name of the open file *\/$/;"	m	struct:afpLockingContext	file:
dbPrepare	tclsqlite.c	/^static int dbPrepare($/;"	f	file:
dbPrepareAndBind	tclsqlite.c	/^static int dbPrepareAndBind($/;"	f	file:
dbReallocFinish	malloc.c	/^static SQLITE_NOINLINE void *dbReallocFinish(sqlite3 *db, void *p, u64 n){$/;"	f	file:
dbReleaseColumnNames	tclsqlite.c	/^static void dbReleaseColumnNames(DbEvalContext *p){$/;"	f	file:
dbReleaseStmt	tclsqlite.c	/^static void dbReleaseStmt($/;"	f	file:
dbSize	pager.c	/^  Pgno dbSize;                \/* Number of pages in the database *\/$/;"	m	struct:Pager	file:
dbUpdate	os_unix.c	/^  unsigned char dbUpdate;        \/* True if any part of database file changed *\/$/;"	m	struct:unixFile	file:
db_cacheflush	sqlite3ext.h	/^  int (*db_cacheflush)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
db_config	sqlite3ext.h	/^  int (*db_config)(sqlite3*,int,...);$/;"	m	struct:sqlite3_api_routines
db_enter	test1.c	/^static int SQLITE_TCLAPI db_enter($/;"	f	file:
db_filename	sqlite3ext.h	/^  const char *(*db_filename)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines
db_handle	sqlite3ext.h	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
db_int	shell.c	/^static int db_int(ShellState *p, const char *zSql){$/;"	f	file:
db_last_stmt_ptr	tclsqlite.c	/^static int SQLITE_TCLAPI db_last_stmt_ptr($/;"	f	file:
db_leave	test1.c	/^static int SQLITE_TCLAPI db_leave($/;"	f	file:
db_mutex	sqlite3ext.h	/^  sqlite3_mutex *(*db_mutex)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
db_readonly	sqlite3ext.h	/^  int (*db_readonly)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines
db_release_memory	sqlite3ext.h	/^  int (*db_release_memory)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
db_status	sqlite3ext.h	/^  int (*db_status)(sqlite3*,int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines
db_use_legacy_prepare_cmd	tclsqlite.c	/^static int SQLITE_TCLAPI db_use_legacy_prepare_cmd($/;"	f	file:
debugMutexAlloc	mutex_noop.c	/^static sqlite3_mutex *debugMutexAlloc(int id){$/;"	f	file:
debugMutexEnd	mutex_noop.c	/^static int debugMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexEnter	mutex_noop.c	/^static void debugMutexEnter(sqlite3_mutex *pX){$/;"	f	file:
debugMutexFree	mutex_noop.c	/^static void debugMutexFree(sqlite3_mutex *pX){$/;"	f	file:
debugMutexHeld	mutex_noop.c	/^static int debugMutexHeld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexInit	mutex_noop.c	/^static int debugMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexLeave	mutex_noop.c	/^static void debugMutexLeave(sqlite3_mutex *pX){$/;"	f	file:
debugMutexNotheld	mutex_noop.c	/^static int debugMutexNotheld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexTry	mutex_noop.c	/^static int debugMutexTry(sqlite3_mutex *pX){$/;"	f	file:
declareVtab	sqliteInt.h	/^  u8 declareVtab;           \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse
declare_vtab	sqlite3ext.h	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines
declare_vtab	test8.c	/^static int SQLITE_TCLAPI declare_vtab($/;"	f	file:
decodeFlags	btree.c	/^static int decodeFlags(MemPage *pPage, int flagByte){$/;"	f	file:
decodeIntArray	analyze.c	/^static void decodeIntArray($/;"	f	file:
decodeJournalHdr	test_journal.c	/^static int decodeJournalHdr($/;"	f	file:
decodeUint32	test_journal.c	/^static u32 decodeUint32(const unsigned char *z){$/;"	f	file:
default_errno	test_syscall.c	/^  int default_errno;              \/* Default value for errno following errors *\/$/;"	m	struct:TestSyscallArray	file:
default_rc	sqliteInt.h	/^  i8 default_rc;      \/* Comparison result if keys are equal *\/$/;"	m	struct:UnpackedRecord
deferredMoveto	vdbeInt.h	/^  u8 deferredMoveto;    \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor
defragmentPage	btree.c	/^static int defragmentPage(MemPage *pPage){$/;"	f	file:
delay1	test1.c	/^  int delay1;         \/* Delay before locking *\/$/;"	m	struct:win32FileLocker	file:
delay2	test1.c	/^  int delay2;         \/* Delay before unlocking *\/$/;"	m	struct:win32FileLocker	file:
deleteOnClose	test_quota.c	/^  int deleteOnClose;              \/* True to delete this file when it closes *\/$/;"	m	struct:quotaFile	file:
deleteTable	build.c	/^static void SQLITE_NOINLINE deleteTable(sqlite3 *db, Table *pTable){$/;"	f	file:
delete_collation	test1.c	/^static int SQLITE_TCLAPI delete_collation($/;"	f	file:
delete_function	test1.c	/^static int SQLITE_TCLAPI delete_function($/;"	f	file:
demoAccess	test_demovfs.c	/^static int demoAccess($/;"	f	file:
demoCheckReservedLock	test_demovfs.c	/^static int demoCheckReservedLock(sqlite3_file *pFile, int *pResOut){$/;"	f	file:
demoClose	test_demovfs.c	/^static int demoClose(sqlite3_file *pFile){$/;"	f	file:
demoCurrentTime	test_demovfs.c	/^static int demoCurrentTime(sqlite3_vfs *pVfs, double *pTime){$/;"	f	file:
demoDelete	test_demovfs.c	/^static int demoDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f	file:
demoDeviceCharacteristics	test_demovfs.c	/^static int demoDeviceCharacteristics(sqlite3_file *pFile){$/;"	f	file:
demoDirectWrite	test_demovfs.c	/^static int demoDirectWrite($/;"	f	file:
demoDlClose	test_demovfs.c	/^static void demoDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
demoDlError	test_demovfs.c	/^static void demoDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){$/;"	f	file:
demoDlOpen	test_demovfs.c	/^static void *demoDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f	file:
demoDlSym	test_demovfs.c	/^static void (*demoDlSym(sqlite3_vfs *pVfs, void *pH, const char *z))(void){$/;"	f	file:
demoFileControl	test_demovfs.c	/^static int demoFileControl(sqlite3_file *pFile, int op, void *pArg){$/;"	f	file:
demoFileSize	test_demovfs.c	/^static int demoFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){$/;"	f	file:
demoFlushBuffer	test_demovfs.c	/^static int demoFlushBuffer(DemoFile *p){$/;"	f	file:
demoFullPathname	test_demovfs.c	/^static int demoFullPathname($/;"	f	file:
demoLock	test_demovfs.c	/^static int demoLock(sqlite3_file *pFile, int eLock){$/;"	f	file:
demoOpen	test_demovfs.c	/^static int demoOpen($/;"	f	file:
demoRandomness	test_demovfs.c	/^static int demoRandomness(sqlite3_vfs *pVfs, int nByte, char *zByte){$/;"	f	file:
demoRead	test_demovfs.c	/^static int demoRead($/;"	f	file:
demoSectorSize	test_demovfs.c	/^static int demoSectorSize(sqlite3_file *pFile){$/;"	f	file:
demoSleep	test_demovfs.c	/^static int demoSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f	file:
demoSync	test_demovfs.c	/^static int demoSync(sqlite3_file *pFile, int flags){$/;"	f	file:
demoTruncate	test_demovfs.c	/^static int demoTruncate(sqlite3_file *pFile, sqlite_int64 size){$/;"	f	file:
demoUnlock	test_demovfs.c	/^static int demoUnlock(sqlite3_file *pFile, int eLock){$/;"	f	file:
demoWrite	test_demovfs.c	/^static int demoWrite($/;"	f	file:
depth	test_rtree.c	/^  double depth;$/;"	m	struct:Cube	file:
dequote	test_osinst.c	/^static void dequote(char *z){$/;"	f	file:
dequoteString	test8.c	/^static void dequoteString(char *z){$/;"	f	file:
destroyRootPage	build.c	/^static void destroyRootPage(Parse *pParse, int iTable, int iDb){$/;"	f	file:
destroyTable	build.c	/^static void destroyTable(Parse *pParse, Table *pTab){$/;"	f	file:
destructor	test_func.c	/^static void destructor(void *p){$/;"	f	file:
detachFunc	attach.c	/^static void detachFunc($/;"	f	file:
dev	os_unix.c	/^  dev_t dev;                  \/* Device number *\/$/;"	m	struct:unixFileId	file:
devSymObjCmd	test6.c	/^static int SQLITE_TCLAPI devSymObjCmd($/;"	f	file:
deviceCharacteristics	os_unix.c	/^  int deviceCharacteristics;          \/* Precomputed device characteristics *\/$/;"	m	struct:unixFile	file:
devsymAccess	test_devsym.c	/^static int devsymAccess($/;"	f	file:
devsymCheckReservedLock	test_devsym.c	/^static int devsymCheckReservedLock(sqlite3_file *pFile, int *pResOut){$/;"	f	file:
devsymClose	test_devsym.c	/^static int devsymClose(sqlite3_file *pFile){$/;"	f	file:
devsymCurrentTime	test_devsym.c	/^static int devsymCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){$/;"	f	file:
devsymDelete	test_devsym.c	/^static int devsymDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f	file:
devsymDeviceCharacteristics	test_devsym.c	/^static int devsymDeviceCharacteristics(sqlite3_file *pFile){$/;"	f	file:
devsymDlClose	test_devsym.c	/^static void devsymDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
devsymDlError	test_devsym.c	/^static void devsymDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){$/;"	f	file:
devsymDlOpen	test_devsym.c	/^static void *devsymDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f	file:
devsymDlSym	test_devsym.c	/^static void (*devsymDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym))(void){$/;"	f	file:
devsymFileControl	test_devsym.c	/^static int devsymFileControl(sqlite3_file *pFile, int op, void *pArg){$/;"	f	file:
devsymFileSize	test_devsym.c	/^static int devsymFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){$/;"	f	file:
devsymFullPathname	test_devsym.c	/^static int devsymFullPathname($/;"	f	file:
devsymLock	test_devsym.c	/^static int devsymLock(sqlite3_file *pFile, int eLock){$/;"	f	file:
devsymOpen	test_devsym.c	/^static int devsymOpen($/;"	f	file:
devsymRandomness	test_devsym.c	/^static int devsymRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f	file:
devsymRead	test_devsym.c	/^static int devsymRead($/;"	f	file:
devsymSectorSize	test_devsym.c	/^static int devsymSectorSize(sqlite3_file *pFile){$/;"	f	file:
devsymShmBarrier	test_devsym.c	/^static void devsymShmBarrier(sqlite3_file *pFile){$/;"	f	file:
devsymShmLock	test_devsym.c	/^static int devsymShmLock(sqlite3_file *pFile, int ofst, int n, int flags){$/;"	f	file:
devsymShmMap	test_devsym.c	/^static int devsymShmMap($/;"	f	file:
devsymShmUnmap	test_devsym.c	/^static int devsymShmUnmap(sqlite3_file *pFile, int delFlag){$/;"	f	file:
devsymSleep	test_devsym.c	/^static int devsymSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f	file:
devsymSync	test_devsym.c	/^static int devsymSync(sqlite3_file *pFile, int flags){$/;"	f	file:
devsymTruncate	test_devsym.c	/^static int devsymTruncate(sqlite3_file *pFile, sqlite_int64 size){$/;"	f	file:
devsymUnlock	test_devsym.c	/^static int devsymUnlock(sqlite3_file *pFile, int eLock){$/;"	f	file:
devsymWrite	test_devsym.c	/^static int devsymWrite($/;"	f	file:
devsym_file	test_devsym.c	/^struct devsym_file {$/;"	s	file:
devsym_file	test_devsym.c	/^typedef struct devsym_file devsym_file;$/;"	t	typeref:struct:devsym_file	file:
devsym_io_methods	test_devsym.c	/^static sqlite3_io_methods devsym_io_methods = {$/;"	v	file:
devsym_register	test_devsym.c	/^void devsym_register(int iDeviceChar, int iSectorSize){$/;"	f
devsym_unregister	test_devsym.c	/^void devsym_unregister(){$/;"	f
devsym_vfs	test_devsym.c	/^static sqlite3_vfs devsym_vfs = {$/;"	v	file:
dfltLockMode	sqliteInt.h	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3
directMode	sqliteInt.h	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo
disableAuth	tclsqlite.c	/^  int disableAuth;           \/* Disable the authorizer if it exists *\/$/;"	m	struct:SqliteDb	file:
disableInit	test_mutex.c	/^  int disableInit;           \/* True to cause sqlite3_initalize() to fail *\/$/;"	m	struct:test_mutex_globals	file:
disableLookaside	sqliteInt.h	/^  u8 disableLookaside; \/* Number of times lookaside has been disabled *\/$/;"	m	struct:Parse
disableTerm	wherecode.c	/^static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){$/;"	f	file:
disableTriggers	sqliteInt.h	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse
disableTry	test_mutex.c	/^  int disableTry;            \/* True to force sqlite3_mutex_try() to fail *\/$/;"	m	struct:test_mutex_globals	file:
disable_debug_trace_modes	shell.c	/^static void disable_debug_trace_modes(void){$/;"	f	file:
disable_simulated_io_errors	pager.c	/^void disable_simulated_io_errors(void){$/;"	f
disable_simulated_io_errors	pager.c	3762;"	d	file:
disable_simulated_io_errors	pager.h	229;"	d
disallow	mem2.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:__anon21	file:
discardChance	test_pcache.c	/^  unsigned discardChance;   \/* Chance of discarding on an unpin (0-100) *\/$/;"	m	struct:testpcacheGlobalType	file:
disconnectAllVtab	main.c	/^static void disconnectAllVtab(sqlite3 *db){$/;"	f	file:
displayComment	vdbeaux.c	/^static int displayComment($/;"	f	file:
displayLinuxIoStats	shell.c	/^static void displayLinuxIoStats(FILE *out){$/;"	f	file:
displayP4	vdbeaux.c	/^static char *displayP4(Op *pOp, char *zTemp, int nTemp){$/;"	f	file:
displayP4Expr	vdbeaux.c	/^static void displayP4Expr(StrAccum *p, Expr *pExpr){$/;"	f	file:
display_scanstats	shell.c	/^static void display_scanstats($/;"	f	file:
display_stats	shell.c	/^static int display_stats($/;"	f	file:
doNotSpill	pager.c	/^  u8 doNotSpill;              \/* Do not spill the cache when non-zero *\/$/;"	m	struct:Pager	file:
doWalCallbacks	vdbeapi.c	/^static int doWalCallbacks(sqlite3 *db){$/;"	f	file:
do_compile	test4.c	/^static void do_compile(Thread *p){$/;"	f	file:
do_compile	test7.c	/^static void do_compile(Thread *p){$/;"	f	file:
do_finalize	test4.c	/^static void do_finalize(Thread *p){$/;"	f	file:
do_finalize	test7.c	/^static void do_finalize(Thread *p){$/;"	f	file:
do_meta_command	shell.c	/^static int do_meta_command(char *zLine, ShellState *p){$/;"	f	file:
do_reset	test7.c	/^static void do_reset(Thread *p){$/;"	f	file:
do_step	test4.c	/^static void do_step(Thread *p){$/;"	f	file:
do_step	test7.c	/^static void do_step(Thread *p){$/;"	f	file:
doingRerun	vdbeInt.h	/^  bft doingRerun:1;       \/* True if rerunning after an auto-reprepare *\/$/;"	m	struct:Vdbe
done	sqliteInt.h	/^    unsigned done :1;       \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item
done	threads.c	/^  int done;                      \/* Set to true when thread finishes *\/$/;"	m	struct:SQLiteThread	file:
dotlockCheckReservedLock	os_unix.c	/^static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
dotlockClose	os_unix.c	/^static int dotlockClose(sqlite3_file *id) {$/;"	f	file:
dotlockLock	os_unix.c	/^static int dotlockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
dotlockUnlock	os_unix.c	/^static int dotlockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
double	sqliteInt.h	511;"	d
doubleToInt64	vdbemem.c	/^static i64 doubleToInt64(double r){$/;"	f	file:
downgradeAllSharedCacheTableLocks	btree.c	/^static void downgradeAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
downgradeAllSharedCacheTableLocks	btree.c	110;"	d	file:
dropCell	btree.c	/^static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){$/;"	f	file:
dsUnregisterObjCmd	test6.c	/^static int SQLITE_TCLAPI dsUnregisterObjCmd($/;"	f	file:
dstr	test1.c	/^struct dstr {$/;"	s	file:
dstrAppend	test1.c	/^static void dstrAppend(struct dstr *p, const char *z, int divider){$/;"	f	file:
dump_callback	shell.c	/^static int dump_callback(void *pArg, int nArg, char **azArg, char **azCol){$/;"	f	file:
dupedExprNodeSize	expr.c	/^static int dupedExprNodeSize(Expr *p, int flags){$/;"	f	file:
dupedExprSize	expr.c	/^static int dupedExprSize(Expr *p, int flags){$/;"	f	file:
dupedExprStructSize	expr.c	/^static int dupedExprStructSize(Expr *p, int flags){$/;"	f	file:
eCode	sqliteInt.h	/^  u8 eCode;                                 \/* A small processing code *\/$/;"	m	struct:Walker
eCreate	pcache.c	/^  u8 eCreate;                         \/* eCreate value for for xFetch() *\/$/;"	m	struct:PCache	file:
eCurType	vdbeInt.h	/^  u8 eCurType;          \/* One of the CURTYPE_* values above *\/$/;"	m	struct:VdbeCursor
eDest	sqliteInt.h	/^  u8 eDest;            \/* How to dispose of the results.  On of SRT_* above. *\/$/;"	m	struct:SelectDest
eDistinct	whereInt.h	/^  u8 eDistinct;             \/* One of the WHERE_DISTINCT_* values *\/$/;"	m	struct:WhereInfo
eEndLoopOp	whereInt.h	/^        u8 eEndLoopOp;         \/* IN Loop terminator. OP_Next or OP_Prev *\/$/;"	m	struct:WhereLevel::__anon3::__anon4::InLoop
eFWErr	vdbesort.c	/^  int eFWErr;                     \/* Non-zero if in an error state *\/$/;"	m	struct:PmaWriter	file:
eFault	test_vfs.c	/^  int eFault;                     \/* A FAULT_INJECT_* value *\/$/;"	m	struct:TestFaultInject	file:
eFileLock	os_unix.c	/^  unsigned char eFileLock;            \/* The type of lock held on this fd *\/$/;"	m	struct:unixFile	file:
eFileLock	os_unix.c	/^  unsigned char eFileLock;        \/* One of SHARED_LOCK, RESERVED_LOCK etc. *\/$/;"	m	struct:unixInodeInfo	file:
eLock	btreeInt.h	/^  u8 eLock;             \/* READ_LOCK or WRITE_LOCK *\/$/;"	m	struct:BtLock
eLock	pager.c	/^  u8 eLock;                   \/* Current lock held on database file *\/$/;"	m	struct:Pager	file:
eLock	test_journal.c	/^  int eLock;               \/* Current lock held on the file *\/$/;"	m	struct:jt_file	file:
eMatchOp	whereInt.h	/^  u8 eMatchOp;            \/* Op for vtab MATCH\/LIKE\/GLOB\/REGEXP terms *\/$/;"	m	struct:WhereTerm
eOnePass	whereInt.h	/^  u8 eOnePass;              \/* ONEPASS_OFF, or _SINGLE, or _MULTI *\/$/;"	m	struct:WhereInfo
eOperator	whereInt.h	/^  u16 eOperator;          \/* A WO_xx value describing <op> *\/$/;"	m	struct:WhereTerm
eOrconf	sqliteInt.h	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse
ePragTyp	pragma.h	/^  u8 ePragTyp;              \/* PragTyp_XXX value *\/$/;"	m	struct:sPragmaNames
eScoreType	test_rtree.c	/^  int eScoreType;$/;"	m	struct:Circle	file:
eState	btreeInt.h	/^  u8 eState;                \/* One of the CURSOR_XXX constants (see below) *\/$/;"	m	struct:BtCursor
eState	pager.c	/^  u8 eState;                  \/* Pager state (OPEN, READER, WRITER_LOCKED..) *\/$/;"	m	struct:Pager	file:
eSubtype	vdbeInt.h	/^  u8  eSubtype;       \/* Subtype for this value *\/$/;"	m	struct:Mem
eTnctType	select.c	/^  u8 eTnctType;   \/* One of the WHERE_DISTINCT_* operators *\/$/;"	m	struct:DistinctCtx	file:
eTriggerOp	sqliteInt.h	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse
eType	mem2.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	file:
eType	test_mutex.c	/^  int eType;$/;"	m	struct:sqlite3_mutex	file:
eType	test_onefile.c	/^  int eType;$/;"	m	struct:fs_file	file:
ebcdicToAscii	tokenize.c	/^const unsigned char ebcdicToAscii[] = {$/;"	v
echoBegin	test8.c	/^static int echoBegin(sqlite3_vtab *tab){$/;"	f	file:
echoBestIndex	test8.c	/^static int echoBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
echoClose	test8.c	/^static int echoClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
echoColumn	test8.c	/^static int echoColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
echoCommit	test8.c	/^static int echoCommit(sqlite3_vtab *tab){$/;"	f	file:
echoConnect	test8.c	/^static int echoConnect($/;"	f	file:
echoConstructor	test8.c	/^static int echoConstructor($/;"	f	file:
echoCreate	test8.c	/^static int echoCreate($/;"	f	file:
echoDeclareVtab	test8.c	/^static int echoDeclareVtab($/;"	f	file:
echoDestroy	test8.c	/^static int echoDestroy(sqlite3_vtab *pVtab){$/;"	f	file:
echoDestructor	test8.c	/^static int echoDestructor(sqlite3_vtab *pVtab){$/;"	f	file:
echoDisconnect	test8.c	/^static int echoDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
echoEof	test8.c	/^static int echoEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
echoFilter	test8.c	/^static int echoFilter($/;"	f	file:
echoFindFunction	test8.c	/^static int echoFindFunction($/;"	f	file:
echoModule	test8.c	/^static sqlite3_module echoModule = {$/;"	v	file:
echoModuleV2	test8.c	/^static sqlite3_module echoModuleV2 = {$/;"	v	file:
echoNext	test8.c	/^static int echoNext(sqlite3_vtab_cursor *cur){$/;"	f	file:
echoOn	shell.c	/^  int echoOn;            \/* True to echo input commands *\/$/;"	m	struct:ShellState	file:
echoOpen	test8.c	/^static int echoOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
echoRelease	test8.c	/^static int echoRelease(sqlite3_vtab *pVTab, int iSavepoint){$/;"	f	file:
echoRename	test8.c	/^static int echoRename(sqlite3_vtab *vtab, const char *zNewName){$/;"	f	file:
echoRollback	test8.c	/^static int echoRollback(sqlite3_vtab *tab){$/;"	f	file:
echoRollbackTo	test8.c	/^static int echoRollbackTo(sqlite3_vtab *pVTab, int iSavepoint){$/;"	f	file:
echoRowid	test8.c	/^static int echoRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){$/;"	f	file:
echoSavepoint	test8.c	/^static int echoSavepoint(sqlite3_vtab *pVTab, int iSavepoint){$/;"	f	file:
echoSelectList	test8.c	/^static char *echoSelectList(echo_vtab *pTab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
echoSync	test8.c	/^static int echoSync(sqlite3_vtab *tab){$/;"	f	file:
echoTransactionCall	test8.c	/^static int echoTransactionCall(sqlite3_vtab *tab, const char *zCall){$/;"	f	file:
echoUpdate	test8.c	/^int echoUpdate($/;"	f
echo_cursor	test8.c	/^struct echo_cursor {$/;"	s	file:
echo_cursor	test8.c	/^typedef struct echo_cursor echo_cursor;$/;"	t	typeref:struct:echo_cursor	file:
echo_vtab	test8.c	/^struct echo_vtab {$/;"	s	file:
echo_vtab	test8.c	/^typedef struct echo_vtab echo_vtab;$/;"	t	typeref:struct:echo_vtab	file:
ecmd	parse.y	/^ecmd ::= SEMI.$/;"	l
ecmd	parse.y	/^ecmd ::= explain cmdx SEMI.$/;"	l
editPage	btree.c	/^static int editPage($/;"	f	file:
enable	test_malloc.c	/^  u8 enable;              \/* True if enabled *\/$/;"	m	struct:MemFault	file:
enableTimer	shell.c	/^static int enableTimer = 0;$/;"	v	file:
enable_shared_cache	sqlite3ext.h	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines
enable_simulated_io_errors	pager.c	/^void enable_simulated_io_errors(void){$/;"	f
enable_simulated_io_errors	pager.c	3763;"	d	file:
enable_simulated_io_errors	pager.h	230;"	d
enc	sqliteInt.h	/^  u8 enc;                       \/* Text encoding *\/$/;"	m	struct:sqlite3
enc	sqliteInt.h	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq
enc	sqliteInt.h	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema
enc	sqliteInt.h	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo
enc	vdbeInt.h	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:Mem
endTimer	shell.c	/^static void endTimer(void){$/;"	f	file:
endpoint	memjournal.c	/^  FilePoint endpoint;             \/* Pointer to the end of the file *\/$/;"	m	struct:MemJournal	file:
enlargeAndAppend	printf.c	/^static void SQLITE_NOINLINE enlargeAndAppend(StrAccum *p, const char *z, int N){$/;"	f	file:
enterJtMutex	test_journal.c	/^static void enterJtMutex(void){$/;"	f	file:
enterMutex	notify.c	/^static void enterMutex(void){$/;"	f	file:
entry	test_fs.c	/^  struct DIRENT entry;            \/* Current entry *\/$/;"	m	struct:FsdirCsr	typeref:struct:FsdirCsr::DIRENT	file:
eqSeen	sqliteInt.h	/^  u8 eqSeen;          \/* True if an equality comparison has been seen *\/$/;"	m	struct:UnpackedRecord
err	test1.c	/^  int err;            \/* True if an error occurs *\/$/;"	m	struct:win32FileLocker	file:
errCode	pager.c	/^  int errCode;                \/* One of several kinds of errors *\/$/;"	m	struct:Pager	file:
errCode	sqliteInt.h	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3
errCode	sqliteInt.h	/^  u8 errCode;         \/* Error detected by xRecordCompare (CORRUPT or NOMEM) *\/$/;"	m	struct:UnpackedRecord
errCode	test_server.c	/^  int errCode;                 \/* Error code returned *\/$/;"	m	struct:SqlMessage	file:
errMask	sqliteInt.h	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3
errMsg	btreeInt.h	/^  StrAccum errMsg;  \/* Accumulate the error message text here *\/$/;"	m	struct:IntegrityCk
errcode	sqlite3ext.h	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines
errlogFunc	func.c	/^static void errlogFunc($/;"	f	file:
errmsg	sqlite3ext.h	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
errmsg16	sqlite3ext.h	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
errorAction	vdbeInt.h	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe
errstr	sqlite3ext.h	/^  const char *(*errstr)(int);$/;"	m	struct:sqlite3_api_routines
estLog	where.c	/^static LogEst estLog(LogEst N){$/;"	f	file:
estimateIndexWidth	build.c	/^static void estimateIndexWidth(Index *pIdx){$/;"	f	file:
estimateTableWidth	build.c	/^static void estimateTableWidth(Table *pTab){$/;"	f	file:
etBUFSIZE	printf.c	167;"	d	file:
etByte	printf.c	/^typedef unsigned char etByte;$/;"	t	file:
etCHARX	printf.c	26;"	d	file:
etDYNSTRING	printf.c	24;"	d	file:
etEXP	printf.c	20;"	d	file:
etFLOAT	printf.c	19;"	d	file:
etGENERIC	printf.c	21;"	d	file:
etINVALID	printf.c	37;"	d	file:
etORDINAL	printf.c	35;"	d	file:
etPERCENT	printf.c	25;"	d	file:
etPOINTER	printf.c	33;"	d	file:
etRADIX	printf.c	18;"	d	file:
etSIZE	printf.c	22;"	d	file:
etSQLESCAPE	printf.c	28;"	d	file:
etSQLESCAPE2	printf.c	29;"	d	file:
etSQLESCAPE3	printf.c	34;"	d	file:
etSRCLIST	printf.c	32;"	d	file:
etSTRING	printf.c	23;"	d	file:
etTOKEN	printf.c	31;"	d	file:
et_getdigit	printf.c	/^static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){$/;"	f	file:
et_info	printf.c	/^typedef struct et_info {   \/* Information about each format field *\/$/;"	s	file:
et_info	printf.c	/^} et_info;$/;"	t	typeref:struct:et_info	file:
evName	test1.c	/^  char *evName;       \/* Name of event to signal thread startup *\/$/;"	m	struct:win32FileLocker	file:
exclMask	os_unix.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShm	file:
exclMask	os_unix.c	/^  u8 exclMask;               \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShmNode	file:
exclMask	os_win.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:winShm	file:
excllock	test_vfs.c	/^  u32 excllock;                   \/* Mask of exclusive locks *\/$/;"	m	struct:TestvfsFd	file:
exclusiveMode	pager.c	/^  u8 exclusiveMode;           \/* Boolean. True if locking_mode==EXCLUSIVE *\/$/;"	m	struct:Pager	file:
exclusiveMode	wal.c	/^  u8 exclusiveMode;          \/* Non-zero if connection is in exclusive mode *\/$/;"	m	struct:Wal	file:
exec	sqlite3ext.h	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines
execExecSql	vacuum.c	/^static int execExecSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
execFuncCallback	test1.c	/^static int execFuncCallback(void *pData, int argc, char **argv, char **NotUsed){$/;"	f	file:
execSql	vacuum.c	/^static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
exec_prepared_stmt	shell.c	/^static void exec_prepared_stmt($/;"	f	file:
exec_printf_cb	test1.c	/^static int exec_printf_cb(void *pArg, int argc, char **argv, char **name){$/;"	f	file:
expanded_sql	sqlite3ext.h	/^  char *(*expanded_sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
expired	sqlite3ext.h	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
expired	vdbeInt.h	/^  bft expired:1;          \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe
explain	parse.y	/^explain ::= .$/;"	l
explain	parse.y	/^explain ::= EXPLAIN QUERY PLAN.   { pParse->explain = 2; }$/;"	l
explain	parse.y	/^explain ::= EXPLAIN.              { pParse->explain = 1; }$/;"	l
explain	sqliteInt.h	/^  u8 explain;               \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse
explain	vdbeInt.h	/^  bft explain:2;          \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe
explainAppendTerm	wherecode.c	/^static void explainAppendTerm($/;"	f	file:
explainComposite	select.c	/^static void explainComposite($/;"	f	file:
explainComposite	select.c	1201;"	d	file:
explainIndexColumnName	wherecode.c	/^static const char *explainIndexColumnName(Index *pIdx, int i){$/;"	f	file:
explainIndexRange	wherecode.c	/^static void explainIndexRange(StrAccum *pStr, WhereLoop *pLoop){$/;"	f	file:
explainSetInteger	select.c	1159;"	d	file:
explainSetInteger	select.c	1164;"	d	file:
explainSimpleCount	select.c	/^static void explainSimpleCount($/;"	f	file:
explainSimpleCount	select.c	4813;"	d	file:
explainTempTable	select.c	/^static void explainTempTable(Parse *pParse, const char *zUsage){$/;"	f	file:
explainTempTable	select.c	1163;"	d	file:
explain_data_delete	shell.c	/^static void explain_data_delete(ShellState *p){$/;"	f	file:
explain_data_prepare	shell.c	/^static void explain_data_prepare(ShellState *p, sqlite3_stmt *pSql){$/;"	f	file:
expmask	vdbeInt.h	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe
exprAlwaysFalse	expr.c	/^static int exprAlwaysFalse(Expr *p){$/;"	f	file:
exprAlwaysTrue	expr.c	/^static int exprAlwaysTrue(Expr *p){$/;"	f	file:
exprAnalyze	whereexpr.c	/^static void exprAnalyze($/;"	f	file:
exprAnalyzeOrTerm	whereexpr.c	/^static void exprAnalyzeOrTerm($/;"	f	file:
exprCodeBetween	expr.c	/^static void exprCodeBetween($/;"	f	file:
exprCommute	whereexpr.c	/^static void exprCommute(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprDup	expr.c	/^static Expr *exprDup(sqlite3 *db, Expr *p, int dupFlags, u8 **pzBuffer){$/;"	f	file:
exprIdxCover	expr.c	/^static int exprIdxCover(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprIsConst	expr.c	/^static int exprIsConst(Expr *p, int initFlag, int iCur){$/;"	f	file:
exprListDeleteNN	expr.c	/^static SQLITE_NOINLINE void exprListDeleteNN(sqlite3 *db, ExprList *pList){$/;"	f	file:
exprMightBeIndexed	whereexpr.c	/^static int exprMightBeIndexed($/;"	f	file:
exprNodeIsConstant	expr.c	/^static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprProbability	resolve.c	/^static int exprProbability(Expr *p){$/;"	f	file:
exprSelectUsage	whereexpr.c	/^static Bitmask exprSelectUsage(WhereMaskSet *pMaskSet, Select *pS){$/;"	f	file:
exprSetHeight	expr.c	/^static void exprSetHeight(Expr *p){$/;"	f	file:
exprSetHeight	expr.c	423;"	d	file:
exprSrcCount	expr.c	/^static int exprSrcCount(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprStructSize	expr.c	/^static int exprStructSize(Expr *p){$/;"	f	file:
exprTableColumn	fkey.c	/^static Expr *exprTableColumn($/;"	f	file:
exprTableRegister	fkey.c	/^static Expr *exprTableRegister($/;"	f	file:
exprToRegister	expr.c	/^static void exprToRegister(Expr *p, int iReg){$/;"	f	file:
extended_errcode	sqlite3ext.h	/^  int (*extended_errcode)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
extended_result_codes	sqlite3ext.h	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines
extraSync	pager.c	/^  u8 extraSync;               \/* sync directory after journal delete *\/$/;"	m	struct:Pager	file:
f	test_quota.c	/^  FILE *f;                \/* Open stdio file pointer *\/$/;"	m	struct:quota_FILE	file:
fErrorOrAux	vdbeInt.h	/^  u8 fErrorOrAux;         \/* isError!=0 or pVdbe->pAuxData modified *\/$/;"	m	struct:sqlite3_context
fake_big_file	test2.c	/^static int SQLITE_TCLAPI fake_big_file($/;"	f	file:
faultInstallCmd	test2.c	/^static int SQLITE_TCLAPI faultInstallCmd($/;"	f	file:
faultSimCallback	test2.c	/^static int faultSimCallback(int x){$/;"	f	file:
faultSimInterp	test2.c	/^static Tcl_Interp *faultSimInterp = 0;$/;"	v	file:
faultSimScript	test2.c	/^static char *faultSimScript;$/;"	v	file:
faultSimScriptSize	test2.c	/^static int faultSimScriptSize = 0;$/;"	v	file:
faultsimBeginBenign	test_malloc.c	/^static void faultsimBeginBenign(void){$/;"	f	file:
faultsimBenignFailures	test_malloc.c	/^static int faultsimBenignFailures(void){$/;"	f	file:
faultsimConfig	test_malloc.c	/^static void faultsimConfig(int nDelay, int nRepeat){$/;"	f	file:
faultsimEndBenign	test_malloc.c	/^static void faultsimEndBenign(void){$/;"	f	file:
faultsimFailures	test_malloc.c	/^static int faultsimFailures(void){$/;"	f	file:
faultsimFree	test_malloc.c	/^static void faultsimFree(void *p){$/;"	f	file:
faultsimInit	test_malloc.c	/^static int faultsimInit(void *p){$/;"	f	file:
faultsimInstall	test_malloc.c	/^static int faultsimInstall(int install){$/;"	f	file:
faultsimMalloc	test_malloc.c	/^static void *faultsimMalloc(int n){$/;"	f	file:
faultsimPending	test_malloc.c	/^static int faultsimPending(void){$/;"	f	file:
faultsimRealloc	test_malloc.c	/^static void *faultsimRealloc(void *pOld, int n){$/;"	f	file:
faultsimRoundup	test_malloc.c	/^static int faultsimRoundup(int n){$/;"	f	file:
faultsimShutdown	test_malloc.c	/^static void faultsimShutdown(void *p){$/;"	f	file:
faultsimSize	test_malloc.c	/^static int faultsimSize(void *p){$/;"	f	file:
faultsimStep	test_malloc.c	/^static int faultsimStep(void){$/;"	f	file:
fcntlSizeHint	os_unix.c	/^static int fcntlSizeHint(unixFile *pFile, i64 nByte){$/;"	f	file:
fd	os_unix.c	/^  int fd;                           \/* file desc to assoc this lock with *\/$/;"	m	struct:ByteRangeLockPB2	file:
fd	os_unix.c	/^  int fd;                   \/* File descriptor to close *\/$/;"	m	struct:UnixUnusedFd	file:
fd	pager.c	/^  sqlite3_file *fd;           \/* File descriptor for database *\/$/;"	m	struct:Pager	file:
fd	test_demovfs.c	/^  int fd;                         \/* File descriptor *\/$/;"	m	struct:DemoFile	file:
fd	test_fs.c	/^  int fd;                         \/* File descriptor open on current path *\/$/;"	m	struct:FstreeCsr	file:
fd	test_sqllog.c	/^  FILE *fd;                       \/* File descriptor for log file *\/$/;"	m	struct:SLConn	file:
fdatasync	os_unix.c	3374;"	d	file:
fetchPayload	btree.c	/^static const void *fetchPayload($/;"	f	file:
fg	sqliteInt.h	/^    } fg;$/;"	m	struct:SrcList::SrcList_item	typeref:struct:SrcList::SrcList_item::__anon16
file	vdbesort.c	/^  SorterFile file;                \/* Temp file for level-0 PMAs *\/$/;"	m	struct:SortSubtask	file:
file2	vdbesort.c	/^  SorterFile file2;               \/* Space for other PMAs *\/$/;"	m	struct:SortSubtask	file:
fileChunkSize	memjournal.c	53;"	d	file:
fileHasMoved	os_unix.c	/^static int fileHasMoved(unixFile *pFile){$/;"	f	file:
fileId	os_unix.c	/^  struct unixFileId fileId;       \/* The lookup key *\/$/;"	m	struct:unixInodeInfo	typeref:struct:unixInodeInfo::unixFileId	file:
fileTail	test_vfstrace.c	/^static const char *fileTail(const char *z){$/;"	f	file:
file_control	sqlite3ext.h	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines
file_control_chunksize_test	test1.c	/^static int SQLITE_TCLAPI file_control_chunksize_test($/;"	f	file:
file_control_lasterrno_test	test1.c	/^static int SQLITE_TCLAPI file_control_lasterrno_test($/;"	f	file:
file_control_lockproxy_test	test1.c	/^static int SQLITE_TCLAPI file_control_lockproxy_test($/;"	f	file:
file_control_persist_wal	test1.c	/^static int SQLITE_TCLAPI file_control_persist_wal($/;"	f	file:
file_control_powersafe_overwrite	test1.c	/^static int SQLITE_TCLAPI file_control_powersafe_overwrite($/;"	f	file:
file_control_sizehint_test	test1.c	/^static int SQLITE_TCLAPI file_control_sizehint_test($/;"	f	file:
file_control_tempfilename	test1.c	/^static int SQLITE_TCLAPI file_control_tempfilename($/;"	f	file:
file_control_test	test1.c	/^static int SQLITE_TCLAPI file_control_test($/;"	f	file:
file_control_vfsname	test1.c	/^static int SQLITE_TCLAPI file_control_vfsname($/;"	f	file:
file_control_win32_av_retry	test1.c	/^static int SQLITE_TCLAPI file_control_win32_av_retry($/;"	f	file:
file_control_win32_set_handle	test1.c	/^static int SQLITE_TCLAPI file_control_win32_set_handle($/;"	f	file:
file_format	sqliteInt.h	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema
fillInCell	btree.c	/^static int fillInCell($/;"	f	file:
fillInUnixFile	os_unix.c	/^static int fillInUnixFile($/;"	f	file:
finalDbSize	btree.c	/^static Pgno finalDbSize(BtShared *pBt, Pgno nOrig, Pgno nFree){$/;"	f	file:
finalize	sqlite3ext.h	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines
finalize	test_schema.c	/^static int finalize(sqlite3_stmt **ppStmt){$/;"	f	file:
finalizeAggFunctions	select.c	/^static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
findBtree	backup.c	/^static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){$/;"	f	file:
findCell	btree.c	1025;"	d	file:
findCellPastPtr	btree.c	1027;"	d	file:
findCollSeqEntry	callback.c	/^static CollSeq *findCollSeqEntry($/;"	f	file:
findCreateFileMode	os_unix.c	/^static int findCreateFileMode($/;"	f	file:
findElementWithHash	hash.c	/^static HashElem *findElementWithHash($/;"	f	file:
findIndexCol	where.c	/^static int findIndexCol($/;"	f	file:
findIndexOrPrimaryKey	analyze.c	/^static Index *findIndexOrPrimaryKey($/;"	f	file:
findInodeInfo	os_unix.c	/^static int findInodeInfo($/;"	f	file:
findNextHostParameter	vdbetrace.c	/^static int findNextHostParameter(const char *zSql, int *pnToken){$/;"	f	file:
findReusableFd	os_unix.c	/^static UnixUnusedFd *findReusableFd(const char *zPath, int flags){$/;"	f	file:
findRightmost	select.c	/^static Select *findRightmost(Select *p){$/;"	f	file:
findSqlFunc	tclsqlite.c	/^static SqlFunc *findSqlFunc(SqliteDb *pDb, const char *zName){$/;"	f	file:
find_home_dir	shell.c	/^static char *find_home_dir(void){$/;"	f	file:
finder_type	os_unix.c	/^typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);$/;"	t	file:
fired	test_thread.c	/^  int fired;                         \/* True after unlock event has occurred *\/$/;"	m	struct:UnlockNotification	file:
first	hash.h	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash
fkActionTrigger	fkey.c	/^static Trigger *fkActionTrigger($/;"	f	file:
fkChildIsModified	fkey.c	/^static int fkChildIsModified($/;"	f	file:
fkLookupParent	fkey.c	/^static void fkLookupParent($/;"	f	file:
fkParentIsModified	fkey.c	/^static int fkParentIsModified($/;"	f	file:
fkScanChildren	fkey.c	/^static void fkScanChildren($/;"	f	file:
fkTriggerDelete	fkey.c	/^static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){$/;"	f	file:
fkeyHash	sqliteInt.h	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema
flags	dbstat.c	/^  u8 flags;                       \/* Copy of flags byte *\/$/;"	m	struct:StatPage	file:
flags	memjournal.c	/^  int flags;                      \/* xOpen flags *\/$/;"	m	struct:MemJournal	file:
flags	os_unix.c	/^  int flags;                \/* Flags this file descriptor was opened with *\/$/;"	m	struct:UnixUnusedFd	file:
flags	pcache.h	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr
flags	printf.c	/^  etByte flags;            \/* One or more of FLAG_ constants below *\/$/;"	m	struct:et_info	file:
flags	sqliteInt.h	/^  int flags;                    \/* Miscellaneous flags. See below *\/$/;"	m	struct:sqlite3
flags	sqliteInt.h	/^  u32 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr
flags	test6.c	/^  int flags;                           \/* Flags the file was opened with *\/$/;"	m	struct:CrashFile	file:
flags	test_journal.c	/^  int flags;               \/* Flags the file was opened with *\/$/;"	m	struct:jt_file	file:
flags	test_multiplex.c	/^  int flags;                       \/* Flags used for original opening *\/$/;"	m	struct:multiplexGroup	file:
flags	vdbeInt.h	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:Mem
flags	vdbeblob.c	/^  int flags;              \/* Copy of "flags" passed to sqlite3_blob_open() *\/$/;"	m	struct:Incrblob	file:
flattenSubquery	select.c	/^static int flattenSubquery($/;"	f	file:
float	sqliteInt.h	512;"	d
floatSwap	vdbeaux.c	/^static u64 floatSwap(u64 in){$/;"	f	file:
flockCheckReservedLock	os_unix.c	/^static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
flockClose	os_unix.c	/^static int flockClose(sqlite3_file *id) {$/;"	f	file:
flockLock	os_unix.c	/^static int flockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flockUnlock	os_unix.c	/^static int flockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flushStmtCache	tclsqlite.c	/^static void flushStmtCache(SqliteDb *pDb){$/;"	f	file:
fmtinfo	printf.c	/^static const et_info fmtinfo[] = {$/;"	v	file:
fmttype	printf.c	/^  char fmttype;            \/* The format field code letter *\/$/;"	m	struct:et_info	file:
foreach_clause	parse.y	/^foreach_clause ::= .$/;"	l
foreach_clause	parse.y	/^foreach_clause ::= FOR EACH ROW.$/;"	l
free	sqlite3ext.h	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines
freeEphemeralFunction	vdbeaux.c	/^static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){$/;"	f	file:
freeIndex	build.c	/^static void freeIndex(sqlite3 *db, Index *p){$/;"	f	file:
freeP4	vdbeaux.c	/^static void freeP4(sqlite3 *db, int p4type, void *p4){$/;"	f	file:
freeP4FuncCtx	vdbeaux.c	/^static SQLITE_NOINLINE void freeP4FuncCtx(sqlite3 *db, sqlite3_context *p){$/;"	f	file:
freeP4Mem	vdbeaux.c	/^static SQLITE_NOINLINE void freeP4Mem(sqlite3 *db, Mem *p){$/;"	f	file:
freePage	btree.c	/^static void freePage(MemPage *pPage, int *pRC){$/;"	f	file:
freePage2	btree.c	/^static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){$/;"	f	file:
freeSpace	btree.c	/^static int freeSpace(MemPage *pPage, u16 iStart, u16 iSize){$/;"	f	file:
freeTempSpace	btree.c	/^static void freeTempSpace(BtShared *pBt){$/;"	f	file:
free_table	sqlite3ext.h	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines
free_test_auxdata	test_func.c	/^static void free_test_auxdata(void *p) {sqlite3_free(p);}$/;"	f	file:
fsAccess	test_onefile.c	/^static int fsAccess($/;"	f	file:
fsBestIndex	test_fs.c	/^static int fsBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
fsCheckReservedLock	test_onefile.c	/^static int fsCheckReservedLock(sqlite3_file *pFile, int *pResOut){$/;"	f	file:
fsClose	test_fs.c	/^static int fsClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
fsClose	test_onefile.c	/^static int fsClose(sqlite3_file *pFile){$/;"	f	file:
fsColumn	test_fs.c	/^static int fsColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
fsConnect	test_fs.c	/^static int fsConnect($/;"	f	file:
fsCurrentTime	test_onefile.c	/^static int fsCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){$/;"	f	file:
fsDelete	test_onefile.c	/^static int fsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f	file:
fsDeviceCharacteristics	test_onefile.c	/^static int fsDeviceCharacteristics(sqlite3_file *pFile){$/;"	f	file:
fsDisconnect	test_fs.c	/^static int fsDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
fsDlClose	test_onefile.c	/^static void fsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
fsDlError	test_onefile.c	/^static void fsDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){$/;"	f	file:
fsDlOpen	test_onefile.c	/^static void *fsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f	file:
fsDlSym	test_onefile.c	/^static void (*fsDlSym(sqlite3_vfs *pVfs, void *pH, const char *zSym))(void){$/;"	f	file:
fsEof	test_fs.c	/^static int fsEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
fsFileControl	test_onefile.c	/^static int fsFileControl(sqlite3_file *pFile, int op, void *pArg){$/;"	f	file:
fsFileSize	test_onefile.c	/^static int fsFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){$/;"	f	file:
fsFilter	test_fs.c	/^static int fsFilter($/;"	f	file:
fsFlags	os_unix.c	/^  unsigned fsFlags;                   \/* cached details from statfs() *\/$/;"	m	struct:unixFile	file:
fsFullPathname	test_onefile.c	/^static int fsFullPathname($/;"	f	file:
fsLock	test_onefile.c	/^static int fsLock(sqlite3_file *pFile, int eLock){$/;"	f	file:
fsModule	test_fs.c	/^static sqlite3_module fsModule = {$/;"	v	file:
fsNext	test_fs.c	/^static int fsNext(sqlite3_vtab_cursor *cur){$/;"	f	file:
fsOpen	test_fs.c	/^static int fsOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
fsOpen	test_onefile.c	/^static int fsOpen($/;"	f	file:
fsRandomness	test_onefile.c	/^static int fsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f	file:
fsRead	test_onefile.c	/^static int fsRead($/;"	f	file:
fsRowid	test_fs.c	/^static int fsRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){$/;"	f	file:
fsSectorSize	test_onefile.c	/^static int fsSectorSize(sqlite3_file *pFile){$/;"	f	file:
fsSleep	test_onefile.c	/^static int fsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f	file:
fsSync	test_onefile.c	/^static int fsSync(sqlite3_file *pFile, int flags){$/;"	f	file:
fsTruncate	test_onefile.c	/^static int fsTruncate(sqlite3_file *pFile, sqlite_int64 size){$/;"	f	file:
fsUnlock	test_onefile.c	/^static int fsUnlock(sqlite3_file *pFile, int eLock){$/;"	f	file:
fsWrite	test_onefile.c	/^static int fsWrite($/;"	f	file:
fs_cursor	test_fs.c	/^struct fs_cursor {$/;"	s	file:
fs_cursor	test_fs.c	/^typedef struct fs_cursor fs_cursor;$/;"	t	typeref:struct:fs_cursor	file:
fs_file	test_onefile.c	/^struct fs_file {$/;"	s	file:
fs_file	test_onefile.c	/^typedef struct fs_file fs_file;$/;"	t	typeref:struct:fs_file	file:
fs_io_methods	test_onefile.c	/^static sqlite3_io_methods fs_io_methods = {$/;"	v	file:
fs_real_file	test_onefile.c	/^struct fs_real_file {$/;"	s	file:
fs_real_file	test_onefile.c	/^typedef struct fs_real_file fs_real_file;$/;"	t	typeref:struct:fs_real_file	file:
fs_register	test_onefile.c	/^int fs_register(void){$/;"	f
fs_vfs	test_onefile.c	/^static fs_vfs_t fs_vfs = {$/;"	v	file:
fs_vfs_t	test_onefile.c	/^struct fs_vfs_t {$/;"	s	file:
fs_vfs_t	test_onefile.c	/^typedef struct fs_vfs_t fs_vfs_t;$/;"	t	typeref:struct:fs_vfs_t	file:
fs_vtab	test_fs.c	/^struct fs_vtab {$/;"	s	file:
fs_vtab	test_fs.c	/^typedef struct fs_vtab fs_vtab;$/;"	t	typeref:struct:fs_vtab	file:
fsdirBestIndex	test_fs.c	/^static int fsdirBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
fsdirClose	test_fs.c	/^static int fsdirClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
fsdirColumn	test_fs.c	/^static int fsdirColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
fsdirConnect	test_fs.c	/^static int fsdirConnect($/;"	f	file:
fsdirDisconnect	test_fs.c	/^static int fsdirDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
fsdirEof	test_fs.c	/^static int fsdirEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
fsdirFilter	test_fs.c	/^static int fsdirFilter($/;"	f	file:
fsdirModule	test_fs.c	/^static sqlite3_module fsdirModule = {$/;"	v	file:
fsdirNext	test_fs.c	/^static int fsdirNext(sqlite3_vtab_cursor *cur){$/;"	f	file:
fsdirOpen	test_fs.c	/^static int fsdirOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
fsdirRowid	test_fs.c	/^static int fsdirRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){$/;"	f	file:
fstreeBestIndex	test_fs.c	/^static int fstreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
fstreeClose	test_fs.c	/^static int fstreeClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
fstreeCloseFd	test_fs.c	/^static void fstreeCloseFd(FstreeCsr *pCsr){$/;"	f	file:
fstreeColumn	test_fs.c	/^static int fstreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
fstreeConnect	test_fs.c	/^static int fstreeConnect($/;"	f	file:
fstreeDisconnect	test_fs.c	/^static int fstreeDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
fstreeEof	test_fs.c	/^static int fstreeEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
fstreeFilter	test_fs.c	/^static int fstreeFilter($/;"	f	file:
fstreeModule	test_fs.c	/^static sqlite3_module fstreeModule = {$/;"	v	file:
fstreeNext	test_fs.c	/^static int fstreeNext(sqlite3_vtab_cursor *cur){$/;"	f	file:
fstreeOpen	test_fs.c	/^static int fstreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
fstreeRowid	test_fs.c	/^static int fstreeRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){$/;"	f	file:
ftKernelBegin	shell.c	/^static FILETIME ftKernelBegin;$/;"	v	file:
ftUserBegin	shell.c	/^static FILETIME ftUserBegin;$/;"	v	file:
ftWallBegin	shell.c	/^static sqlite3_int64 ftWallBegin;$/;"	v	file:
fullSync	pager.c	/^  u8 fullSync;                \/* Do extra syncs of the journal for robustness *\/$/;"	m	struct:Pager	file:
full_err	test_vfs.c	/^  TestFaultInject full_err;$/;"	m	struct:Testvfs	file:
full_fsync	os_unix.c	/^static int full_fsync(int fd, int fullSync, int dataOnly){$/;"	f	file:
funcFlags	sqliteInt.h	/^  u16 funcFlags;       \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef
functionDestroy	main.c	/^static void functionDestroy(sqlite3 *db, FuncDef *p){$/;"	f	file:
functionSearch	callback.c	/^static FuncDef *functionSearch($/;"	f	file:
g	test6.c	/^static CrashGlobal g = {0, 0, SQLITE_DEFAULT_SECTOR_SIZE, 0, 0};$/;"	v	file:
g	test_devsym.c	/^struct DevsymGlobal g = {0, 0, 512};$/;"	v	typeref:struct:DevsymGlobal
g	test_journal.c	/^static struct JtGlobal g = {0, 0};$/;"	v	typeref:struct:JtGlobal	file:
g	test_mutex.c	/^} g = {0};$/;"	v	typeref:struct:test_mutex_globals	file:
g	test_server.c	/^} g = {$/;"	v	typeref:struct:ServerState	file:
gHere	test_rtree.c	/^static int gHere = 42;$/;"	v	file:
gMultiplex	test_multiplex.c	/^} gMultiplex;$/;"	v	typeref:struct:__anon20	file:
gQuota	test_quota.c	/^} gQuota;$/;"	v	typeref:struct:__anon25	file:
gSyscall	test_syscall.c	/^} gSyscall = { 0, 0, 0, 0, 0 };$/;"	v	typeref:struct:TestSyscallGlobal	file:
g_elapsed	os_common.h	/^static sqlite_uint64 g_elapsed;$/;"	v
g_start	os_common.h	/^static sqlite_uint64 g_start;$/;"	v
genCksum	test_journal.c	/^static u32 genCksum(const unsigned char *z, int n){$/;"	f	file:
generateColumnNames	select.c	/^static void generateColumnNames($/;"	f	file:
generateColumnTypes	select.c	/^static void generateColumnTypes($/;"	f	file:
generateOutputSubroutine	select.c	/^static int generateOutputSubroutine($/;"	f	file:
generateSortTail	select.c	/^static void generateSortTail($/;"	f	file:
generateWithRecursiveQuery	select.c	/^static void generateWithRecursiveQuery($/;"	f	file:
get2byte	btreeInt.h	689;"	d
get2byte	dbstat.c	134;"	d	file:
get2byteAligned	btreeInt.h	700;"	d
get2byteAligned	btreeInt.h	703;"	d
get2byteAligned	btreeInt.h	706;"	d
get2byteAligned	btreeInt.h	708;"	d
get2byteInt	shell.c	/^static unsigned int get2byteInt(unsigned char *a){$/;"	f	file:
get2byteNotZero	btree.c	44;"	d	file:
get32bits	test_osinst.c	/^static unsigned int get32bits(unsigned char *p){$/;"	f	file:
get4byte	btreeInt.h	691;"	d
get4byteInt	shell.c	/^static unsigned int get4byteInt(unsigned char *a){$/;"	f	file:
getAndInitPage	btree.c	/^static int getAndInitPage($/;"	f	file:
getAutoVacuum	pragma.c	/^static int getAutoVacuum(const char *z){$/;"	f	file:
getCellInfo	btree.c	/^static SQLITE_NOINLINE void getCellInfo(BtCursor *pCur){$/;"	f	file:
getColumnNames	test8.c	/^static int getColumnNames($/;"	f	file:
getDbPointer	test1.c	/^int getDbPointer(Tcl_Interp *interp, const char *zA, sqlite3 **ppDb){$/;"	f
getDbPointer	test_mutex.c	/^static sqlite3 *getDbPointer(Tcl_Interp *pInterp, Tcl_Obj *pObj){$/;"	f	file:
getDigits	date.c	/^static int getDigits(const char *zDate, const char *zFormat, ...){$/;"	f	file:
getDoubleArg	printf.c	/^static double getDoubleArg(PrintfArguments *p){$/;"	f	file:
getFts3Varint	test_hexio.c	/^static int getFts3Varint(const char *p, sqlite_int64 *v){$/;"	f	file:
getIndexArray	test8.c	/^static int getIndexArray($/;"	f	file:
getIntArg	printf.c	/^static sqlite3_int64 getIntArg(PrintfArguments *p){$/;"	f	file:
getLocalPayload	dbstat.c	/^static void getLocalPayload($/;"	f	file:
getLockingMode	pragma.c	/^static int getLockingMode(const char *z){$/;"	f	file:
getOverflowPage	btree.c	/^static int getOverflowPage($/;"	f	file:
getPageReferenced	btree.c	/^static int getPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
getProcessId	test_sqllog.c	/^static int getProcessId(void){$/;"	f	file:
getProcessTimesAddr	shell.c	/^static GETPROCTIMES getProcessTimesAddr = NULL;$/;"	v	file:
getRowTrigger	trigger.c	/^static TriggerPrg *getRowTrigger($/;"	f	file:
getSafetyLevel	pragma.c	/^static u8 getSafetyLevel(const char *z, int omitFull, u8 dflt){$/;"	f	file:
getStaticMutexPointer	test_mutex.c	/^static sqlite3_mutex *getStaticMutexPointer($/;"	f	file:
getStmtPointer	test1.c	/^static int getStmtPointer($/;"	f	file:
getTempStore	pragma.c	/^static int getTempStore(const char *z){$/;"	f	file:
getTextArg	printf.c	/^static char *getTextArg(PrintfArguments *p){$/;"	f	file:
getVarint	sqliteInt.h	3873;"	d
getVarint32	sqliteInt.h	3868;"	d
getWin32Handle	test1.c	/^int getWin32Handle(Tcl_Interp *interp, const char *zA, LPHANDLE phFile){$/;"	f
get_autocommit	sqlite3ext.h	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
get_autocommit	test1.c	/^static int SQLITE_TCLAPI get_autocommit($/;"	f	file:
get_auxdata	sqlite3ext.h	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines
get_sqlite_pointer	test1.c	/^static int SQLITE_TCLAPI get_sqlite_pointer($/;"	f	file:
get_table	sqlite3ext.h	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines
getrusage	shell.c	197;"	d	file:
globInfo	func.c	/^static const struct compareInfo globInfo = { '*', '?', '[', 0 };$/;"	v	typeref:struct:compareInfo	file:
globalDb	shell.c	/^static sqlite3 *globalDb = 0;$/;"	v	file:
global_recover	sqlite3ext.h	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines
groupConcatFinalize	func.c	/^static void groupConcatFinalize(sqlite3_context *context){$/;"	f	file:
groupConcatStep	func.c	/^static void groupConcatStep($/;"	f	file:
growOp3	vdbeaux.c	/^static SQLITE_NOINLINE int growOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f	file:
growOpArray	vdbeaux.c	/^static int growOpArray(Vdbe *v, int nOp){$/;"	f	file:
growVTrans	vtab.c	/^static int growVTrans(sqlite3 *db){$/;"	f	file:
grp	pcache1.c	/^  PGroup grp;                    \/* The global PGroup for mode (2) *\/$/;"	m	struct:PCacheGlobal	file:
h	date.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
h	os_unix.c	/^  int h;                              \/* The file descriptor *\/$/;"	m	struct:unixFile	file:
h	os_unix.c	/^  int h;                     \/* Open file descriptor *\/$/;"	m	struct:unixShmNode	file:
h	os_win.c	/^  HANDLE h;               \/* Handle for accessing the file *\/$/;"	m	struct:winFile	file:
h	test1.c	/^  HANDLE h;           \/* Handle of the file to be locked *\/$/;"	m	struct:win32FileLocker	file:
hFile	os_win.c	/^  winFile hFile;             \/* File handle from winOpen *\/$/;"	m	struct:winShmNode	file:
hHeap	os_win.c	/^  HANDLE hHeap; \/* The handle to our heap. *\/$/;"	m	struct:winMemData	file:
hMap	os_win.c	/^    HANDLE hMap;             \/* File handle from CreateFileMapping *\/$/;"	m	struct:winShmNode::ShmRegion	file:
hMap	os_win.c	/^  HANDLE hMap;                  \/* Handle for accessing memory mapping *\/$/;"	m	struct:winFile	file:
hMutex	os_win.c	/^  HANDLE hMutex;          \/* Mutex used to control access to shared lock *\/$/;"	m	struct:winFile	file:
hProcess	shell.c	/^static HANDLE hProcess;$/;"	v	file:
hShared	os_win.c	/^  HANDLE hShared;         \/* Shared memory segment used for locking *\/$/;"	m	struct:winFile	file:
halfFunc	test_loadext.c	/^static void halfFunc($/;"	f	file:
handleDeferredMoveto	vdbeaux.c	/^static int SQLITE_NOINLINE handleDeferredMoveto(VdbeCursor *p){$/;"	f	file:
handleMovedCursor	vdbeaux.c	/^static int SQLITE_NOINLINE handleMovedCursor(VdbeCursor *p){$/;"	f	file:
hasColumn	build.c	/^static int hasColumn(const i16 *aiCol, int nCol, int x){$/;"	f	file:
hasCompound	sqliteInt.h	/^  u8 hasCompound;      \/* Need to invoke convertCompoundSelectToSubquery() *\/$/;"	m	struct:Parse
hasHeldSharedLock	pager.c	/^  u8 hasHeldSharedLock;       \/* True if a shared lock has ever been held *\/$/;"	m	struct:Pager	file:
hasHotJournal	pager.c	/^static int hasHotJournal(Pager *pPager, int *pExists){$/;"	f	file:
hasIncrblobCur	btreeInt.h	/^  u8 hasIncrblobCur; \/* True if there are one or more Incrblob cursors *\/$/;"	m	struct:Btree
hasMutex	os_unix.c	/^  u8 hasMutex;               \/* True if holding the unixShmNode mutex *\/$/;"	m	struct:unixShm	file:
hasMutex	os_win.c	/^  u8 hasMutex;               \/* True if holding the winShmNode mutex *\/$/;"	m	struct:winShm	file:
hasReadConflicts	btree.c	/^static int hasReadConflicts(Btree *pBtree, Pgno iRoot){$/;"	f	file:
hasReadConflicts	btree.c	112;"	d	file:
hasSharedCacheTableLock	btree.c	/^static int hasSharedCacheTableLock($/;"	f	file:
hasSharedCacheTableLock	btree.c	111;"	d	file:
hasTimer	shell.c	/^static int hasTimer(void){$/;"	f	file:
hashString	test8.c	/^static int hashString(const char *zString){$/;"	f	file:
hdr	mem3.c	/^    } hdr;$/;"	m	union:Mem3Block::__anon22	typeref:struct:Mem3Block::__anon22::__anon23	file:
hdr	wal.c	/^  WalIndexHdr hdr;           \/* Wal-index header for current transaction *\/$/;"	m	struct:Wal	file:
hdrOffset	btreeInt.h	/^  u8 hdrOffset;        \/* 100 for page 1.  0 otherwise *\/$/;"	m	struct:MemPage
heap	btreeInt.h	/^  u32 *heap;        \/* Min-heap used for analyzing cell coverage *\/$/;"	m	struct:IntegrityCk
height	test_rtree.c	/^  double height;$/;"	m	struct:Cube	file:
heightOfExpr	expr.c	/^static void heightOfExpr(Expr *p, int *pnHeight){$/;"	f	file:
heightOfExprList	expr.c	/^static void heightOfExprList(ExprList *p, int *pnHeight){$/;"	f	file:
heightOfSelect	expr.c	/^static void heightOfSelect(Select *p, int *pnHeight){$/;"	f	file:
hex16Func	test1.c	/^static void hex16Func(sqlite3_context *p, int argc, sqlite3_value **argv){$/;"	f	file:
hex8Func	test1.c	/^static void hex8Func(sqlite3_context *p, int argc, sqlite3_value **argv){$/;"	f	file:
hexDigitValue	shell.c	/^static int hexDigitValue(char c){$/;"	f	file:
hexFunc	func.c	/^static void hexFunc($/;"	f	file:
hexToInt	test_malloc.c	/^static int hexToInt(int h){$/;"	f	file:
hexdigits	func.c	/^static const char hexdigits[] = {$/;"	v	file:
hexio_get_int	test_hexio.c	/^static int SQLITE_TCLAPI hexio_get_int($/;"	f	file:
hexio_read	test_hexio.c	/^static int SQLITE_TCLAPI hexio_read($/;"	f	file:
hexio_render_int16	test_hexio.c	/^static int SQLITE_TCLAPI hexio_render_int16($/;"	f	file:
hexio_render_int32	test_hexio.c	/^static int SQLITE_TCLAPI hexio_render_int32($/;"	f	file:
hexio_write	test_hexio.c	/^static int SQLITE_TCLAPI hexio_write($/;"	f	file:
highStress	test_pcache.c	/^  unsigned highStress;      \/* Call xStress agressively *\/$/;"	m	struct:testpcacheGlobalType	file:
hints	btreeInt.h	/^  u8 hints;                 \/* As configured by CursorSetHints() *\/$/;"	m	struct:BtCursor
ht	hash.h	/^  } *ht;$/;"	m	struct:Hash	typeref:struct:Hash::_ht
ht_slot	wal.c	/^typedef u16 ht_slot;$/;"	t	file:
htsize	hash.h	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash
i	os_win.c	/^  int i;              \/* XOR next input into a[i] *\/$/;"	m	struct:EntropyGatherer	file:
i	random.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
i	test_intarray.c	/^  int i;                       \/* Current cursor position *\/$/;"	m	struct:intarray_cursor	file:
i	vdbe.h	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::p4union
i	vdbeInt.h	/^    i64 i;              \/* Integer value used when MEM_Int is set in flags *\/$/;"	m	union:Mem::MemValue
i1	test_tclvar.c	/^  int i1;              \/* Current item in pList1 *\/$/;"	m	struct:tclvar_cursor	file:
i16	sqliteInt.h	/^typedef INT16_TYPE i16;            \/* 2-byte signed integer *\/$/;"	t
i2	test_tclvar.c	/^  int i2;              \/* Current item (if any) in pList2 *\/$/;"	m	struct:tclvar_cursor	file:
i64	sqliteInt.h	/^typedef sqlite_int64 i64;          \/* 8-byte signed integer *\/$/;"	t
i8	sqliteInt.h	/^typedef INT8_TYPE i8;              \/* 1-byte signed integer *\/$/;"	t
iAddr	vdbeaux.c	/^  int iAddr;                 \/* Address of next instruction to return *\/$/;"	m	struct:VdbeOpIter	file:
iAgg	sqliteInt.h	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr
iAlias	sqliteInt.h	/^        u16 iAlias;           \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item::__anon14::__anon15
iArg	pragma.h	/^  u32 iArg;                 \/* Extra argument *\/$/;"	m	struct:sPragmaNames
iArg	vdbeInt.h	/^  int iArg;                       \/* Index of function argument. *\/$/;"	m	struct:AuxData
iBatch	rowset.c	/^  int iBatch;                    \/* Current insert batch *\/$/;"	m	struct:RowSet	file:
iBegin	shell.c	/^static sqlite3_int64 iBegin;  \/* Wall-clock time at start *\/$/;"	v	file:
iBreak	whereInt.h	/^  int iBreak;               \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereInfo
iBufEnd	vdbesort.c	/^  int iBufEnd;                    \/* Last byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:
iBufStart	vdbesort.c	/^  int iBufStart;                  \/* First byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:
iBufferOfst	test_demovfs.c	/^  sqlite3_int64 iBufferOfst;      \/* Offset in file of zBuffer[0] *\/$/;"	m	struct:DemoFile	file:
iCacheCnt	sqliteInt.h	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse
iCacheLevel	sqliteInt.h	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse
iCallback	wal.c	/^  u32 iCallback;             \/* Value to pass to log callback (or 0) *\/$/;"	m	struct:Wal	file:
iCell	dbstat.c	/^  int iCell;$/;"	m	struct:StatPage	file:
iChange	wal.c	/^  u32 iChange;                    \/* Counter incremented each transaction *\/$/;"	m	struct:WalIndexHdr	file:
iChildPg	dbstat.c	/^  u32 iChildPg;                   \/* Child node (or 0 if this is a leaf) *\/$/;"	m	struct:StatCell	file:
iClock	test_sqllog.c	/^  int iClock;                     \/* Clock value *\/$/;"	m	struct:SLGlobal	file:
iCnt	test_vfs.c	/^  int iCnt;                       \/* Remaining calls before fault injection *\/$/;"	m	struct:TestFaultInject	file:
iCol	analyze.c	/^  int iCol;                       \/* If !isPSample, the reason for inclusion *\/$/;"	m	struct:Stat4Sample	file:
iCol	vdbeblob.c	/^  int iCol;               \/* Table column this handle is open on *\/$/;"	m	struct:Incrblob	file:
iColumn	sqliteInt.h	/^    i16 iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache
iColumn	sqliteInt.h	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col
iColumn	sqliteInt.h	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr
iConstExprReg	sqliteInt.h	/^      int iConstExprReg;      \/* Register in which Expr value is cached *\/$/;"	m	union:ExprList::ExprList_item::__anon14
iContinue	whereInt.h	/^  int iContinue;            \/* Jump here to continue with next record *\/$/;"	m	struct:WhereInfo
iCountdown	test_malloc.c	/^  int iCountdown;         \/* Number of pending successes before a failure *\/$/;"	m	struct:MemFault	file:
iCrash	test6.c	/^  int iCrash;                  \/* Crash on the iCrash'th call to xSync() *\/$/;"	m	struct:CrashGlobal	file:
iCur	expr.c	/^  int iCur;        \/* Cursor number for the table corresponding to the index *\/$/;"	m	struct:IdxCover	file:
iCur	sqliteInt.h	/^    int iCur;                                  \/* A cursor number *\/$/;"	m	union:Walker::__anon19
iCur	whereInt.h	/^        int iCur;              \/* The VDBE cursor used by this IN operator *\/$/;"	m	struct:WhereLevel::__anon3::__anon4::InLoop
iCurrentTime	vdbeInt.h	/^  i64 iCurrentTime;       \/* Value of julianday('now') for this statement *\/$/;"	m	struct:Vdbe
iCursor	sqliteInt.h	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item
iDataVersion	btreeInt.h	/^  u32 iDataVersion;  \/* Combines with pBt->pPager->iDataVersion *\/$/;"	m	struct:Btree
iDataVersion	pager.c	/^  u32 iDataVersion;           \/* Changes whenever database content changes *\/$/;"	m	struct:Pager	file:
iDb	build.c	/^  int iDb;             \/* The database containing the table to be locked *\/$/;"	m	struct:TableLock	file:
iDb	dbstat.c	/^  int iDb;                        \/* Index of database to analyze *\/$/;"	m	struct:StatTable	file:
iDb	dbstat.c	/^  int iDb;                        \/* Schema used for this query *\/$/;"	m	struct:StatCursor	file:
iDb	sqliteInt.h	/^    u8 iDb;                     \/* Which db file is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo
iDb	sqliteInt.h	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo
iDb	sqliteInt.h	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:__anon18
iDb	vdbeInt.h	/^  i8 iDb;               \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor
iDestSchema	backup.c	/^  u32 iDestSchema;         \/* Original schema cookie in destination *\/$/;"	m	struct:sqlite3_backup	file:
iDevchar	test_vfs.c	/^  int iDevchar;$/;"	m	struct:Testvfs	file:
iDeviceChar	test_devsym.c	/^  int iDeviceChar;$/;"	m	struct:DevsymGlobal	file:
iDeviceCharacteristics	test6.c	/^  int iDeviceCharacteristics;  \/* Value of simulated device characteristics *\/$/;"	m	struct:CrashGlobal	file:
iDistinct	sqliteInt.h	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func
iDivisor	bitvec.c	/^  u32 iDivisor;   \/* Number of bits handled by each apSub[] entry. *\/$/;"	m	struct:Bitvec	file:
iECursor	select.c	/^  int iECursor;         \/* Cursor number for the sorter *\/$/;"	m	struct:SortCtx	file:
iEof	vdbesort.c	/^  i64 iEof;                       \/* Bytes of data stored in pFd *\/$/;"	m	struct:SorterFile	file:
iEof	vdbesort.c	/^  i64 iEof;                   \/* 1 byte past EOF for this PmaReader *\/$/;"	m	struct:PmaReader	file:
iEquiv	whereInt.h	/^  unsigned char iEquiv;      \/* Next unused slot in aEquiv[] *\/$/;"	m	struct:WhereScan
iFileId	test_osinst.c	/^  int iFileId;                    \/* File id number *\/$/;"	m	struct:VfslogFile	file:
iFixedOp	sqliteInt.h	/^  int iFixedOp;        \/* Never back out opcodes iFixedOp-1 or earlier *\/$/;"	m	struct:Parse
iForeGuard	mem2.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	file:
iFrom	sqliteInt.h	/^    int iFrom;            \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap
iFrom	whereInt.h	/^  u8 iFrom;             \/* Which entry in the FROM clause *\/$/;"	m	struct:WhereLevel
iGeneration	sqliteInt.h	/^  int iGeneration;     \/* Generation counter.  Incremented with each change *\/$/;"	m	struct:Schema
iGet	analyze.c	/^  int iGet;                 \/* Index of current sample accessed by stat_get() *\/$/;"	m	struct:Stat4Accum	file:
iHash	analyze.c	/^  u32 iHash;                      \/* Tiebreaker hash *\/$/;"	m	struct:Stat4Sample	file:
iHdrOffset	pager.c	/^  i64 iHdrOffset;              \/* See above *\/$/;"	m	struct:PagerSavepoint	file:
iHdrOffset	vdbeInt.h	/^  u32 iHdrOffset;       \/* Offset to next unparsed byte of the header *\/$/;"	m	struct:VdbeCursor
iIdxCur	whereInt.h	/^  int iIdxCur;          \/* The VDBE cursor used to access pIdx *\/$/;"	m	struct:WhereLevel
iIdxCur	wherecode.c	/^  int iIdxCur;    \/* Cursor for the index, if pIdx!=0.  Unused otherwise *\/$/;"	m	struct:CCurHint	file:
iIndent	shell.c	/^  int iIndent;           \/* Index of current op in aiIndent[] *\/$/;"	m	struct:ShellState	file:
iJD	date.c	/^  sqlite3_int64 iJD; \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	file:
iKey	pcache1.c	/^  unsigned int iKey;             \/* Key value (page number) *\/$/;"	m	struct:PgHdr1	file:
iKey1	vdbeInt.h	/^  i64 iKey1;                      \/* First key value passed to hook *\/$/;"	m	struct:PreUpdate
iKey2	vdbeInt.h	/^  i64 iKey2;                      \/* Second key value passed to hook *\/$/;"	m	struct:PreUpdate
iLeftJoin	whereInt.h	/^  int iLeftJoin;        \/* Memory cell used to implement LEFT OUTER JOIN *\/$/;"	m	struct:WhereLevel
iLevel	sqliteInt.h	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache
iLevel	sqliteInt.h	/^  int iLevel;             \/* Which level of the tree we are on *\/$/;"	m	struct:TreeView
iLikeRepCntr	whereInt.h	/^  u32 iLikeRepCntr;     \/* LIKE range processing counter register (times 2) *\/$/;"	m	struct:WhereLevel
iLimit	sqliteInt.h	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select
iLimit	test_quota.c	/^  sqlite3_int64 iLimit;          \/* Upper bound on total file size *\/$/;"	m	struct:quotaGroup	file:
iLimit	whereInt.h	/^  LogEst iLimit;            \/* LIMIT if wctrlFlags has WHERE_USE_LIMIT *\/$/;"	m	struct:WhereInfo
iLog	test_sqllog.c	/^  int iLog;                       \/* First integer value used in file names *\/$/;"	m	struct:SLConn	file:
iMagic	test_pcache.c	/^  unsigned iMagic;          \/* Magic number for sanity checking *\/$/;"	m	struct:testpcache	file:
iMaster	mem3.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	file:
iMaxKey	pcache1.c	/^  unsigned int iMaxKey;               \/* Largest key seen since xTruncate() *\/$/;"	m	struct:PCache1	file:
iMaxOff	test_journal.c	/^  sqlite3_int64 iMaxOff;   \/* Maximum offset written to this transaction *\/$/;"	m	struct:jt_file	file:
iMem	sqliteInt.h	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col
iMem	sqliteInt.h	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func
iMemory	vdbesort.c	/^  int iMemory;                    \/* Offset of free space in list.aMemory *\/$/;"	m	struct:VdbeSorter	file:
iMin	analyze.c	/^  int iMin;                 \/* Index in a[] of entry with minimum score *\/$/;"	m	struct:Stat4Accum	file:
iNewReg	vdbeInt.h	/^  int iNewReg;                    \/* Register for new.* values *\/$/;"	m	struct:PreUpdate
iNext	backup.c	/^  Pgno iNext;              \/* Page number of the next source page to copy *\/$/;"	m	struct:sqlite3_backup	file:
iNext	vdbesort.c	/^    int iNext;                    \/* Offset within aMemory of next record *\/$/;"	m	union:SorterRecord::__anon2	file:
iNext	wal.c	/^    int iNext;                    \/* Next slot in aIndex[] not yet returned *\/$/;"	m	struct:WalIterator::WalSegment	file:
iNextDb	test_sqllog.c	/^  int iNextDb;                    \/* Used to allocate database file names *\/$/;"	m	struct:SLGlobal	file:
iNextFileId	test_osinst.c	/^  int iNextFileId;                \/* Next file id *\/$/;"	m	struct:VfslogVfs	file:
iNextLog	test_sqllog.c	/^  int iNextLog;                   \/* Used to allocate file names *\/$/;"	m	struct:SLGlobal	file:
iNextSelectId	sqliteInt.h	/^  int iNextSelectId;        \/* Next available select ID for EXPLAIN output *\/$/;"	m	struct:Parse
iOffset	dbstat.c	/^  i64 iOffset;                    \/* Value of 'pgOffset' column *\/$/;"	m	struct:StatCursor	file:
iOffset	memjournal.c	/^  sqlite3_int64 iOffset;          \/* Offset from the beginning of the file *\/$/;"	m	struct:FilePoint	file:
iOffset	pager.c	/^  i64 iOffset;                 \/* Starting offset in main journal *\/$/;"	m	struct:PagerSavepoint	file:
iOffset	sqliteInt.h	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select
iOffset	test6.c	/^  i64 iOffset;                 \/* Byte offset of the start of this write() *\/$/;"	m	struct:WriteBuffer	file:
iOffset	test_osinst.c	/^  sqlite3_int64 iOffset;          \/* Log file offset of start of write buffer *\/$/;"	m	struct:VfslogVfs	file:
iOffset	test_osinst.c	/^  sqlite3_int64 iOffset;          \/* Offset of next record in file *\/$/;"	m	struct:VfslogCsr	file:
iOffset	vdbeblob.c	/^  int iOffset;            \/* Byte offset of blob in cursor data *\/$/;"	m	struct:Incrblob	file:
iOfst	test_quota.c	/^  sqlite3_int64 iOfst;    \/* Current offset into the file *\/$/;"	m	struct:quota_FILE	file:
iOp	vdbeInt.h	/^  int iOp;                        \/* Instruction number of OP_Function opcode *\/$/;"	m	struct:AuxData
iOp	vdbeInt.h	/^  int iOp;                \/* Instruction number of OP_Function *\/$/;"	m	struct:sqlite3_context
iOrderByCol	sqliteInt.h	/^        u16 iOrderByCol;      \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item::__anon14::__anon15
iOvfl	dbstat.c	/^  int iOvfl;                      \/* Iterates through aOvfl[] *\/$/;"	m	struct:StatCell	file:
iPKey	sqliteInt.h	/^  i16 iPKey;           \/* If not negative, use aCol[iPKey] as the rowid *\/$/;"	m	struct:Table
iPKey	vdbeInt.h	/^  int iPKey;                      \/* If not negative index of IPK column *\/$/;"	m	struct:PreUpdate
iPage	btreeInt.h	/^  i8 iPage;                 \/* Index of current page in apPage *\/$/;"	m	struct:BtCursor
iPage	dbstat.c	/^  int iPage;                      \/* Current entry in aPage[] *\/$/;"	m	struct:StatCursor	file:
iPageno	dbstat.c	/^  u32 iPageno;                    \/* Value of 'pageno' column *\/$/;"	m	struct:StatCursor	file:
iParent	whereInt.h	/^  int iParent;            \/* Disable pWC->a[iParent] when this term disabled *\/$/;"	m	struct:WhereTerm
iPgno	dbstat.c	/^  u32 iPgno;$/;"	m	struct:StatPage	file:
iPkSortOrder	sqliteInt.h	/^  u8 iPkSortOrder;          \/* ASC or DESC for INTEGER PRIMARY KEY *\/$/;"	m	struct:Parse
iPrev	vdbesort.c	/^  u8 iPrev;                       \/* Previous thread used to flush PMA *\/$/;"	m	struct:VdbeSorter	file:
iPrior	wal.c	/^  int iPrior;                     \/* Last result returned from the iterator *\/$/;"	m	struct:WalIterator	file:
iPrn	analyze.c	/^  u32 iPrn;                 \/* Pseudo-random number used for sampling *\/$/;"	m	struct:Stat4Accum	file:
iRand	test_pcache.c	/^  unsigned iRand;           \/* State of the PRNG *\/$/;"	m	struct:testpcache	file:
iRangeReg	sqliteInt.h	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse
iReCksum	wal.c	/^  u32 iReCksum;              \/* On commit, recalculate checksums from here *\/$/;"	m	struct:Wal	file:
iReadOff	vdbesort.c	/^  i64 iReadOff;               \/* Current read offset *\/$/;"	m	struct:PmaReader	file:
iReg	sqliteInt.h	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache
iRightChildPg	dbstat.c	/^  u32 iRightChildPg;              \/* Right-child page number (or 0) *\/$/;"	m	struct:StatPage	file:
iRightJoinTable	sqliteInt.h	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr
iRowid	analyze.c	/^    i64 iRowid;                     \/* Rowid in main table of the key *\/$/;"	m	union:Stat4Sample::__anon9	file:
iRowid	test_fs.c	/^  sqlite3_int64 iRowid;$/;"	m	struct:FsdirCsr	file:
iRowid	test_osinst.c	/^  sqlite3_int64 iRowid;           \/* Current rowid. *\/$/;"	m	struct:VfslogCsr	file:
iSDParm	sqliteInt.h	/^  int iSDParm;         \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest
iSavepoint	sqliteInt.h	/^  int iSavepoint;           \/* Depth of the SAVEPOINT stack *\/$/;"	m	struct:VTable
iSdst	sqliteInt.h	/^  int iSdst;           \/* Base register where results are written *\/$/;"	m	struct:SelectDest
iSectorSize	test6.c	/^  int iSectorSize;             \/* Value of simulated sector size *\/$/;"	m	struct:CrashGlobal	file:
iSectorSize	test_devsym.c	/^  int iSectorSize;$/;"	m	struct:DevsymGlobal	file:
iSectorsize	test_vfs.c	/^  int iSectorsize;$/;"	m	struct:Testvfs	file:
iSeek	tclsqlite.c	/^  int iSeek;                \/* Current seek offset *\/$/;"	m	struct:IncrblobChannel	file:
iSelectID	vdbeInt.h	/^  int iSelectID;                  \/* The "Select-ID" for this loop *\/$/;"	m	struct:ScanStatus
iSelectId	sqliteInt.h	/^    u8 iSelectId;     \/* If pSelect!=0, the id of the sub-select in EQP *\/$/;"	m	struct:SrcList::SrcList_item
iSelectId	sqliteInt.h	/^  int iSelectId;            \/* ID of current select for EXPLAIN output *\/$/;"	m	struct:Parse
iSelfTab	sqliteInt.h	/^  int iSelfTab;        \/* Table of an index whose exprs are being coded *\/$/;"	m	struct:Parse
iSize	bitvec.c	/^  u32 iSize;      \/* Maximum bit index.  Max iSize is 4,294,967,296. *\/$/;"	m	struct:Bitvec	file:
iSize	mem2.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	file:
iSize	test6.c	/^  i64 iSize;                           \/* Size of file in bytes *\/$/;"	m	struct:CrashFile	file:
iSize	test_quota.c	/^  sqlite3_int64 iSize;            \/* Current size of this file *\/$/;"	m	struct:quotaFile	file:
iSize	test_quota.c	/^  sqlite3_int64 iSize;           \/* Current size of all files *\/$/;"	m	struct:quotaGroup	file:
iSortIdx	whereInt.h	/^  u8 iSortIdx;          \/* Sorting index number.  0==None *\/$/;"	m	struct:WhereLoop
iSorterColumn	sqliteInt.h	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col
iSrcLine	vdbe.h	/^  int iSrcLine;            \/* Source-code line that generated this opcode *\/$/;"	m	struct:VdbeOp
iStartOff	vdbesort.c	/^  i64 iStartOff;                  \/* Offset to start writing file at *\/$/;"	m	struct:IncrMerger	file:
iStatement	vdbeInt.h	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe
iSub	vdbeaux.c	/^  int iSub;                  \/* 0 = main program, 1 = first sub-program etc. *\/$/;"	m	struct:VdbeOpIter	file:
iSubRec	pager.c	/^  Pgno iSubRec;                \/* Index of first record in sub-journal *\/$/;"	m	struct:PagerSavepoint	file:
iSum	func.c	/^  i64 iSum;         \/* Integer sum *\/   $/;"	m	struct:SumCtx	file:
iSyncPoint	wal.c	/^  sqlite3_int64 iSyncPoint;    \/* Fsync at this offset *\/$/;"	m	struct:WalWriter	file:
iSysErrno	sqliteInt.h	/^  int iSysErrno;                \/* Errno value from last system error *\/$/;"	m	struct:sqlite3
iTab	build.c	/^  int iTab;            \/* The root page of the table to be locked *\/$/;"	m	struct:TableLock	file:
iTab	whereInt.h	/^  u8 iTab;              \/* Position in FROM clause of table for this loop *\/$/;"	m	struct:WhereLoop
iTabCur	whereInt.h	/^  int iTabCur;          \/* The VDBE cursor used to access the table *\/$/;"	m	struct:WhereLevel
iTabCur	wherecode.c	/^  int iTabCur;    \/* Cursor for the main table *\/$/;"	m	struct:CCurHint	file:
iTable	btreeInt.h	/^  Pgno iTable;          \/* Root page of table *\/$/;"	m	struct:BtLock
iTable	sqliteInt.h	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col
iTable	sqliteInt.h	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache
iTable	sqliteInt.h	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr
iTop	whereInt.h	/^  int iTop;                 \/* The very beginning of the WHERE loop *\/$/;"	m	struct:WhereInfo
iVal	vdbemem.c	/^  int iVal;$/;"	m	struct:ValueNewStat4Ctx	file:
iValue	sqliteInt.h	/^    int iValue;            \/* Non-negative integer value if EP_IntValue *\/$/;"	m	union:Expr::__anon12
iVersion	wal.c	/^  u32 iVersion;                   \/* Wal-index version *\/$/;"	m	struct:WalIndexHdr	file:
iWriteOff	vdbesort.c	/^  i64 iWriteOff;                  \/* Offset of start of buffer in file *\/$/;"	m	struct:PmaWriter	file:
iZero	wal.c	/^    int iZero;                    \/* Frame number associated with aPgno[0] *\/$/;"	m	struct:WalIterator::WalSegment	file:
id	mutex_noop.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	file:
id	mutex_unix.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	mutex_w32.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	os_unix.c	/^  u8 id;                     \/* Id of this connection within its unixShmNode *\/$/;"	m	struct:unixShm	file:
id	os_win.c	/^  u8 id;                     \/* Id of this connection with its winShmNode *\/$/;"	m	struct:winShm	file:
id	threads.c	/^  unsigned id;             \/* The thread identifier *\/$/;"	m	struct:SQLiteThread	file:
identLength	build.c	/^static int identLength(const char *z){$/;"	f	file:
identPut	build.c	/^static void identPut(char *z, int *pIdx, char *zSignedIdent){$/;"	f	file:
idx	sqliteInt.h	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item
idxHash	sqliteInt.h	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema
idxNum	whereInt.h	/^      int idxNum;            \/* Index number *\/$/;"	m	struct:WhereLoop::__anon5::__anon7
idxStr	whereInt.h	/^      char *idxStr;          \/* Index identifier string *\/$/;"	m	struct:WhereLoop::__anon5::__anon7
idxType	sqliteInt.h	/^  unsigned idxType:2;      \/* 1==UNIQUE, 2==PRIMARY KEY, 0==CREATE INDEX *\/$/;"	m	struct:Index
idxaff	whereInt.h	/^  char idxaff;               \/* Must match this affinity, if zCollName!=NULL *\/$/;"	m	struct:WhereScan
import_append_char	shell.c	/^static void import_append_char(ImportCtx *p, int c){$/;"	f	file:
imposterTable	sqliteInt.h	/^    u8 imposterTable;           \/* Building an imposter table *\/$/;"	m	struct:sqlite3::sqlite3InitInfo
in	shell.c	/^  FILE *in;           \/* Read the CSV text from this input stream *\/$/;"	m	struct:ImportCtx	file:
in	tclsqlite.c	/^  unsigned char in[64];$/;"	m	struct:MD5Context	file:
in	whereInt.h	/^    } in;                 \/* Used when pWLoop->wsFlags&WHERE_IN_ABLE *\/$/;"	m	union:WhereLevel::__anon3	typeref:struct:WhereLevel::__anon3::__anon4
inNormalWrite	os_unix.c	/^  unsigned char inNormalWrite;   \/* True if in a normal write operation *\/$/;"	m	struct:unixFile	file:
inProgress	sqliteInt.h	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config
inTrans	btreeInt.h	/^  u8 inTrans;        \/* TRANS_NONE, TRANS_READ or TRANS_WRITE *\/$/;"	m	struct:Btree
inTransaction	btreeInt.h	/^  u8 inTransaction;     \/* Transaction state *\/$/;"	m	struct:BtShared
inTransaction	test8.c	/^  int inTransaction;      \/* True if within a transaction *\/$/;"	m	struct:echo_vtab	file:
incrAggDepth	resolve.c	/^static int incrAggDepth(Walker *pWalker, Expr *pExpr){$/;"	f	file:
incrAggFunctionDepth	resolve.c	/^static void incrAggFunctionDepth(Expr *pExpr, int N){$/;"	f	file:
incrVacuum	btreeInt.h	/^  u8 incrVacuum;        \/* True if incr-vacuum is enabled *\/$/;"	m	struct:BtShared
incrVacuumStep	btree.c	/^static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg, int bCommit){$/;"	f	file:
incrblobClose	tclsqlite.c	/^static int SQLITE_TCLAPI incrblobClose($/;"	f	file:
incrblobHandle	tclsqlite.c	/^static int SQLITE_TCLAPI incrblobHandle($/;"	f	file:
incrblobInput	tclsqlite.c	/^static int SQLITE_TCLAPI incrblobInput($/;"	f	file:
incrblobOutput	tclsqlite.c	/^static int SQLITE_TCLAPI incrblobOutput($/;"	f	file:
incrblobSeek	tclsqlite.c	/^static int SQLITE_TCLAPI incrblobSeek($/;"	f	file:
incrblobWatch	tclsqlite.c	/^static void SQLITE_TCLAPI incrblobWatch($/;"	f	file:
indexColumnNotNull	where.c	/^static int indexColumnNotNull(Index *pIdx, int iCol){$/;"	f	file:
indexMightHelpWithOrderBy	where.c	/^static int indexMightHelpWithOrderBy($/;"	f	file:
indexable	whereInt.h	/^  Bitmask indexable;       \/* Bitmask of all indexable tables in the clause *\/$/;"	m	struct:WhereOrInfo
info	btreeInt.h	/^  CellInfo info;            \/* A parse of the cell we are pointing at *\/$/;"	m	struct:BtCursor
init	sqliteInt.h	/^  } init;$/;"	m	struct:sqlite3	typeref:struct:sqlite3::sqlite3InitInfo
initAvgEq	analyze.c	/^static void initAvgEq(Index *pIdx){$/;"	f	file:
initMaskSet	whereInt.h	379;"	d
init_all	tclsqlite.c	/^static void init_all(Tcl_Interp *interp){$/;"	f	file:
init_all_cmd	tclsqlite.c	/^static int SQLITE_TCLAPI init_all_cmd($/;"	f	file:
init_wrapper_clear	test_init.c	/^static int SQLITE_TCLAPI init_wrapper_clear($/;"	f	file:
init_wrapper_install	test_init.c	/^static int SQLITE_TCLAPI init_wrapper_install($/;"	f	file:
init_wrapper_query	test_init.c	/^static int SQLITE_TCLAPI init_wrapper_query($/;"	f	file:
init_wrapper_uninstall	test_init.c	/^static int SQLITE_TCLAPI init_wrapper_uninstall($/;"	f	file:
ino	os_unix.c	/^  ino_t ino;                  \/* Inode number *\/$/;"	m	struct:unixFileId	file:
ino_t	test_windirent.h	/^  typedef unsigned short ino_t;$/;"	t
inodeList	os_unix.c	/^static unixInodeInfo *inodeList = 0;$/;"	v	file:
input	parse.y	/^input ::= cmdlist.$/;"	l
insertCell	btree.c	/^static void insertCell($/;"	f	file:
insertElement	hash.c	/^static void insertElement($/;"	f	file:
installInitWrappers	test_init.c	/^static void installInitWrappers(void){$/;"	f	file:
installTestPCache	test_pcache.c	/^void installTestPCache($/;"	f
instrFunc	func.c	/^static void instrFunc($/;"	f	file:
intKey	btreeInt.h	/^  u8 intKey;           \/* True if table b-trees.  False for index b-trees *\/$/;"	m	struct:MemPage
intKeyLeaf	btreeInt.h	/^  u8 intKeyLeaf;       \/* True if the leaf of an intKey table *\/$/;"	m	struct:MemPage
intarrayBestIndex	test_intarray.c	/^static int intarrayBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
intarrayClose	test_intarray.c	/^static int intarrayClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
intarrayColumn	test_intarray.c	/^static int intarrayColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
intarrayCreate	test_intarray.c	/^static int intarrayCreate($/;"	f	file:
intarrayDestroy	test_intarray.c	/^static int intarrayDestroy(sqlite3_vtab *p){$/;"	f	file:
intarrayEof	test_intarray.c	/^static int intarrayEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
intarrayFilter	test_intarray.c	/^static int intarrayFilter($/;"	f	file:
intarrayFree	test_intarray.c	/^static void intarrayFree(sqlite3_intarray *p){$/;"	f	file:
intarrayModule	test_intarray.c	/^static sqlite3_module intarrayModule = {$/;"	v	file:
intarrayNext	test_intarray.c	/^static int intarrayNext(sqlite3_vtab_cursor *cur){$/;"	f	file:
intarrayOpen	test_intarray.c	/^static int intarrayOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
intarrayRowid	test_intarray.c	/^static int intarrayRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){$/;"	f	file:
intarray_cursor	test_intarray.c	/^struct intarray_cursor {$/;"	s	file:
intarray_cursor	test_intarray.c	/^typedef struct intarray_cursor intarray_cursor;$/;"	t	typeref:struct:intarray_cursor	file:
intarray_vtab	test_intarray.c	/^struct intarray_vtab {$/;"	s	file:
intarray_vtab	test_intarray.c	/^typedef struct intarray_vtab intarray_vtab;$/;"	t	typeref:struct:intarray_vtab	file:
integerValue	shell.c	/^static sqlite3_int64 integerValue(const char *zArg){$/;"	f	file:
interp	tclsqlite.c	/^  Tcl_Interp *interp;        \/* The interpreter used for this database *\/$/;"	m	struct:SqliteDb	file:
interp	tclsqlite.c	/^  Tcl_Interp *interp;   \/* The TCL interpret to execute the function *\/$/;"	m	struct:SqlCollate	file:
interp	tclsqlite.c	/^  Tcl_Interp *interp;   \/* The TCL interpret to execute the function *\/$/;"	m	struct:SqlFunc	file:
interp	test1.c	/^  Tcl_Interp *interp;$/;"	m	struct:CreateFunctionV2	file:
interp	test1.c	/^  Tcl_Interp *interp;$/;"	m	struct:TestCollationX	file:
interp	test8.c	/^  Tcl_Interp *interp;     \/* Tcl interpreter containing debug variables *\/$/;"	m	struct:echo_vtab	file:
interp	test8.c	/^  Tcl_Interp *interp;$/;"	m	struct:EchoModule	file:
interp	test_bestindex.c	/^  Tcl_Interp *interp;$/;"	m	struct:tcl_vtab	file:
interp	test_quota.c	/^  Tcl_Interp *interp;    \/* Interpreter in which to run the script *\/$/;"	m	struct:TclQuotaCallback	file:
interp	test_superlock.c	/^  Tcl_Interp *interp;$/;"	m	struct:InterpAndScript	file:
interp	test_tclvar.c	/^  Tcl_Interp *interp;$/;"	m	struct:tclvar_vtab	file:
interp	test_thread.c	/^  Tcl_Interp *interp;      \/* Parent interpreter *\/$/;"	m	struct:SqlThread	file:
interp	test_thread.c	/^  Tcl_Interp *interp;      \/* The interpreter to execute it in. *\/$/;"	m	struct:EvalEvent	file:
interp	test_vfs.c	/^  Tcl_Interp *interp;             \/* Interpreter to run script in *\/$/;"	m	struct:Testvfs	file:
interrupt_handler	shell.c	/^static void interrupt_handler(int NotUsed){$/;"	f	file:
interruptx	sqlite3ext.h	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
invalidateAllOverflowCache	btree.c	/^static void invalidateAllOverflowCache(BtShared *pBt){$/;"	f	file:
invalidateIncrblobCursors	btree.c	/^static void invalidateIncrblobCursors($/;"	f	file:
invalidateIncrblobCursors	btree.c	521;"	d	file:
invalidateOverflowCache	btree.c	472;"	d	file:
invalidateTempStorage	pragma.c	/^static int invalidateTempStorage(Parse *pParse){$/;"	f	file:
invokeProfileCallback	vdbeapi.c	/^static SQLITE_NOINLINE void invokeProfileCallback(sqlite3 *db, Vdbe *p){$/;"	f	file:
invokeValueDestructor	vdbeapi.c	/^static int invokeValueDestructor($/;"	f	file:
io_trace_callback	test1.c	/^static void io_trace_callback(const char *zFormat, ...){$/;"	f	file:
ioerr_err	test_vfs.c	/^  TestFaultInject ioerr_err;$/;"	m	struct:Testvfs	file:
iotrace	shell.c	/^static FILE *iotrace = 0;$/;"	v	file:
iotracePrintf	shell.c	/^static void SQLITE_CDECL iotracePrintf(const char *zFormat, ...){$/;"	f	file:
iotrace_file	test1.c	/^static FILE *iotrace_file = 0;$/;"	v	file:
isAnchor	pcache1.c	/^  u8 isAnchor;                   \/* This is the PGroup.lru element *\/$/;"	m	struct:PgHdr1	file:
isAttached	backup.c	/^  int isAttached;          \/* True once backup has been registered with pager *\/$/;"	m	struct:sqlite3_backup	file:
isBenignMode	test_malloc.c	/^  int isBenignMode;       \/* True if malloc failures are considered benign *\/$/;"	m	struct:MemFault	file:
isBulkLocal	pcache1.c	/^  u8 isBulkLocal;                \/* This page from bulk local storage *\/$/;"	m	struct:PgHdr1	file:
isCandidateForInOpt	expr.c	/^static Select *isCandidateForInOpt(Expr *pX){$/;"	f	file:
isCorrelated	sqliteInt.h	/^      unsigned isCorrelated :1;  \/* True if sub-query is correlated *\/$/;"	m	struct:SrcList::SrcList_item::__anon16
isCovering	sqliteInt.h	/^  unsigned isCovering:1;   \/* True if this is a covering index *\/$/;"	m	struct:Index
isDate	date.c	/^static int isDate($/;"	f	file:
isDeferred	sqliteInt.h	/^  u8 isDeferred;       \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey
isDistinctRedundant	where.c	/^static int isDistinctRedundant($/;"	f	file:
isEof	dbstat.c	/^  int isEof;                      \/* After pStmt has returned SQLITE_DONE *\/$/;"	m	struct:StatCursor	file:
isEphemeral	vdbeInt.h	/^  Bool isEphemeral:1;   \/* True for an ephemeral table *\/$/;"	m	struct:VdbeCursor
isErr	test_sqllog.c	/^  int isErr;                      \/* True if an error has occurred *\/$/;"	m	struct:SLConn	file:
isError	vdbeInt.h	/^  int isError;            \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context
isFatalError	backup.c	/^static int isFatalError(int rc){$/;"	f	file:
isFullshm	test_vfs.c	/^  int isFullshm;$/;"	m	struct:Testvfs	file:
isIndexedBy	sqliteInt.h	/^      unsigned isIndexedBy :1;   \/* True if there is an INDEXED BY clause *\/$/;"	m	struct:SrcList::SrcList_item::__anon16
isInit	btreeInt.h	/^  u8 isInit;           \/* True if previously initialized. MUST BE FIRST! *\/$/;"	m	struct:MemPage
isInit	pcache1.c	/^  int isInit;                    \/* True if initialized *\/$/;"	m	struct:PCacheGlobal	file:
isInit	random.c	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType	file:
isInit	sqliteInt.h	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config
isInit	tclsqlite.c	/^  int isInit;$/;"	m	struct:MD5Context	file:
isInit	test_mutex.c	/^  int isInit;                \/* True if initialized *\/$/;"	m	struct:test_mutex_globals	file:
isInit	wal.c	/^  u8 isInit;                      \/* 1 when initialized *\/$/;"	m	struct:WalIndexHdr	file:
isInitialized	test_multiplex.c	/^  int isInitialized;$/;"	m	struct:__anon20	file:
isInitialized	test_quota.c	/^  int isInitialized;$/;"	m	struct:__anon25	file:
isInstalled	test_async.c	/^  int isInstalled;                     \/* True when async VFS is installed *\/$/;"	m	struct:TestAsyncGlobal	file:
isInstalled	test_malloc.c	/^  int isInstalled;        \/* True if the fault simulation layer is installed *\/$/;"	m	struct:MemFault	file:
isInstalled	test_mutex.c	/^  int isInstalled;           \/* True if installed *\/$/;"	m	struct:test_mutex_globals	file:
isInterrupted	sqliteInt.h	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::__anon10
isLikeOrGlob	whereexpr.c	/^static int isLikeOrGlob($/;"	f	file:
isLookaside	malloc.c	/^static int isLookaside(sqlite3 *db, void *p){$/;"	f	file:
isLookaside	malloc.c	400;"	d	file:
isMallocInit	sqliteInt.h	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config
isMalloced	sqliteInt.h	3157;"	d
isMatchOfColumn	whereexpr.c	/^static int isMatchOfColumn($/;"	f	file:
isMultiWrite	sqliteInt.h	/^  u8 isMultiWrite;     \/* True if statement may modify\/insert multiple rows *\/$/;"	m	struct:Parse
isMutexInit	sqliteInt.h	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config
isNoshm	test_vfs.c	/^  int isNoshm;$/;"	m	struct:Testvfs	file:
isNumber	shell.c	/^static int isNumber(const char *z, int *realnum){$/;"	f	file:
isOpen	pager.c	813;"	d	file:
isOrdered	vdbeInt.h	/^  Bool isOrdered:1;     \/* True if the table is not BTREE_UNORDERED *\/$/;"	m	struct:VdbeCursor
isOrdered	whereInt.h	/^      i8 isOrdered;          \/* True if satisfies ORDER BY *\/$/;"	m	struct:WhereLoop::__anon5::__anon7
isOrdered	whereInt.h	/^  i8 isOrdered;         \/* No. of ORDER BY terms satisfied. -1 for unknown *\/$/;"	m	struct:WherePath
isPCacheInit	sqliteInt.h	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config
isPSample	analyze.c	/^  u8 isPSample;                   \/* True if a periodic sample *\/$/;"	m	struct:Stat4Sample	file:
isPattern	test8.c	/^  int isPattern;$/;"	m	struct:echo_vtab	file:
isPinned	pcache1.c	/^  u8 isPinned;                   \/* Page in use, not on the LRU list *\/$/;"	m	struct:PgHdr1	file:
isPinned	test_pcache.c	/^    int isPinned;              \/* True if the page is pinned *\/$/;"	m	struct:testpcache::testpcachePage	file:
isPrepareV2	vdbeInt.h	/^  bft isPrepareV2:1;      \/* True if prepared with prepare_v2() *\/$/;"	m	struct:Vdbe
isReadonly	os_unix.c	/^  u8 isReadonly;             \/* True if read-only *\/$/;"	m	struct:unixShmNode	file:
isRecursive	sqliteInt.h	/^      unsigned isRecursive :1;   \/* True for recursive reference in WITH *\/$/;"	m	struct:SrcList::SrcList_item::__anon16
isResized	sqliteInt.h	/^  unsigned isResized:1;    \/* True if resizeIndexObject() has been called *\/$/;"	m	struct:Index
isSetNullAction	fkey.c	/^static int isSetNullAction(Parse *pParse, FKey *pFKey){$/;"	f	file:
isSimpleCount	select.c	/^static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){$/;"	f	file:
isSorter	vdbe.c	178;"	d	file:
isSystemTable	alter.c	/^static int isSystemTable(Parse *pParse, const char *zName){$/;"	f	file:
isTabFunc	sqliteInt.h	/^      unsigned isTabFunc :1;     \/* True if table-valued-function syntax *\/$/;"	m	struct:SrcList::SrcList_item::__anon16
isTable	vdbeInt.h	/^  u8 isTable;           \/* True for rowid tables.  False for indexes *\/$/;"	m	struct:VdbeCursor
isTnct	select.c	/^  u8 isTnct;      \/* True if the DISTINCT keyword is present *\/$/;"	m	struct:DistinctCtx	file:
isTransactionSavepoint	sqliteInt.h	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3
isView	delete.c	277;"	d	file:
isView	delete.c	278;"	d	file:
isView	delete.c	581;"	d	file:
isView	insert.c	1071;"	d	file:
isView	insert.c	568;"	d	file:
isView	insert.c	569;"	d	file:
isView	update.c	170;"	d	file:
isView	update.c	171;"	d	file:
isView	update.c	700;"	d	file:
isWriteLock	build.c	/^  u8 isWriteLock;      \/* True for write lock.  False for a read lock *\/$/;"	m	struct:TableLock	file:
isatty	shell.c	104;"	d	file:
isatty	shell.c	131;"	d	file:
ix	whereInt.h	/^  int ix[BMS];                  \/* Cursor assigned to each bit *\/$/;"	m	struct:WhereMaskSet
j	random.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
jfd	pager.c	/^  sqlite3_file *jfd;          \/* File descriptor for main journal *\/$/;"	m	struct:Pager	file:
jointype	sqliteInt.h	/^      u8 jointype;      \/* Type of join between this table and the previous *\/$/;"	m	struct:SrcList::SrcList_item::__anon16
journalHdr	pager.c	/^  i64 journalHdr;             \/* Byte offset to previous journal header *\/$/;"	m	struct:Pager	file:
journalHdrOffset	pager.c	/^static i64 journalHdrOffset(Pager *pPager){$/;"	f	file:
journalMode	pager.c	/^  u8 journalMode;             \/* One of the PAGER_JOURNALMODE_* values *\/$/;"	m	struct:Pager	file:
journalOff	pager.c	/^  i64 journalOff;             \/* Current write offset in the journal file *\/$/;"	m	struct:Pager	file:
journalSizeLimit	pager.c	/^  i64 journalSizeLimit;       \/* Size limit for persistent journal files *\/$/;"	m	struct:Pager	file:
jrnlBufferSize	pager.c	/^static int jrnlBufferSize(Pager *pPager){$/;"	f	file:
jrnlBufferSize	pager.c	1175;"	d	file:
jtAccess	test_journal.c	/^static int jtAccess($/;"	f	file:
jtCheckReservedLock	test_journal.c	/^static int jtCheckReservedLock(sqlite3_file *pFile, int *pResOut){$/;"	f	file:
jtClose	test_journal.c	/^static int jtClose(sqlite3_file *pFile){$/;"	f	file:
jtCurrentTime	test_journal.c	/^static int jtCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){$/;"	f	file:
jtCurrentTimeInt64	test_journal.c	/^static int jtCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f	file:
jtDelete	test_journal.c	/^static int jtDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f	file:
jtDeviceCharacteristics	test_journal.c	/^static int jtDeviceCharacteristics(sqlite3_file *pFile){$/;"	f	file:
jtDlClose	test_journal.c	/^static void jtDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
jtDlError	test_journal.c	/^static void jtDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){$/;"	f	file:
jtDlOpen	test_journal.c	/^static void *jtDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f	file:
jtDlSym	test_journal.c	/^static void (*jtDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym))(void){$/;"	f	file:
jtFileControl	test_journal.c	/^static int jtFileControl(sqlite3_file *pFile, int op, void *pArg){$/;"	f	file:
jtFileSize	test_journal.c	/^static int jtFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){$/;"	f	file:
jtFullPathname	test_journal.c	/^static int jtFullPathname($/;"	f	file:
jtGetLastError	test_journal.c	/^static int jtGetLastError(sqlite3_vfs *pVfs, int n, char *z){$/;"	f	file:
jtLock	test_journal.c	/^static int jtLock(sqlite3_file *pFile, int eLock){$/;"	f	file:
jtObjCmd	test6.c	/^static int SQLITE_TCLAPI jtObjCmd($/;"	f	file:
jtOpen	test_journal.c	/^static int jtOpen($/;"	f	file:
jtRandomness	test_journal.c	/^static int jtRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f	file:
jtRead	test_journal.c	/^static int jtRead($/;"	f	file:
jtSectorSize	test_journal.c	/^static int jtSectorSize(sqlite3_file *pFile){$/;"	f	file:
jtSleep	test_journal.c	/^static int jtSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f	file:
jtSync	test_journal.c	/^static int jtSync(sqlite3_file *pFile, int flags){$/;"	f	file:
jtTruncate	test_journal.c	/^static int jtTruncate(sqlite3_file *pFile, sqlite_int64 size){$/;"	f	file:
jtUnlock	test_journal.c	/^static int jtUnlock(sqlite3_file *pFile, int eLock){$/;"	f	file:
jtUnregisterObjCmd	test6.c	/^static int SQLITE_TCLAPI jtUnregisterObjCmd($/;"	f	file:
jtWrite	test_journal.c	/^static int jtWrite($/;"	f	file:
jt_file	test_journal.c	/^struct jt_file {$/;"	s	file:
jt_file	test_journal.c	/^typedef struct jt_file jt_file;$/;"	t	typeref:struct:jt_file	file:
jt_io_methods	test_journal.c	/^static sqlite3_io_methods jt_io_methods = {$/;"	v	file:
jt_register	test_journal.c	/^int jt_register(char *zWrap, int isDefault){$/;"	f
jt_unregister	test_journal.c	/^void jt_unregister(void){$/;"	f
jt_vfs	test_journal.c	/^static sqlite3_vfs jt_vfs = {$/;"	v	file:
juliandayFunc	date.c	/^static void juliandayFunc($/;"	f	file:
k	whereInt.h	/^  int k;                     \/* Resume scanning at this->pWC->a[this->k] *\/$/;"	m	struct:WhereScan
key	test_pcache.c	/^    unsigned key;              \/* The key for this page. 0 means unallocated *\/$/;"	m	struct:testpcache::testpcachePage	file:
keyConf	sqliteInt.h	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table
keyInfoFromExprList	select.c	/^static KeyInfo *keyInfoFromExprList($/;"	f	file:
keyinfo	vdbeInt.h	/^  KeyInfo keyinfo;$/;"	m	struct:PreUpdate
kwcolumn_opt	parse.y	/^kwcolumn_opt ::= .$/;"	l
kwcolumn_opt	parse.y	/^kwcolumn_opt ::= COLUMNKW.$/;"	l
labelBkOut	select.c	/^  int labelBkOut;       \/* Start label for the block-output subroutine *\/$/;"	m	struct:SortCtx	file:
labelDone	select.c	/^  int labelDone;        \/* Jump here when done, ex: LIMIT reached *\/$/;"	m	struct:SortCtx	file:
lastErrno	os_unix.c	/^  int lastErrno;                      \/* The unix errno from last I\/O error *\/$/;"	m	struct:unixFile	file:
lastErrno	os_win.c	/^  DWORD lastErrno;           \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winShmNode	file:
lastErrno	os_win.c	/^  DWORD lastErrno;        \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winFile	file:
lastRowid	sqliteInt.h	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3
lastRowid	vdbeInt.h	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame
last_insert_rowid	func.c	/^static void last_insert_rowid($/;"	f	file:
last_insert_rowid	sqlite3ext.h	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
leaf	btreeInt.h	/^  u8 leaf;             \/* True if a leaf page *\/$/;"	m	struct:MemPage
leaveJtMutex	test_journal.c	/^static void leaveJtMutex(void){$/;"	f	file:
leaveMutex	notify.c	/^static void leaveMutex(void){$/;"	f	file:
leftColumn	whereInt.h	/^    int leftColumn;         \/* Column number of X in "X <op> <expr>" *\/$/;"	m	union:WhereTerm::__anon8
leftCursor	whereInt.h	/^  int leftCursor;         \/* Cursor number of X in "X <op> <expr>" *\/$/;"	m	struct:WhereTerm
legacyCountFinalize	test1.c	/^static void legacyCountFinalize(sqlite3_context *context){$/;"	f	file:
legacyCountStep	test1.c	/^static void legacyCountStep($/;"	f	file:
length	os_unix.c	/^  unsigned long long length;        \/* nbr of bytes to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
lengthFunc	func.c	/^static void lengthFunc($/;"	f	file:
libversion	sqlite3ext.h	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines
libversion_number	sqlite3ext.h	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines
likeFunc	func.c	/^static void likeFunc($/;"	f	file:
likeInfoAlt	func.c	/^static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };$/;"	v	typeref:struct:compareInfo	file:
likeInfoNorm	func.c	/^static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };$/;"	v	typeref:struct:compareInfo	file:
likely	sqliteInt.h	495;"	d
limit	sqlite3ext.h	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines
line_contains_semicolon	shell.c	/^static int line_contains_semicolon(const char *z, int N){$/;"	f	file:
line_is_command_terminator	shell.c	/^static int line_is_command_terminator(const char *zLine){$/;"	f	file:
line_is_complete	shell.c	/^static int line_is_complete(char *zSql, int nSql){$/;"	f	file:
list	mem3.c	/^    } list;$/;"	m	union:Mem3Block::__anon22	typeref:struct:Mem3Block::__anon22::__anon24	file:
list	vdbesort.c	/^  SorterList list;                \/* List for thread to write to a PMA *\/$/;"	m	struct:SortSubtask	file:
list	vdbesort.c	/^  SorterList list;                \/* List of in-memory records *\/$/;"	m	struct:VdbeSorter	file:
loadAnalysis	analyze.c	/^static void loadAnalysis(Parse *pParse, int iDb){$/;"	f	file:
loadExt	func.c	/^static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
loadStat4	analyze.c	/^static int loadStat4(sqlite3 *db, const char *zDb){$/;"	f	file:
loadStatTbl	analyze.c	/^static int loadStatTbl($/;"	f	file:
load_extension	sqlite3ext.h	/^  int (*load_extension)(sqlite3*,const char*,const char*,char**);$/;"	m	struct:sqlite3_api_routines
local	os_win.c	/^  winceLock local;        \/* Locks obtained by this instance of winFile *\/$/;"	m	struct:winFile	file:
local_getline	shell.c	/^static char *local_getline(char *zLine, FILE *in){$/;"	f	file:
local_getline	tclsqlite.c	/^static char *local_getline(char *zPrompt, FILE *in){$/;"	f	file:
local_ioerr	os_common.h	/^static void local_ioerr(){$/;"	f
localtime	os_win.c	/^struct tm *__cdecl localtime(const time_t *t)$/;"	f
localtimeOffset	date.c	/^static sqlite3_int64 localtimeOffset($/;"	f	file:
locateDatabaseHandle	test_journal.c	/^static jt_file *locateDatabaseHandle(const char *zJournal, int noLock){$/;"	f	file:
lock	btreeInt.h	/^  BtLock lock;       \/* Object used to lock page 1 *\/$/;"	m	struct:Btree
lockBtree	btree.c	/^static int lockBtree(BtShared *pBt){$/;"	f	file:
lockBtreeMutex	btmutex.c	/^static void lockBtreeMutex(Btree *p){$/;"	f	file:
lockError	wal.c	/^  u8 lockError;              \/* True if a locking error has occurred *\/$/;"	m	struct:Wal	file:
lockMask	vdbeInt.h	/^  yDbMask lockMask;       \/* Subset of btreeMask that requires a lock *\/$/;"	m	struct:Vdbe
lockName	test_vfstrace.c	/^static const char *lockName(int eLock){$/;"	f	file:
lockProxy	os_unix.c	/^  unixFile *lockProxy;         \/* Open proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockProxyPath	os_unix.c	/^  char *lockProxyPath;         \/* Name of the proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockTrace	os_unix.c	/^static int lockTrace(int fd, int op, struct flock *p){$/;"	f	file:
locked	btreeInt.h	/^  u8 locked;         \/* True if db currently has pBt locked *\/$/;"	m	struct:Btree
lockingContext	os_unix.c	/^  void *lockingContext;               \/* Locking style specific state *\/$/;"	m	struct:unixFile	file:
locktype	os_win.c	/^  u8 locktype;            \/* Type of lock currently held on this file *\/$/;"	m	struct:winFile	file:
log	sqlite3ext.h	/^  void (*log)(int,const char*,...);$/;"	m	struct:sqlite3_api_routines
logBadConnection	util.c	/^static void logBadConnection(const char *zType){$/;"	f	file:
logcallback	test1.c	/^} logcallback = {0, 0};$/;"	v	typeref:struct:LogCallback	file:
lookaside	sqliteInt.h	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3
lookupName	resolve.c	/^static int lookupName($/;"	f	file:
lowerFunc	func.c	/^static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
lp	parse.y	/^lp ::= LP(X).                       {sqlite3VtabArgExtend(pParse,&X);}$/;"	l
lru	pcache1.c	/^  PgHdr1 lru;                    \/* The beginning and end of the LRU list *\/$/;"	m	struct:PGroup	file:
lru	sqliteInt.h	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache
lseek	os_unix.c	328;"	d	file:
m	date.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
m	sqliteInt.h	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config
m	test_malloc.c	/^  sqlite3_mem_methods m;  \/* 'Real' malloc implementation *\/$/;"	m	struct:MemFault	file:
m	test_mutex.c	/^  sqlite3_mutex_methods m;   \/* Interface to "real" mutex system *\/$/;"	m	struct:test_mutex_globals	file:
mPragFlag	pragma.h	/^  u8 mPragFlag;             \/* Zero or more PragFlag_XXX values *\/$/;"	m	struct:sPragmaNames
mTrace	sqliteInt.h	/^  u8 mTrace;                    \/* zero or more SQLITE_TRACE flags *\/$/;"	m	struct:sqlite3
magic	sqliteInt.h	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3
magic	vdbeInt.h	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe
magic1	os_win.c	/^  u32 magic1;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
magic2	os_win.c	/^  u32 magic2;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
main	shell.c	/^int SQLITE_CDECL main(int argc, char **argv){$/;"	f
mainPrompt	shell.c	/^static char mainPrompt[20];     \/* First line prompt. default: "sqlite> "*\/$/;"	v	file:
main_init	shell.c	/^static void main_init(ShellState *data) {$/;"	f	file:
malloc	sqlite3ext.h	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines
malloc64	sqlite3ext.h	/^  void *(*malloc64)(sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines
mallocFailed	btreeInt.h	/^  int mallocFailed; \/* A memory allocation error has occurred *\/$/;"	m	struct:IntegrityCk
mallocFailed	sqliteInt.h	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3
mallocLogEnabled	test_malloc.c	/^static int mallocLogEnabled = 0;$/;"	v	file:
mallocWithAlarm	malloc.c	/^static int mallocWithAlarm(int n, void **pp){$/;"	f	file:
markTermAsChild	whereexpr.c	/^static void markTermAsChild(WhereClause *pWC, int iChild, int iParent){$/;"	f	file:
mask	test_vfs.c	/^  int mask;                       \/* Mask controlling [script] and [ioerr] *\/$/;"	m	struct:Testvfs	file:
maskLoop	whereInt.h	/^  Bitmask maskLoop;     \/* Bitmask of all WhereLoop objects in this path *\/$/;"	m	struct:WherePath
maskPage	btreeInt.h	/^  u16 maskPage;        \/* Mask for page offset *\/$/;"	m	struct:MemPage
maskSelf	whereInt.h	/^  Bitmask maskSelf;     \/* Bitmask identifying table iTab *\/$/;"	m	struct:WhereLoop
maskUsed	vdbeInt.h	/^  u64 maskUsed;         \/* Mask of columns used by this cursor *\/$/;"	m	struct:VdbeCursor
matchAll	func.c	/^  u8 matchAll;          \/* "*" or "%" *\/$/;"	m	struct:compareInfo	file:
matchOne	func.c	/^  u8 matchOne;          \/* "?" or "_" *\/$/;"	m	struct:compareInfo	file:
matchQuality	callback.c	/^static int matchQuality($/;"	f	file:
matchSet	func.c	/^  u8 matchSet;          \/* "[" or 0 *\/$/;"	m	struct:compareInfo	file:
max1bytePayload	btreeInt.h	/^  u8 max1bytePayload;   \/* Maximum first byte of cell for a 1-byte payload *\/$/;"	m	struct:BtShared
max1bytePayload	btreeInt.h	/^  u8 max1bytePayload;  \/* min(maxLocal,127) *\/$/;"	m	struct:MemPage
maxCount	mem5.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	file:
maxLeaf	btreeInt.h	/^  u16 maxLeaf;          \/* Maximum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared
maxLocal	btreeInt.h	/^  u16 maxLocal;         \/* Maximum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared
maxLocal	btreeInt.h	/^  u16 maxLocal;        \/* Copy of BtShared.maxLocal or BtShared.maxLeaf *\/$/;"	m	struct:MemPage
maxOut	mem5.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	file:
maxRequest	mem5.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	file:
maxStmt	tclsqlite.c	/^  int maxStmt;               \/* The next maximum number of stmtList *\/$/;"	m	struct:SqliteDb	file:
mayAbort	sqliteInt.h	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse
md5_cmd	tclsqlite.c	/^static int SQLITE_TCLAPI md5_cmd($/;"	f	file:
md5file_cmd	tclsqlite.c	/^static int SQLITE_TCLAPI md5file_cmd($/;"	f	file:
md5finalize	tclsqlite.c	/^static void md5finalize(sqlite3_context *context){$/;"	f	file:
md5step	tclsqlite.c	/^static void md5step(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
measureAllocationSize	malloc.c	/^static SQLITE_NOINLINE void measureAllocationSize(sqlite3 *db, void *p){$/;"	f	file:
mem	mem2.c	/^} mem;$/;"	v	typeref:struct:__anon21	file:
mem	test_init.c	/^  sqlite3_mem_methods     mem;$/;"	m	struct:Wrapped	file:
mem0	malloc.c	/^} mem0 = { 0, 0, 0, 0, 0, 0 };$/;"	v	typeref:struct:Mem0Global	file:
mem0	malloc.c	67;"	d	file:
mem3	mem3.c	/^} mem3 = { 97535575 };$/;"	v	typeref:struct:Mem3Global	file:
mem3	mem3.c	141;"	d	file:
mem5	mem5.c	/^} mem5;$/;"	v	typeref:struct:Mem5Global	file:
mem5	mem5.c	137;"	d	file:
memAboutToChange	vdbe.c	34;"	d	file:
memAboutToChange	vdbe.c	36;"	d	file:
memDb	pager.c	/^  u8 memDb;                   \/* True to inhibit all file I\/O *\/$/;"	m	struct:Pager	file:
memIsValid	vdbeInt.h	279;"	d
memTracePrint	vdbe.c	/^static void memTracePrint(Mem *p){$/;"	f	file:
mem_fail	test_init.c	/^  int mem_fail;                \/* True to fail mem subsystem inialization *\/$/;"	m	struct:Wrapped	file:
mem_init	test_init.c	/^  int mem_init;                \/* True if mem subsystem is initalized *\/$/;"	m	struct:Wrapped	file:
memfault	test_malloc.c	/^} memfault;$/;"	v	typeref:struct:MemFault	file:
memjrnlClose	memjournal.c	/^static int memjrnlClose(sqlite3_file *pJfd){$/;"	f	file:
memjrnlCreateFile	memjournal.c	/^static int memjrnlCreateFile(MemJournal *p){$/;"	f	file:
memjrnlFileSize	memjournal.c	/^static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
memjrnlFreeChunks	memjournal.c	/^static void memjrnlFreeChunks(MemJournal *p){$/;"	f	file:
memjrnlRead	memjournal.c	/^static int memjrnlRead($/;"	f	file:
memjrnlSync	memjournal.c	/^static int memjrnlSync(sqlite3_file *pJfd, int flags){$/;"	f	file:
memjrnlTruncate	memjournal.c	/^static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
memjrnlWrite	memjournal.c	/^static int memjrnlWrite($/;"	f	file:
memory_highwater	sqlite3ext.h	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines
memory_used	sqlite3ext.h	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines
memsys3Checkout	mem3.c	/^static void *memsys3Checkout(u32 i, u32 nBlock){$/;"	f	file:
memsys3Enter	mem3.c	/^static void memsys3Enter(void){$/;"	f	file:
memsys3Free	mem3.c	/^static void memsys3Free(void *pPrior){$/;"	f	file:
memsys3FreeUnsafe	mem3.c	/^static void memsys3FreeUnsafe(void *pOld){$/;"	f	file:
memsys3FromMaster	mem3.c	/^static void *memsys3FromMaster(u32 nBlock){$/;"	f	file:
memsys3Init	mem3.c	/^static int memsys3Init(void *NotUsed){$/;"	f	file:
memsys3Leave	mem3.c	/^static void memsys3Leave(void){$/;"	f	file:
memsys3Link	mem3.c	/^static void memsys3Link(u32 i){$/;"	f	file:
memsys3LinkIntoList	mem3.c	/^static void memsys3LinkIntoList(u32 i, u32 *pRoot){$/;"	f	file:
memsys3Malloc	mem3.c	/^static void *memsys3Malloc(int nBytes){$/;"	f	file:
memsys3MallocUnsafe	mem3.c	/^static void *memsys3MallocUnsafe(int nByte){$/;"	f	file:
memsys3Merge	mem3.c	/^static void memsys3Merge(u32 *pRoot){$/;"	f	file:
memsys3OutOfMemory	mem3.c	/^static void memsys3OutOfMemory(int nByte){$/;"	f	file:
memsys3Realloc	mem3.c	/^static void *memsys3Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys3Roundup	mem3.c	/^static int memsys3Roundup(int n){$/;"	f	file:
memsys3Shutdown	mem3.c	/^static void memsys3Shutdown(void *NotUsed){$/;"	f	file:
memsys3Size	mem3.c	/^static int memsys3Size(void *p){$/;"	f	file:
memsys3Unlink	mem3.c	/^static void memsys3Unlink(u32 i){$/;"	f	file:
memsys3UnlinkFromList	mem3.c	/^static void memsys3UnlinkFromList(u32 i, u32 *pRoot){$/;"	f	file:
memsys5Enter	mem5.c	/^static void memsys5Enter(void){$/;"	f	file:
memsys5Free	mem5.c	/^static void memsys5Free(void *pPrior){$/;"	f	file:
memsys5FreeUnsafe	mem5.c	/^static void memsys5FreeUnsafe(void *pOld){$/;"	f	file:
memsys5Init	mem5.c	/^static int memsys5Init(void *NotUsed){$/;"	f	file:
memsys5Leave	mem5.c	/^static void memsys5Leave(void){$/;"	f	file:
memsys5Link	mem5.c	/^static void memsys5Link(int i, int iLogsize){$/;"	f	file:
memsys5Log	mem5.c	/^static int memsys5Log(int iValue){$/;"	f	file:
memsys5Malloc	mem5.c	/^static void *memsys5Malloc(int nBytes){$/;"	f	file:
memsys5MallocUnsafe	mem5.c	/^static void *memsys5MallocUnsafe(int nByte){$/;"	f	file:
memsys5Realloc	mem5.c	/^static void *memsys5Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys5Roundup	mem5.c	/^static int memsys5Roundup(int n){$/;"	f	file:
memsys5Shutdown	mem5.c	/^static void memsys5Shutdown(void *NotUsed){$/;"	f	file:
memsys5Size	mem5.c	/^static int memsys5Size(void *p){$/;"	f	file:
memsys5Unlink	mem5.c	/^static void memsys5Unlink(int i, int iLogsize){$/;"	f	file:
midPoint	pcache1.c	/^  PgHdr1 midPoint;$/;"	m	struct:PGroup	file:
minFrame	wal.c	/^  u32 minFrame;              \/* Ignore wal frames before this one *\/$/;"	m	struct:Wal	file:
minLeaf	btreeInt.h	/^  u16 minLeaf;          \/* Minimum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared
minLocal	btreeInt.h	/^  u16 minLocal;         \/* Minimum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared
minLocal	btreeInt.h	/^  u16 minLocal;        \/* Copy of BtShared.minLocal or BtShared.minLeaf *\/$/;"	m	struct:MemPage
minMaxFinalize	func.c	/^static void minMaxFinalize(sqlite3_context *context){$/;"	f	file:
minMaxQuery	select.c	/^static u8 minMaxQuery(AggInfo *pAggInfo, ExprList **ppMinMax){$/;"	f	file:
minWriteFileFormat	vdbeInt.h	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe
minmaxFunc	func.c	/^static void minmaxFunc($/;"	f	file:
minmaxStep	func.c	/^static void minmaxStep($/;"	f	file:
mkFullPathname	os_unix.c	/^static int mkFullPathname($/;"	f	file:
mmapSize	os_unix.c	/^  sqlite3_int64 mmapSize;             \/* Usable size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:
mmapSize	os_win.c	/^  sqlite3_int64 mmapSize;       \/* Usable size of mapped region *\/$/;"	m	struct:winFile	file:
mmapSizeActual	os_unix.c	/^  sqlite3_int64 mmapSizeActual;       \/* Actual size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:
mmapSizeActual	os_win.c	/^  sqlite3_int64 mmapSizeActual; \/* Actual size of mapped region *\/$/;"	m	struct:winFile	file:
mmapSizeMax	os_unix.c	/^  sqlite3_int64 mmapSizeMax;          \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:unixFile	file:
mmapSizeMax	os_win.c	/^  sqlite3_int64 mmapSizeMax;    \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:winFile	file:
mnMaster	mem3.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	file:
mnPmaSize	vdbesort.c	/^  int mnPmaSize;                  \/* Minimum PMA size, in bytes *\/$/;"	m	struct:VdbeSorter	file:
mnReg	sqliteInt.h	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo
mnReq	sqliteInt.h	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config
mode	shell.c	/^  int mode;              \/* An output mode setting *\/$/;"	m	struct:ShellState	file:
mode	shell.c	/^  int mode;           \/* Mode prior to ".explain on" *\/$/;"	m	struct:SavedModeInfo	file:
modeDescr	shell.c	/^static const char *modeDescr[] = {$/;"	v	file:
modifyPagePointer	btree.c	/^static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){$/;"	f	file:
moduleDestroy	test8.c	/^static void moduleDestroy(void *p){$/;"	f	file:
moveToChild	btree.c	/^static int moveToChild(BtCursor *pCur, u32 newPgno){$/;"	f	file:
moveToLeftmost	btree.c	/^static int moveToLeftmost(BtCursor *pCur){$/;"	f	file:
moveToParent	btree.c	/^static void moveToParent(BtCursor *pCur){$/;"	f	file:
moveToRightmost	btree.c	/^static int moveToRightmost(BtCursor *pCur){$/;"	f	file:
moveToRoot	btree.c	/^static int moveToRoot(BtCursor *pCur){$/;"	f	file:
movetoTarget	vdbeInt.h	/^  i64 movetoTarget;     \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor
mprintf	sqlite3ext.h	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines
msize	sqlite3ext.h	/^  sqlite3_uint64 (*msize)(void*);$/;"	m	struct:sqlite3_api_routines
multiSelect	select.c	/^static int multiSelect($/;"	f	file:
multiSelectCollSeq	select.c	/^static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){$/;"	f	file:
multiSelectOrderBy	select.c	/^static int multiSelectOrderBy($/;"	f	file:
multiSelectOrderByKeyInfo	select.c	/^static KeyInfo *multiSelectOrderByKeyInfo(Parse *pParse, Select *p, int nExtra){$/;"	f	file:
multiSelectValues	select.c	/^static int multiSelectValues($/;"	f	file:
multiplexAccess	test_multiplex.c	/^static int multiplexAccess(sqlite3_vfs *a, const char *b, int c, int *d){$/;"	f	file:
multiplexCheckReservedLock	test_multiplex.c	/^static int multiplexCheckReservedLock(sqlite3_file *pConn, int *pResOut){$/;"	f	file:
multiplexClose	test_multiplex.c	/^static int multiplexClose(sqlite3_file *pConn){$/;"	f	file:
multiplexConn	test_multiplex.c	/^struct multiplexConn {$/;"	s	file:
multiplexConn	test_multiplex.c	/^typedef struct multiplexConn multiplexConn;$/;"	t	typeref:struct:multiplexConn	file:
multiplexControlFunc	test_multiplex.c	/^static void multiplexControlFunc($/;"	f	file:
multiplexCurrentTime	test_multiplex.c	/^static int multiplexCurrentTime(sqlite3_vfs *a, double *b){$/;"	f	file:
multiplexCurrentTimeInt64	test_multiplex.c	/^static int multiplexCurrentTimeInt64(sqlite3_vfs *a, sqlite3_int64 *b){$/;"	f	file:
multiplexDelete	test_multiplex.c	/^static int multiplexDelete($/;"	f	file:
multiplexDeviceCharacteristics	test_multiplex.c	/^static int multiplexDeviceCharacteristics(sqlite3_file *pConn){$/;"	f	file:
multiplexDlClose	test_multiplex.c	/^static void multiplexDlClose(sqlite3_vfs *a, void *b){$/;"	f	file:
multiplexDlError	test_multiplex.c	/^static void multiplexDlError(sqlite3_vfs *a, int b, char *c){$/;"	f	file:
multiplexDlOpen	test_multiplex.c	/^static void *multiplexDlOpen(sqlite3_vfs *a, const char *b){$/;"	f	file:
multiplexDlSym	test_multiplex.c	/^static void (*multiplexDlSym(sqlite3_vfs *a, void *b, const char *c))(void){$/;"	f	file:
multiplexEnter	test_multiplex.c	/^static void multiplexEnter(void){ sqlite3_mutex_enter(gMultiplex.pMutex); }$/;"	f	file:
multiplexFileControl	test_multiplex.c	/^static int multiplexFileControl(sqlite3_file *pConn, int op, void *pArg){$/;"	f	file:
multiplexFileSize	test_multiplex.c	/^static int multiplexFileSize(sqlite3_file *pConn, sqlite3_int64 *pSize){$/;"	f	file:
multiplexFilename	test_multiplex.c	/^static void multiplexFilename($/;"	f	file:
multiplexFreeComponents	test_multiplex.c	/^static void multiplexFreeComponents(multiplexGroup *pGroup){$/;"	f	file:
multiplexFullPathname	test_multiplex.c	/^static int multiplexFullPathname(sqlite3_vfs *a, const char *b, int c, char *d){$/;"	f	file:
multiplexFuncInit	test_multiplex.c	/^static int multiplexFuncInit($/;"	f	file:
multiplexGetLastError	test_multiplex.c	/^static int multiplexGetLastError(sqlite3_vfs *a, int b, char *c){$/;"	f	file:
multiplexGroup	test_multiplex.c	/^struct multiplexGroup {$/;"	s	file:
multiplexGroup	test_multiplex.c	/^typedef struct multiplexGroup multiplexGroup;$/;"	t	typeref:struct:multiplexGroup	file:
multiplexLeave	test_multiplex.c	/^static void multiplexLeave(void){ sqlite3_mutex_leave(gMultiplex.pMutex); }$/;"	f	file:
multiplexLock	test_multiplex.c	/^static int multiplexLock(sqlite3_file *pConn, int lock){$/;"	f	file:
multiplexOpen	test_multiplex.c	/^static int multiplexOpen($/;"	f	file:
multiplexRandomness	test_multiplex.c	/^static int multiplexRandomness(sqlite3_vfs *a, int b, char *c){$/;"	f	file:
multiplexRead	test_multiplex.c	/^static int multiplexRead($/;"	f	file:
multiplexReal	test_multiplex.c	/^  struct multiplexReal {           \/* For each chunk *\/$/;"	s	struct:multiplexGroup	file:
multiplexSectorSize	test_multiplex.c	/^static int multiplexSectorSize(sqlite3_file *pConn){$/;"	f	file:
multiplexShmBarrier	test_multiplex.c	/^static void multiplexShmBarrier(sqlite3_file *pConn){$/;"	f	file:
multiplexShmLock	test_multiplex.c	/^static int multiplexShmLock($/;"	f	file:
multiplexShmMap	test_multiplex.c	/^static int multiplexShmMap($/;"	f	file:
multiplexShmUnmap	test_multiplex.c	/^static int multiplexShmUnmap(sqlite3_file *pConn, int deleteFlag){$/;"	f	file:
multiplexSleep	test_multiplex.c	/^static int multiplexSleep(sqlite3_vfs *a, int b){$/;"	f	file:
multiplexStrlen30	test_multiplex.c	/^static int multiplexStrlen30(const char *z){$/;"	f	file:
multiplexSubClose	test_multiplex.c	/^static void multiplexSubClose($/;"	f	file:
multiplexSubFilename	test_multiplex.c	/^static int multiplexSubFilename(multiplexGroup *pGroup, int iChunk){$/;"	f	file:
multiplexSubOpen	test_multiplex.c	/^static sqlite3_file *multiplexSubOpen($/;"	f	file:
multiplexSubSize	test_multiplex.c	/^static sqlite3_int64 multiplexSubSize($/;"	f	file:
multiplexSync	test_multiplex.c	/^static int multiplexSync(sqlite3_file *pConn, int flags){$/;"	f	file:
multiplexTruncate	test_multiplex.c	/^static int multiplexTruncate(sqlite3_file *pConn, sqlite3_int64 size){$/;"	f	file:
multiplexUnlock	test_multiplex.c	/^static int multiplexUnlock(sqlite3_file *pConn, int lock){$/;"	f	file:
multiplexWrite	test_multiplex.c	/^static int multiplexWrite($/;"	f	file:
mutex	btreeInt.h	/^  sqlite3_mutex *mutex; \/* Non-recursive mutex required to access this object *\/$/;"	m	struct:BtShared
mutex	malloc.c	/^  sqlite3_mutex *mutex;         \/* Mutex to serialize access *\/$/;"	m	struct:Mem0Global	file:
mutex	mem2.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:__anon21	file:
mutex	mem3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	file:
mutex	mem5.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	file:
mutex	mutex_unix.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	mutex_w32.c	/^  CRITICAL_SECTION mutex;    \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	os_unix.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:unixShmNode	file:
mutex	os_win.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:winShmNode	file:
mutex	pcache1.c	/^  sqlite3_mutex *mutex;          \/* MUTEX_STATIC_LRU or NULL *\/$/;"	m	struct:PGroup	file:
mutex	pcache1.c	/^  sqlite3_mutex *mutex;          \/* Mutex for accessing the following: *\/$/;"	m	struct:PCacheGlobal	file:
mutex	sqliteInt.h	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3
mutex	sqliteInt.h	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config
mutex	test_init.c	/^  sqlite3_mutex_methods   mutex;$/;"	m	struct:Wrapped	file:
mutex	test_sqllog.c	/^  sqlite3_mutex *mutex;           \/* Recursive mutex *\/$/;"	m	struct:SLGlobal	file:
mutex	test_thread.c	/^  pthread_mutex_t mutex;             \/* Mutex to protect structure *\/$/;"	m	struct:UnlockNotification	file:
mutexIsInit	mutex.c	/^static SQLITE_WSD int mutexIsInit = 0;$/;"	v	file:
mutex_alloc	sqlite3ext.h	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines
mutex_enter	sqlite3ext.h	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines
mutex_fail	test_init.c	/^  int mutex_fail;              \/* True to fail mutex subsystem inialization *\/$/;"	m	struct:Wrapped	file:
mutex_free	sqlite3ext.h	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines
mutex_init	test_init.c	/^  int mutex_init;              \/* True if mutex subsystem is initalized *\/$/;"	m	struct:Wrapped	file:
mutex_leave	sqlite3ext.h	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines
mutex_try	sqlite3ext.h	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines
mxAlloc	sqliteInt.h	/^  u32  mxAlloc;        \/* Maximum allowed allocation.  0 for no malloc usage *\/$/;"	m	struct:StrAccum
mxArea	test_rtree.c	/^  double mxArea;$/;"	m	struct:Circle	file:
mxCurrent	mem2.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:__anon21	file:
mxErr	btreeInt.h	/^  int mxErr;        \/* Stop accumulating errors when this reaches zero *\/$/;"	m	struct:IntegrityCk
mxFrame	wal.c	/^  u32 mxFrame;                    \/* Index of last valid frame in the WAL *\/$/;"	m	struct:WalIndexHdr	file:
mxKeysize	vdbesort.c	/^  int mxKeysize;                  \/* Largest serialized key seen so far *\/$/;"	m	struct:VdbeSorter	file:
mxMmap	sqliteInt.h	/^  sqlite3_int64 mxMmap;             \/* Maximum value for szMmap *\/$/;"	m	struct:Sqlite3Config
mxOut	sqliteInt.h	/^  int mxOut;              \/* Highwater mark for nOut *\/$/;"	m	struct:Lookaside
mxParserStack	sqliteInt.h	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config
mxPgno	pager.c	/^  Pgno mxPgno;                \/* Maximum allowed size of the database *\/$/;"	m	struct:Pager	file:
mxPinned	pcache1.c	/^  unsigned int mxPinned;         \/* nMaxpage + 10 - nMinPage *\/$/;"	m	struct:PGroup	file:
mxPmaSize	vdbesort.c	/^  int mxPmaSize;                  \/* Maximum PMA size, in bytes.  0==no limit *\/$/;"	m	struct:VdbeSorter	file:
mxReg	sqliteInt.h	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo
mxReq	sqliteInt.h	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config
mxSample	analyze.c	/^  int mxSample;             \/* Maximum number of samples to accumulate *\/$/;"	m	struct:Stat4Accum	file:
mxStrlen	sqliteInt.h	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config
mxSz	vdbesort.c	/^  int mxSz;                       \/* Maximum bytes of data to store *\/$/;"	m	struct:IncrMerger	file:
mxValue	status.c	/^  sqlite3StatValueType mxValue[10];   \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	file:
mxWalSize	wal.c	/^  i64 mxWalSize;             \/* Truncate WAL to this size upon reset *\/$/;"	m	struct:Wal	file:
n	func.c	/^  i64 n;$/;"	m	struct:CountCtx	file:
n	shell.c	/^  int n;              \/* Number of bytes in z *\/$/;"	m	struct:ImportCtx	file:
n	sqliteInt.h	/^    int n;                                     \/* A counter *\/$/;"	m	union:Walker::__anon19
n	sqliteInt.h	/^  int n;            \/* Size of record in bytes *\/$/;"	m	struct:IndexSample
n	sqliteInt.h	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token
n	test1.c	/^  int n;$/;"	m	struct:t1CountCtx	file:
n	test_intarray.c	/^  int n;                    \/* Number of elements in the array *\/$/;"	m	struct:sqlite3_intarray	file:
n	vdbeInt.h	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:Mem
n	whereInt.h	/^  int n;                        \/* Number of assigned cursor values *\/$/;"	m	struct:WhereMaskSet
n	whereInt.h	/^  u16 n;                      \/* Number of valid a[] entries *\/$/;"	m	struct:WhereOrSet
n90pct	pcache1.c	/^  unsigned int n90pct;                \/* nMax*9\/10 *\/$/;"	m	struct:PCache1	file:
nAccumulator	sqliteInt.h	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo
nAlias	sqliteInt.h	/^  int nAlias;               \/* Number of aliased result set columns *\/$/;"	m	struct:Parse
nAlloc	mem2.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:__anon21	file:
nAlloc	mem5.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	file:
nAlloc	shell.c	/^  int nAlloc;         \/* Space allocated for z[] *\/$/;"	m	struct:ImportCtx	file:
nAlloc	sqliteInt.h	/^  u32  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum
nAlloc	sqliteInt.h	/^  u32 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList
nAlloc	table.c	/^  u32 nAlloc;        \/* Slots allocated for azResult[] *\/$/;"	m	struct:TabResult	file:
nAlloc	test1.c	/^  int nAlloc;  \/* Space allocated *\/$/;"	m	struct:dstr	file:
nAlloc	test_fs.c	/^  int nAlloc;$/;"	m	struct:fs_cursor	file:
nAlloc	test_onefile.c	/^  int nAlloc;$/;"	m	struct:tmp_file	file:
nAlloc	vdbesort.c	/^  int nAlloc;                 \/* Bytes of space at aAlloc *\/$/;"	m	struct:PmaReader	file:
nArg	sqliteInt.h	/^  i8 nArg;             \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef
nArg	sqliteInt.h	/^  int nArg;                \/* Total number of arguments *\/$/;"	m	struct:PrintfArguments
nAuthPW	sqliteInt.h	/^  int nAuthPW;                  \/* Size of the zAuthPW in bytes *\/$/;"	m	struct:sqlite3_userauth
nBackfill	wal.c	/^  u32 nBackfill;                  \/* Number of WAL frames backfilled into DB *\/$/;"	m	struct:WalCkptInfo	file:
nBackfillAttempted	wal.c	/^  u32 nBackfillAttempted;         \/* WAL frames perhaps written, or maybe not *\/$/;"	m	struct:WalCkptInfo	file:
nBacktrace	mem2.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	file:
nBacktrace	mem2.c	/^  int nBacktrace;$/;"	m	struct:__anon21	file:
nBacktraceSlots	mem2.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	file:
nBackup	btreeInt.h	/^  int nBackup;       \/* Number of backup operations reading this btree *\/$/;"	m	struct:Btree
nBenign	test_malloc.c	/^  int nBenign;            \/* Number of benign failures seen since last config *\/$/;"	m	struct:MemFault	file:
nBlob	test_onefile.c	/^  int nBlob;                  \/* Total size of allocated blob *\/$/;"	m	struct:fs_real_file	file:
nBlock	mem5.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	file:
nBuf	test6.c	/^  int nBuf;                    \/* Number of bytes written *\/$/;"	m	struct:WriteBuffer	file:
nBuf	test_fs.c	/^  int nBuf;$/;"	m	struct:fs_cursor	file:
nBuf	test_osinst.c	/^  int nBuf;                       \/* Number of valid bytes in aBuf[] *\/$/;"	m	struct:VfslogVfs	file:
nBuffer	test_demovfs.c	/^  int nBuffer;                    \/* Valid bytes of data in zBuffer *\/$/;"	m	struct:DemoFile	file:
nBuffer	vdbesort.c	/^  int nBuffer;                    \/* Size of write buffer in bytes *\/$/;"	m	struct:PmaWriter	file:
nBuffer	vdbesort.c	/^  int nBuffer;                \/* Size of read buffer in bytes *\/$/;"	m	struct:PmaReader	file:
nBusy	sqliteInt.h	/^  int nBusy;                 \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler
nBusy	test_superlock.c	/^  int nBusy;                      \/* Number of times xBusy has been invoked *\/$/;"	m	struct:SuperlockBusy	file:
nByte	test_malloc.c	/^  int nByte;$/;"	m	struct:MallocLog	file:
nByte	test_osinst.c	/^  sqlite3_int64 nByte;            \/* Size of file in bytes *\/$/;"	m	struct:VfslogVtab	file:
nByte	test_server.c	/^  int nByte;                   \/* Size of the zIn parameter for prepare() *\/$/;"	m	struct:SqlMessage	file:
nByte	vdbeblob.c	/^  int nByte;              \/* Size of open blob, in bytes *\/$/;"	m	struct:Incrblob	file:
nCall	test_malloc.c	/^  int nCall;$/;"	m	struct:MallocLog	file:
nCell	btree.c	/^  int nCell;              \/* Number of cells in apCell[] *\/$/;"	m	struct:CellArray	file:
nCell	btreeInt.h	/^  u16 nCell;           \/* Number of cells on this page, local and ovfl *\/$/;"	m	struct:MemPage
nCell	dbstat.c	/^  int nCell;                      \/* Number of cells on page *\/$/;"	m	struct:StatPage	file:
nCell	dbstat.c	/^  int nCell;                      \/* Value of 'ncell' column *\/$/;"	m	struct:StatCursor	file:
nChange	sqliteInt.h	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3
nChange	vdbeInt.h	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe
nChange	vdbeInt.h	/^  int nChange;            \/* Statement changes (Vdbe.nChange)     *\/$/;"	m	struct:VdbeFrame
nChar	sqliteInt.h	/^  u32  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum
nChild	whereInt.h	/^  u8 nChild;              \/* Number of children that must disable us *\/$/;"	m	struct:WhereTerm
nChildCsr	vdbeInt.h	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame
nChildMem	vdbeInt.h	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame
nChunkSize	memjournal.c	/^  int nChunkSize;                 \/* In-memory chunk-size *\/$/;"	m	struct:MemJournal	file:
nCkpt	wal.c	/^  u32 nCkpt;                 \/* Checkpoint sequence counter in the wal-header *\/$/;"	m	struct:Wal	file:
nCol	analyze.c	/^  int nCol;                 \/* Number of columns in index + pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:
nCol	sqliteInt.h	/^  i16 nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table
nCol	sqliteInt.h	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey
nCol	tclsqlite.c	/^  int nCol;                       \/* Number of columns returned by pStmt *\/$/;"	m	struct:DbEvalContext	file:
nCol	test8.c	/^  int nCol;               \/* Number of columns in the real table *\/$/;"	m	struct:echo_vtab	file:
nColCache	sqliteInt.h	/^  u8 nColCache;        \/* Number of entries in aColCache[] *\/$/;"	m	struct:Parse
nColumn	sqliteInt.h	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo
nColumn	sqliteInt.h	/^  u16 nColumn;             \/* Number of columns stored in the index *\/$/;"	m	struct:Index
nColumn	table.c	/^  u32 nColumn;       \/* Number of columns in the result *\/$/;"	m	struct:TabResult	file:
nConn	test_sqllog.c	/^  int nConn;                      \/* Size of aConn[] array *\/$/;"	m	struct:SLGlobal	file:
nCount	test_syscall.c	/^  int nCount;                     \/* Fail after this many more calls *\/$/;"	m	struct:TestSyscallGlobal	file:
nCsr	vdbe.h	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram
nCte	sqliteInt.h	/^  int nCte;                       \/* Number of CTEs in the WITH clause *\/$/;"	m	struct:With
nCurrent	mem2.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:__anon21	file:
nCurrentPage	pcache1.c	/^  unsigned int nCurrentPage;     \/* Number of purgeable pages allocated *\/$/;"	m	struct:PGroup	file:
nCursor	vdbeInt.h	/^  int nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame
nCursor	vdbeInt.h	/^  int nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe
nData	btree.h	/^  int nData;              \/* Size of pData.  0 if none. *\/$/;"	m	struct:BtreePayload
nData	table.c	/^  u32 nData;         \/* Slots used in azResult[].  (nRow+1)*nColumn *\/$/;"	m	struct:TabResult	file:
nData	test6.c	/^  int nData;                           \/* Size of buffer allocated at zData *\/$/;"	m	struct:CrashFile	file:
nDatabase	test_onefile.c	/^  int nDatabase;              \/* Current size of database region *\/$/;"	m	struct:fs_real_file	file:
nDb	sqliteInt.h	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3
nDbChange	vdbeInt.h	/^  int nDbChange;          \/* Value of db->nChange *\/$/;"	m	struct:VdbeFrame
nDeferredCons	sqliteInt.h	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint
nDeferredCons	sqliteInt.h	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3
nDeferredImmCons	sqliteInt.h	/^  i64 nDeferredImmCons;               \/* Number of deferred imm fk. *\/$/;"	m	struct:Savepoint
nDeferredImmCons	sqliteInt.h	/^  i64 nDeferredImmCons;         \/* Net deferred immediate constraints *\/$/;"	m	struct:sqlite3
nEntry	wal.c	/^    int nEntry;                   \/* Nr. of entries in aPgno[] and aIndex[] *\/$/;"	m	struct:WalIterator::WalSegment	file:
nEq	whereInt.h	/^      u16 nEq;               \/* Number of equality constraints *\/$/;"	m	struct:WhereLoop::__anon5::__anon6
nEquiv	whereInt.h	/^  unsigned char nEquiv;      \/* Number of entries in aEquiv[] *\/$/;"	m	struct:WhereScan
nErr	btreeInt.h	/^  int nErr;         \/* Number of messages written to zErrMsg so far *\/$/;"	m	struct:IntegrityCk
nErr	shell.c	/^  int nErr;              \/* Number of errors seen *\/$/;"	m	struct:ShellState	file:
nErr	sqliteInt.h	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext
nErr	sqliteInt.h	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse
nEst	vdbeInt.h	/^  LogEst nEst;                    \/* Estimated output rows per loop *\/$/;"	m	struct:ScanStatus
nExpr	sqliteInt.h	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList
nExt	loadext.c	/^  u32 nExt;              \/* Number of entries in aExt[] *\/          $/;"	m	struct:sqlite3AutoExtList	file:
nExtension	sqliteInt.h	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3
nExtra	pager.c	/^  u16 nExtra;                 \/* Add this many bytes to each in-memory page *\/$/;"	m	struct:Pager	file:
nFail	test_malloc.c	/^  int nFail;              \/* Number of failures seen since last config *\/$/;"	m	struct:MemFault	file:
nFail	test_syscall.c	/^  int nFail;                      \/* Number of failures that have occurred *\/$/;"	m	struct:TestSyscallGlobal	file:
nFail	test_vfs.c	/^  int nFail;                      \/* Number of faults injected *\/$/;"	m	struct:TestFaultInject	file:
nFails	os_unix.c	/^  int nFails;                  \/* Number of conch taking failures *\/$/;"	m	struct:proxyLockingContext	file:
nFetchOut	os_unix.c	/^  int nFetchOut;                      \/* Number of outstanding xFetch refs *\/$/;"	m	struct:unixFile	file:
nFetchOut	os_win.c	/^  int nFetchOut;                \/* Number of outstanding xFetch references *\/$/;"	m	struct:winFile	file:
nField	sqliteInt.h	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord
nField	sqliteInt.h	/^  u16 nField;         \/* Number of key columns in the index *\/$/;"	m	struct:KeyInfo
nField	vdbeInt.h	/^  i16 nField;           \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor
nFile	test_osinst.c	/^  int nFile;                      \/* Size of array azFile[] *\/$/;"	m	struct:VfslogCsr	file:
nFilter	shell.c	/^  int nFilter;             \/* Number of xFilter rejection GLOB patterns *\/$/;"	m	struct:OpenSession	file:
nFkConstraint	vdbeInt.h	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe
nFrame	vdbeInt.h	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe
nFree	btreeInt.h	/^  u16 nFree;           \/* Number of free bytes on the page *\/$/;"	m	struct:MemPage
nFree	test_pcache.c	/^  int nFree;                \/* Number of unused slots in a[] *\/$/;"	m	struct:testpcache	file:
nFree	test_wsd.c	/^  int nFree;$/;"	m	struct:ProcessLocalStorage	file:
nFree	vdbeaux.c	/^  int nFree;           \/* Bytes of available memory *\/$/;"	m	struct:ReusableSpace	file:
nFreeSlot	pcache1.c	/^  int nFreeSlot;                 \/* Number of unused pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nFresh	rowset.c	/^  u16 nFresh;                    \/* Number of objects on pFresh *\/$/;"	m	struct:RowSet	file:
nFunc	sqliteInt.h	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo
nHash	pcache1.c	/^  unsigned int nHash;                 \/* Number of slots in apHash[] *\/$/;"	m	struct:PCache1	file:
nHdrParsed	vdbeInt.h	/^  u16 nHdrParsed;       \/* Number of header fields parsed so far *\/$/;"	m	struct:VdbeCursor
nHeap	sqliteInt.h	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config
nHeight	sqliteInt.h	/^  int nHeight;              \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse
nHeight	sqliteInt.h	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr
nId	sqliteInt.h	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList
nIn	whereInt.h	/^      int nIn;              \/* Number of entries in aInLoop[] *\/$/;"	m	struct:WhereLevel::__anon3::__anon4
nIndent	shell.c	/^  int nIndent;           \/* Size of array aiIndent[] *\/$/;"	m	struct:ShellState	file:
nIndent	vdbeInt.h	/^  int nIndent;       \/* Number of elements in aIndent *\/$/;"	m	struct:Explain
nIndex	tclsqlite.c	/^  int nStep, nSort, nIndex;  \/* Statistics for most recent operation *\/$/;"	m	struct:SqliteDb	file:
nInitPage	pcache1.c	/^  int nInitPage;                 \/* Initial bulk allocation size *\/   $/;"	m	struct:PCacheGlobal	file:
nInstance	test_pcache.c	/^  int nInstance;            \/* Number of current instances *\/$/;"	m	struct:testpcacheGlobalType	file:
nJournal	test_onefile.c	/^  int nJournal;               \/* Current size of journal region *\/$/;"	m	struct:fs_real_file	file:
nKey	btree.h	/^  sqlite3_int64 nKey;     \/* Size of pKey for indexes.  PRIMARY KEY for tabs *\/$/;"	m	struct:BtreePayload
nKey	btreeInt.h	/^  i64 nKey;                 \/* Size of pKey, or last integer key *\/$/;"	m	struct:BtCursor
nKey	btreeInt.h	/^  i64 nKey;      \/* The key for INTKEY tables, or nPayload otherwise *\/$/;"	m	struct:CellInfo
nKey	vdbesort.c	/^  int nKey;                   \/* Number of bytes in key *\/$/;"	m	struct:PmaReader	file:
nKeyCol	analyze.c	/^  int nKeyCol;              \/* Number of index columns w\/o the pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:
nKeyCol	sqliteInt.h	/^  u16 nKeyCol;             \/* Number of columns forming the key *\/$/;"	m	struct:Index
nLSlot	whereInt.h	/^  u16 nLSlot;           \/* Number of slots allocated for aLTerm[] *\/$/;"	m	struct:WhereLoop
nLTerm	whereInt.h	/^  u16 nLTerm;           \/* Number of entries in aLTerm[] *\/$/;"	m	struct:WhereLoop
nLabel	sqliteInt.h	/^  int nLabel;          \/* Number of labels used *\/$/;"	m	struct:Parse
nLastOvfl	dbstat.c	/^  int nLastOvfl;                  \/* Bytes of payload on final overflow page *\/$/;"	m	struct:StatCell	file:
nLevel	whereInt.h	/^  u8 nLevel;                \/* Number of nested loop *\/$/;"	m	struct:WhereInfo
nLine	shell.c	/^  int nLine;          \/* Current line number *\/$/;"	m	struct:ImportCtx	file:
nLocal	btreeInt.h	/^  u16 nLocal;    \/* Amount of payload held locally, not on overflow *\/$/;"	m	struct:CellInfo
nLocal	dbstat.c	/^  int nLocal;                     \/* Bytes of local payload *\/$/;"	m	struct:StatCell	file:
nLock	os_unix.c	/^  int nLock;                      \/* Number of outstanding file locks *\/$/;"	m	struct:unixInodeInfo	file:
nLookaside	sqliteInt.h	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config
nMax	pcache1.c	/^  unsigned int nMax;                  \/* Configured "cache_size" value *\/$/;"	m	struct:PCache1	file:
nMaxArg	sqliteInt.h	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse
nMaxPage	pcache1.c	/^  unsigned int nMaxPage;         \/* Sum of nMax for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMaxSorterMmap	sqliteInt.h	/^  int nMaxSorterMmap;           \/* Maximum size of regions mapped by sorter *\/$/;"	m	struct:sqlite3
nMem	sqliteInt.h	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse
nMem	vdbe.h	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram
nMem	vdbeInt.h	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame
nMem	vdbeInt.h	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe
nMemory	vdbesort.c	/^  int nMemory;                    \/* Size of list.aMemory allocation in bytes *\/$/;"	m	struct:VdbeSorter	file:
nMin	pcache1.c	/^  unsigned int nMin;                  \/* Minimum number of pages reserved *\/$/;"	m	struct:PCache1	file:
nMinPage	pcache1.c	/^  unsigned int nMinPage;         \/* Sum of nMin for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMmapOut	pager.c	/^  int nMmapOut;               \/* Number of mmap pages currently outstanding *\/$/;"	m	struct:Pager	file:
nModuleArg	sqliteInt.h	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table
nMxPayload	dbstat.c	/^  int nMxPayload;                 \/* Largest payload of any cell on this page *\/$/;"	m	struct:StatPage	file:
nMxPayload	dbstat.c	/^  int nMxPayload;                 \/* Value of 'mx_payload' column *\/$/;"	m	struct:StatCursor	file:
nName	os_unix.c	/^  int nName;                    \/* Length of the zCanonicalName[] string *\/$/;"	m	struct:vxworksFileId	file:
nName	test_multiplex.c	/^  int nName;                       \/* Length of base filename *\/$/;"	m	struct:multiplexGroup	file:
nNeeded	vdbeaux.c	/^  int nNeeded;         \/* Total bytes that could not be allocated *\/$/;"	m	struct:ReusableSpace	file:
nOBSat	select.c	/^  int nOBSat;           \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:SortCtx	file:
nOBSat	whereInt.h	/^  i8 nOBSat;                \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:WhereInfo
nOnce	sqliteInt.h	/^  int nOnce;           \/* Number of OP_Once instructions so far *\/$/;"	m	struct:Parse
nOnce	vdbe.h	/^  int nOnce;                    \/* Number of OP_Once instructions *\/$/;"	m	struct:SubProgram
nOnceFlag	vdbeInt.h	/^  int nOnceFlag;          \/* Number of entries in aOnceFlag *\/$/;"	m	struct:VdbeFrame
nOnceFlag	vdbeInt.h	/^  int nOnceFlag;          \/* Size of array aOnceFlag[] *\/$/;"	m	struct:Vdbe
nOp	vdbe.h	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram
nOp	vdbeInt.h	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe
nOp	vdbeInt.h	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame
nOpAlloc	sqliteInt.h	/^  int nOpAlloc;        \/* Number of slots allocated for Vdbe.aOp[] *\/$/;"	m	struct:Parse
nOrig	pager.c	/^  Pgno nOrig;                  \/* Original number of pages in file *\/$/;"	m	struct:PagerSavepoint	file:
nOther	expr.c	/^  int nOther;      \/* Number of references to columns in other FROM clauses *\/$/;"	m	struct:SrcCount	file:
nOut	sqliteInt.h	/^  int nOut;               \/* Number of buffers currently checked out *\/$/;"	m	struct:Lookaside
nOut	whereInt.h	/^  LogEst nOut;          \/* Estimated number of output rows *\/$/;"	m	struct:WhereLoop
nOut	whereInt.h	/^  LogEst nOut;        \/* Number of outputs for this subquery *\/$/;"	m	struct:WhereOrCost
nOverflow	btreeInt.h	/^  u8 nOverflow;        \/* Number of overflow cell bodies in aCell[] *\/$/;"	m	struct:MemPage
nOvfl	dbstat.c	/^  int nOvfl;                      \/* Entries in aOvfl[] *\/$/;"	m	struct:StatCell	file:
nOvflAlloc	btreeInt.h	/^  int nOvflAlloc;           \/* Allocated size of aOverflow[] array *\/$/;"	m	struct:BtCursor
nPMA	vdbesort.c	/^  int nPMA;                       \/* Number of PMAs currently in file *\/$/;"	m	struct:SortSubtask	file:
nPSample	analyze.c	/^  tRowcnt nPSample;         \/* How often to do a periodic sample *\/$/;"	m	struct:Stat4Accum	file:
nPage	btreeInt.h	/^  Pgno nPage;       \/* Number of pages in the database *\/$/;"	m	struct:IntegrityCk
nPage	btreeInt.h	/^  u32 nPage;            \/* Number of pages in the database *\/$/;"	m	struct:BtShared
nPage	pcache1.c	/^  unsigned int nPage;                 \/* Total number of pages in apHash *\/$/;"	m	struct:PCache1	file:
nPage	sqliteInt.h	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config
nPage	test_journal.c	/^  u32 nPage;               \/* Size of file in pages when transaction started *\/$/;"	m	struct:jt_file	file:
nPage	wal.c	/^  u32 nPage;                      \/* Size of database in pages *\/$/;"	m	struct:WalIndexHdr	file:
nPagecount	backup.c	/^  Pgno nPagecount;         \/* Total number of pages to copy *\/$/;"	m	struct:sqlite3_backup	file:
nPagesize	test_journal.c	/^  u32 nPagesize;           \/* Page size when transaction started *\/$/;"	m	struct:jt_file	file:
nParm	tclsqlite.c	/^  int nParm;               \/* Size of apParm array *\/$/;"	m	struct:SqlPreparedStmt	file:
nPayload	btreeInt.h	/^  u32 nPayload;  \/* Bytes of payload *\/$/;"	m	struct:CellInfo
nPayload	dbstat.c	/^  int nPayload;                   \/* Value of 'payload' column *\/$/;"	m	struct:StatCursor	file:
nPinned	test_pcache.c	/^  int nPinned;              \/* Number of pinned slots in a[] *\/$/;"	m	struct:testpcache	file:
nPool	mem3.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	file:
nProgressOps	sqliteInt.h	/^  unsigned nProgressOps;        \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3
nQueryLoop	sqliteInt.h	/^  u32 nQueryLoop;      \/* Est number of iterations of a query (10*log2(N)) *\/$/;"	m	struct:Parse
nRangeReg	sqliteInt.h	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse
nRead	pager.c	/^  int nRead;                  \/* Database pages read *\/$/;"	m	struct:Pager	file:
nReaders	os_win.c	/^  int nReaders;       \/* Number of reader locks obtained *\/$/;"	m	struct:winceLock	file:
nReal	test_multiplex.c	/^  int nReal;                       \/* Number of chunks *\/$/;"	m	struct:multiplexGroup	file:
nRec	pager.c	/^  int nRec;                   \/* Pages journalled since last j-header written *\/$/;"	m	struct:Pager	file:
nRecValid	whereInt.h	/^  int nRecValid;            \/* Number of valid fields currently in pRec *\/$/;"	m	struct:WhereLoopBuilder
nRecyclable	pcache1.c	/^  unsigned int nRecyclable;           \/* Number of pages in the LRU list *\/$/;"	m	struct:PCache1	file:
nRef	btreeInt.h	/^  int nRef;             \/* Number of references to this structure *\/$/;"	m	struct:BtShared
nRef	mutex_unix.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	mutex_w32.c	/^  volatile int nRef;         \/* Number of enterances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	os_unix.c	/^  int nRef;                       \/* Number of pointers to this structure *\/$/;"	m	struct:unixInodeInfo	file:
nRef	os_unix.c	/^  int nRef;                     \/* Number of references to this one *\/$/;"	m	struct:vxworksFileId	file:
nRef	os_unix.c	/^  int nRef;                  \/* Number of unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
nRef	os_win.c	/^  int nRef;                  \/* Number of winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
nRef	pcache.h	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr
nRef	sqliteInt.h	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable
nRef	sqliteInt.h	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext
nRef	sqliteInt.h	/^  int nRef;$/;"	m	struct:FuncDestructor
nRef	sqliteInt.h	/^  u16 nRef;            \/* Number of pointers to this Table *\/$/;"	m	struct:Table
nRef	sqliteInt.h	/^  u32 nRef;           \/* Number of references to this KeyInfo object *\/$/;"	m	struct:KeyInfo
nRef	test_onefile.c	/^  int nRef;                   \/* Number of pointers to this structure *\/$/;"	m	struct:fs_real_file	file:
nRef	test_quota.c	/^  int nRef;                       \/* Number of times this file is open *\/$/;"	m	struct:quotaFile	file:
nRefInitMutex	sqliteInt.h	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config
nRefSqlite3	test3.c	/^static int nRefSqlite3 = 0;$/;"	v	file:
nRefSum	pcache.c	/^  int nRefSum;                        \/* Sum of ref counts over all pages *\/$/;"	m	struct:PCache	file:
nRegion	os_unix.c	/^  u16 nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:unixShmNode	file:
nRegion	os_win.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:winShmNode	file:
nRemaining	backup.c	/^  Pgno nRemaining;         \/* Number of pages left to copy *\/$/;"	m	struct:sqlite3_backup	file:
nRepeat	test_malloc.c	/^  int nRepeat;            \/* Number of times to repeat the failure *\/$/;"	m	struct:MemFault	file:
nResColumn	vdbeInt.h	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe
nReserve	pager.c	/^  i16 nReserve;               \/* Number of unused bytes at end of each page *\/$/;"	m	struct:Pager	file:
nReserve	pcache1.c	/^  int nReserve;                  \/* Try to keep nFreeSlot above this *\/$/;"	m	struct:PCacheGlobal	file:
nRow	analyze.c	/^  tRowcnt nRow;             \/* Number of rows in the entire table *\/$/;"	m	struct:Stat4Accum	file:
nRow	table.c	/^  u32 nRow;          \/* Number of rows in the result *\/$/;"	m	struct:TabResult	file:
nRow	whereInt.h	/^  LogEst nRow;          \/* Estimated number of rows generated by this path *\/$/;"	m	struct:WherePath
nRowEst0	sqliteInt.h	/^  tRowcnt nRowEst0;        \/* Non-logarithmic number of rows in the index *\/$/;"	m	struct:Index
nRowLogEst	sqliteInt.h	/^  LogEst nRowLogEst;   \/* Estimated rows in table - from sqlite_stat1 table *\/$/;"	m	struct:Table
nRowOut	whereInt.h	/^  LogEst nRowOut;           \/* Estimated number of output rows *\/$/;"	m	struct:WhereInfo
nRowid	analyze.c	/^  u32 nRowid;                     \/* Sizeof aRowid[] *\/$/;"	m	struct:Stat4Sample	file:
nSample	analyze.c	/^  int nSample;              \/* Current number of samples *\/$/;"	m	struct:Stat4Accum	file:
nSample	sqliteInt.h	/^  int nSample;             \/* Number of elements in aSample[] *\/$/;"	m	struct:Index
nSampleCol	sqliteInt.h	/^  int nSampleCol;          \/* Size of IndexSample.anEq[] and so on *\/$/;"	m	struct:Index
nSavepoint	pager.c	/^  int nSavepoint;             \/* Number of elements in aSavepoint[] *\/$/;"	m	struct:Pager	file:
nSavepoint	sqliteInt.h	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3
nScan	vdbeInt.h	/^  int nScan;              \/* Entries in aScan[] *\/$/;"	m	struct:Vdbe
nScratch	sqliteInt.h	/^  int nScratch;                     \/* Number of scratch buffers *\/$/;"	m	struct:Sqlite3Config
nScratchFree	malloc.c	/^  u32 nScratchFree;$/;"	m	struct:Mem0Global	file:
nSdst	sqliteInt.h	/^  int nSdst;           \/* Number of registers allocated *\/$/;"	m	struct:SelectDest
nSegment	wal.c	/^  int nSegment;                   \/* Number of entries in aSegment[] *\/$/;"	m	struct:WalIterator	file:
nSelect	sqliteInt.h	/^  int nSelect;         \/* Number of SELECT statements seen *\/$/;"	m	struct:Parse
nSelectIndent	sqliteInt.h	/^  int nSelectIndent;   \/* How far to indent SELECTTRACE() output *\/$/;"	m	struct:Parse
nSelectRow	sqliteInt.h	/^  LogEst nSelectRow;     \/* Estimated number of result rows *\/$/;"	m	struct:Select
nServer	test7.c	/^  int nServer;             \/* Number of server threads running *\/$/;"	m	struct:Thread	file:
nSession	shell.c	/^  int nSession;             \/* Number of active sessions *\/$/;"	m	struct:ShellState	file:
nSet	bitvec.c	/^  u32 nSet;       \/* Number of bits that are set - only valid for aHash$/;"	m	struct:Bitvec	file:
nSet	sqliteInt.h	/^  int nSet;            \/* Number of sets used so far *\/$/;"	m	struct:Parse
nShared	os_unix.c	/^  int nShared;                    \/* Number of SHARED locks held *\/$/;"	m	struct:unixInodeInfo	file:
nSize	btreeInt.h	/^  u16 nSize;     \/* Size of the cell content on the main b-tree page *\/$/;"	m	struct:CellInfo
nSize	memjournal.c	/^  int nSize;                      \/* Bytes of data currently in memory *\/$/;"	m	struct:MemJournal	file:
nSize	test_onefile.c	/^  int nSize;$/;"	m	struct:tmp_file	file:
nSkip	whereInt.h	/^  u16 nSkip;            \/* Number of NULL aLTerm[] entries *\/$/;"	m	struct:WhereLoop
nSlot	pcache1.c	/^  int nSlot;                     \/* The number of pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nSlot	whereInt.h	/^  int nSlot;               \/* Number of entries in a[] *\/$/;"	m	struct:WhereClause
nSort	tclsqlite.c	/^  int nStep, nSort, nIndex;  \/* Statistics for most recent operation *\/$/;"	m	struct:SqliteDb	file:
nSortingColumn	sqliteInt.h	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo
nSpill	memjournal.c	/^  int nSpill;                     \/* Bytes of data before flushing *\/$/;"	m	struct:MemJournal	file:
nSql	tclsqlite.c	/^  int nSql;                \/* chars in zSql[] *\/$/;"	m	struct:SqlPreparedStmt	file:
nSrc	sqliteInt.h	/^  int nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList
nStatement	sqliteInt.h	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3
nStep	tclsqlite.c	/^  int nStep, nSort, nIndex;  \/* Statistics for most recent operation *\/$/;"	m	struct:SqliteDb	file:
nStmt	tclsqlite.c	/^  int nStmt;                 \/* Number of statements in stmtList *\/$/;"	m	struct:SqliteDb	file:
nStmtDefCons	vdbeInt.h	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe
nStmtDefImmCons	vdbeInt.h	/^  i64 nStmtDefImmCons;    \/* Number of def. imm constraints when stmt started *\/$/;"	m	struct:Vdbe
nStmtSpill	sqliteInt.h	/^  int nStmtSpill;                   \/* Stmt-journal spill-to-disk threshold *\/$/;"	m	struct:Sqlite3Config
nSub	vdbeaux.c	/^  int nSub;                  \/* Number of entries in apSub *\/$/;"	m	struct:VdbeOpIter	file:
nSubRec	pager.c	/^  u32 nSubRec;                \/* Number of records written to sub-journal *\/$/;"	m	struct:Pager	file:
nSync	test_journal.c	/^  int nSync;               \/* Number of times journal file has been synced *\/$/;"	m	struct:jt_file	file:
nTab	sqliteInt.h	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse
nTableLock	sqliteInt.h	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse
nTask	vdbesort.c	/^  u8 nTask;                       \/* Size of aTask[] array *\/$/;"	m	struct:VdbeSorter	file:
nTempReg	sqliteInt.h	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse
nTerm	whereInt.h	/^  int nTerm;               \/* Number of terms *\/$/;"	m	struct:WhereClause
nThis	expr.c	/^  int nThis;       \/* Number of references to columns in pSrcList *\/$/;"	m	struct:SrcCount	file:
nTitle	mem2.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:__anon21	file:
nTitle	mem2.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	file:
nTotalChange	sqliteInt.h	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3
nTransaction	btreeInt.h	/^  int nTransaction;     \/* Number of open transactions (read + write) *\/$/;"	m	struct:BtShared
nTransaction	tclsqlite.c	/^  int nTransaction;          \/* Number of nested [transaction] methods *\/$/;"	m	struct:SqliteDb	file:
nTree	vdbesort.c	/^  int nTree;                 \/* Used size of aTree\/aReadr (power of 2) *\/$/;"	m	struct:MergeEngine	file:
nUnused	dbstat.c	/^  int nUnused;                    \/* Number of unused bytes on page *\/$/;"	m	struct:StatPage	file:
nUnused	dbstat.c	/^  int nUnused;                    \/* Value of 'unused' column *\/$/;"	m	struct:StatCursor	file:
nUsed	sqliteInt.h	/^  int nUsed;               \/* Number of arguments used so far *\/$/;"	m	struct:PrintfArguments
nUsed	test1.c	/^  int nUsed;   \/* Space used *\/$/;"	m	struct:dstr	file:
nVDestroy	sqliteInt.h	/^  int nVDestroy;                \/* Number of active OP_VDestroy operations *\/$/;"	m	struct:sqlite3
nVTrans	sqliteInt.h	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3
nVal	vdbesort.c	/^  int nVal;                       \/* Size of the record in bytes *\/$/;"	m	struct:SorterRecord	file:
nVar	sqliteInt.h	/^  ynVar nVar;               \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse
nVar	vdbeInt.h	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe
nVdbeActive	sqliteInt.h	/^  int nVdbeActive;              \/* Number of VDBEs currently running *\/$/;"	m	struct:sqlite3
nVdbeExec	sqliteInt.h	/^  int nVdbeExec;                \/* Number of nested calls to VdbeExec() *\/$/;"	m	struct:sqlite3
nVdbeRead	sqliteInt.h	/^  int nVdbeRead;                \/* Number of active VDBEs that read or write *\/$/;"	m	struct:sqlite3
nVdbeWrite	sqliteInt.h	/^  int nVdbeWrite;               \/* Number of active VDBEs that read and write *\/$/;"	m	struct:sqlite3
nVfs	test1.c	/^static int nVfs = 0;$/;"	v	file:
nVtabLock	sqliteInt.h	/^  int nVtabLock;            \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse
nWiData	wal.c	/^  int nWiData;               \/* Size of array apWiData *\/$/;"	m	struct:Wal	file:
nWorker	vdbesort.c	1026;"	d	file:
nWorker	vdbesort.c	940;"	d	file:
nXField	sqliteInt.h	/^  u16 nXField;        \/* Number of columns beyond the key columns *\/$/;"	m	struct:KeyInfo
nXor	os_win.c	/^  int nXor;           \/* Number of XOR operations done *\/$/;"	m	struct:EntropyGatherer	file:
nZero	btree.h	/^  int nZero;              \/* Extra zero data appended after pData,nData *\/$/;"	m	struct:BtreePayload
nZero	vdbeInt.h	/^    int nZero;          \/* Used when bit MEM_Zero is set in flags *\/$/;"	m	union:Mem::MemValue
na	os_win.c	/^  int na;             \/* Size of a[] in bytes *\/$/;"	m	struct:EntropyGatherer	file:
nameInUsingClause	resolve.c	/^static int nameInUsingClause(IdList *pUsing, const char *zCol){$/;"	f	file:
name_to_enc	test5.c	/^static u8 name_to_enc(Tcl_Interp *interp, Tcl_Obj *pObj){$/;"	f	file:
ncFlags	sqliteInt.h	/^  u16 ncFlags;         \/* Zero or more NC_* flags defined below *\/$/;"	m	struct:NameContext
nearlyFull	malloc.c	/^  int nearlyFull;$/;"	m	struct:Mem0Global	file:
needCsvQuote	shell.c	/^static const char needCsvQuote[] = {$/;"	v	file:
needFree	whereInt.h	/^      u8 needFree;           \/* True if sqlite3_free(idxStr) is needed *\/$/;"	m	struct:WhereLoop::__anon5::__anon7
nested	sqliteInt.h	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse
neverCorrupt	sqliteInt.h	/^  int neverCorrupt;                 \/* Database is always well-formed *\/$/;"	m	struct:Sqlite3Config
newDatabase	btree.c	/^static int newDatabase(BtShared *pBt){$/;"	f	file:
newTnum	sqliteInt.h	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo
newmask	sqliteInt.h	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse
next	hash.h	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem
next	mem3.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::__anon22::__anon24	file:
next	mem5.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	file:
next2	test_tclvar.c	/^static int next2(Tcl_Interp *interp, tclvar_cursor *pCur, Tcl_Obj *pObj){$/;"	f	file:
nextAutovac	sqliteInt.h	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3
nextMove	pcache1.c	/^  u8	 nextMove;$/;"	m	struct:PGroup	file:
nextPagesize	sqliteInt.h	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3
nextShmId	os_unix.c	/^  u8 nextShmId;              \/* Next available unixShm.id value *\/$/;"	m	struct:unixShmNode	file:
nextShmId	os_win.c	/^  u8 nextShmId;              \/* Next available winShm.id value *\/$/;"	m	struct:winShmNode	file:
next_stmt	sqlite3ext.h	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
nfsUnlock	os_unix.c	/^static int nfsUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
noCase	func.c	/^  u8 noCase;            \/* true to ignore case differences *\/$/;"	m	struct:compareInfo	file:
noLock	pager.c	/^  u8 noLock;                  \/* Do not lock (except in WAL mode) *\/$/;"	m	struct:Pager	file:
noSkipScan	sqliteInt.h	/^  unsigned noSkipScan:1;   \/* Do not try to use skip-scan if true *\/$/;"	m	struct:Index
noSync	pager.c	/^  u8 noSync;                  \/* Do not sync the journal if true *\/$/;"	m	struct:Pager	file:
nocaseCollatingFunc	main.c	/^static int nocaseCollatingFunc($/;"	f	file:
nolockCheckReservedLock	os_unix.c	/^static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){$/;"	f	file:
nolockClose	os_unix.c	/^static int nolockClose(sqlite3_file *id) {$/;"	f	file:
nolockLock	os_unix.c	/^static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nolockUnlock	os_unix.c	/^static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nondeterministicFunction	test1.c	/^static void nondeterministicFunction($/;"	f	file:
noopFunc	func.c	466;"	d	file:
noopMutexAlloc	mutex_noop.c	/^static sqlite3_mutex *noopMutexAlloc(int id){ $/;"	f	file:
noopMutexEnd	mutex_noop.c	/^static int noopMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexEnter	mutex_noop.c	/^static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexFree	mutex_noop.c	/^static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexInit	mutex_noop.c	/^static int noopMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexLeave	mutex_noop.c	/^static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexTry	mutex_noop.c	/^static int noopMutexTry(sqlite3_mutex *p){$/;"	f	file:
normalMode	shell.c	/^  int normalMode;        \/* Output mode before ".explain on" *\/$/;"	m	struct:ShellState	file:
notIndexed	sqliteInt.h	/^      unsigned notIndexed :1;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item::__anon16
notNull	sqliteInt.h	/^  u8 notNull;      \/* An OE_ code for handling a NOT NULL constraint *\/$/;"	m	struct:Column
notReady	whereInt.h	/^  Bitmask notReady;          \/* FROM entries not usable at this level *\/$/;"	m	struct:WhereLevel
notUsed0	wal.c	/^  u32 notUsed0;                   \/* Available for future enhancements *\/$/;"	m	struct:WalCkptInfo	file:
notUsed1	sqliteInt.h	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::__anon10
notUsed1	vdbe.h	/^  u8 notUsed1;$/;"	m	struct:VdbeOp
notValid	resolve.c	/^static void notValid($/;"	f	file:
nowValue	status.c	/^  sqlite3StatValueType nowValue[10];  \/* Current value *\/$/;"	m	struct:sqlite3StatType	file:
nullRow	vdbeInt.h	/^  u8 nullRow;           \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor
nullValue	shell.c	/^  char nullValue[20];    \/* The text to print when a NULL comes back from$/;"	m	struct:ShellState	file:
nullifFunc	func.c	/^static void nullifFunc($/;"	f	file:
numberOfCachePages	pcache.c	/^static int numberOfCachePages(PCache *p){$/;"	f	file:
numericType	vdbe.c	/^static u16 numericType(Mem *pMem){$/;"	f	file:
nzVar	sqliteInt.h	/^  int nzVar;                \/* Number of available slots in azVar[] *\/$/;"	m	struct:Parse
nzVar	vdbeInt.h	/^  ynVar nzVar;            \/* Number of entries in azVar[] *\/$/;"	m	struct:Vdbe
offset	os_unix.c	/^  unsigned long long offset;        \/* offset to first byte to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
offsetof	sqliteInt.h	600;"	d
ok	test1.c	/^  int ok;             \/* Finished ok *\/$/;"	m	struct:win32FileLocker	file:
okConstFactor	sqliteInt.h	/^  u8 okConstFactor;    \/* OK to factor out constants *\/$/;"	m	struct:Parse
oldLockingContext	os_unix.c	/^  void *oldLockingContext;     \/* Original lockingcontext to restore on close *\/$/;"	m	struct:proxyLockingContext	file:
oldmask	sqliteInt.h	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse
omitMask	whereInt.h	/^      u16 omitMask;          \/* Terms that may be omitted *\/$/;"	m	struct:WhereLoop::__anon5::__anon7
onError	sqliteInt.h	/^  u8 onError;              \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index
onErrorText	trigger.c	/^static const char *onErrorText(int onError){$/;"	f	file:
one_input_line	shell.c	/^static char *one_input_line(FILE *in, char *zPrior, int isContinuation){$/;"	f	file:
op	sqliteInt.h	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger
op	sqliteInt.h	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select
op	sqliteInt.h	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr
op	sqliteInt.h	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep
op	test_server.c	/^  int op;                      \/* Opcode for the message *\/$/;"	m	struct:SqlMessage	file:
op	vdbeInt.h	/^  int op;                         \/* One of SQLITE_INSERT, UPDATE, DELETE *\/$/;"	m	struct:PreUpdate
op	whereInt.h	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel
op	whereInt.h	/^  u8 op;                   \/* Split operator.  TK_AND or TK_OR *\/$/;"	m	struct:WhereClause
op2	sqliteInt.h	/^  u8 op2;                \/* TK_REGISTER: original value of Expr.op$/;"	m	struct:Expr
opIterNext	vdbeaux.c	/^static Op *opIterNext(VdbeOpIter *p){$/;"	f	file:
opMask	whereInt.h	/^  u32 opMask;                \/* Acceptable operators *\/$/;"	m	struct:WhereScan
opcode	vdbe.h	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp
opcode	vdbe.h	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList
open	sqlite3ext.h	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines
open16	sqlite3ext.h	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines
openDatabase	main.c	/^static int openDatabase($/;"	f	file:
openDirectory	os_unix.c	/^static int openDirectory(const char *zFilename, int *pFd){$/;"	f	file:
openFlags	btreeInt.h	/^  u8 openFlags;         \/* Flags to sqlite3BtreeOpen() *\/$/;"	m	struct:BtShared
openFlags	os_unix.c	/^  int openFlags;                      \/* The flags specified at open() *\/$/;"	m	struct:unixFile	file:
openFlags	sqliteInt.h	/^  unsigned int openFlags;       \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3
openFlags	tclsqlite.c	/^  int openFlags;             \/* Flags used to open.  (SQLITE_OPEN_URI) *\/$/;"	m	struct:SqliteDb	file:
openStatTable	analyze.c	/^static void openStatTable($/;"	f	file:
openSubJournal	pager.c	/^static int openSubJournal(Pager *pPager){$/;"	f	file:
openTransaction	test_journal.c	/^static int openTransaction(jt_file *pMain, jt_file *pJournal){$/;"	f	file:
open_db	shell.c	/^static void open_db(ShellState *p, int keepAlive){$/;"	f	file:
open_v2	sqlite3ext.h	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines
opendir	test_windirent.c	/^LPDIR opendir($/;"	f
operatorMask	whereexpr.c	/^static u16 operatorMask(int op){$/;"	f	file:
opnum	test4.c	/^  int opnum;             \/* Operation number *\/$/;"	m	struct:Thread	file:
opnum	test7.c	/^  volatile int opnum;      \/* Operation number *\/$/;"	m	struct:Thread	file:
optimalReserve	btreeInt.h	/^  u8 optimalReserve;    \/* Desired amount of reserved space per page *\/$/;"	m	struct:BtShared
optimization_control	test1.c	/^static int SQLITE_TCLAPI optimization_control($/;"	f	file:
optionMatch	shell.c	/^static int optionMatch(const char *zStr, const char *zOpt){$/;"	f	file:
orconf	sqliteInt.h	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg
orconf	sqliteInt.h	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep
orig_access	test_syscall.c	157;"	d	file:
orig_close	test_syscall.c	156;"	d	file:
orig_fallocate	test_syscall.c	172;"	d	file:
orig_fchmod	test_syscall.c	171;"	d	file:
orig_fcntl	test_syscall.c	162;"	d	file:
orig_fstat	test_syscall.c	160;"	d	file:
orig_ftruncate	test_syscall.c	161;"	d	file:
orig_getcwd	test_syscall.c	158;"	d	file:
orig_getpagesize	test_syscall.c	/^  sqlite3_syscall_ptr orig_getpagesize;$/;"	m	struct:TestSyscallGlobal	file:
orig_mmap	test_syscall.c	173;"	d	file:
orig_mremap	test_syscall.c	174;"	d	file:
orig_open	test_syscall.c	155;"	d	file:
orig_pread	test_syscall.c	164;"	d	file:
orig_pread64	test_syscall.c	165;"	d	file:
orig_pwrite	test_syscall.c	167;"	d	file:
orig_pwrite64	test_syscall.c	169;"	d	file:
orig_read	test_syscall.c	163;"	d	file:
orig_stat	test_syscall.c	159;"	d	file:
orig_write	test_syscall.c	166;"	d	file:
orphanTrigger	sqliteInt.h	/^    u8 orphanTrigger;           \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo
osAccess	os_unix.c	365;"	d	file:
osAreFileApisANSI	os_win.c	475;"	d	file:
osAreFileApisANSI	os_win.c	496;"	d	file:
osCharLowerW	os_win.c	505;"	d	file:
osCharUpperW	os_win.c	513;"	d	file:
osClose	os_unix.c	362;"	d	file:
osCloseHandle	os_win.c	517;"	d	file:
osCreateEventExW	os_win.c	983;"	d	file:
osCreateFile2	os_win.c	1037;"	d	file:
osCreateFileA	os_win.c	525;"	d	file:
osCreateFileMappingA	os_win.c	545;"	d	file:
osCreateFileMappingFromApp	os_win.c	1092;"	d	file:
osCreateFileMappingW	os_win.c	555;"	d	file:
osCreateFileW	os_win.c	534;"	d	file:
osCreateMutexW	os_win.c	564;"	d	file:
osDeleteFileA	os_win.c	573;"	d	file:
osDeleteFileW	os_win.c	581;"	d	file:
osFallocate	os_unix.c	437;"	d	file:
osFchmod	os_unix.c	430;"	d	file:
osFchown	os_unix.c	456;"	d	file:
osFcntl	os_unix.c	391;"	d	file:
osFcntl	os_unix.c	766;"	d	file:
osFcntl	os_unix.c	767;"	d	file:
osFileTimeToLocalFileTime	os_win.c	589;"	d	file:
osFileTimeToSystemTime	os_win.c	598;"	d	file:
osFlushFileBuffers	os_win.c	603;"	d	file:
osFlushViewOfFile	os_win.c	1134;"	d	file:
osFormatMessageA	os_win.c	611;"	d	file:
osFormatMessageW	os_win.c	620;"	d	file:
osFreeLibrary	os_win.c	629;"	d	file:
osFstat	os_unix.c	381;"	d	file:
osFtruncate	os_unix.c	388;"	d	file:
osGetCurrentProcessId	os_win.c	633;"	d	file:
osGetDiskFreeSpaceA	os_win.c	641;"	d	file:
osGetDiskFreeSpaceW	os_win.c	650;"	d	file:
osGetFileAttributesA	os_win.c	659;"	d	file:
osGetFileAttributesExW	os_win.c	675;"	d	file:
osGetFileAttributesW	os_win.c	667;"	d	file:
osGetFileInformationByHandleEx	os_win.c	1019;"	d	file:
osGetFileSize	os_win.c	684;"	d	file:
osGetFullPathNameA	os_win.c	692;"	d	file:
osGetFullPathNameW	os_win.c	701;"	d	file:
osGetLastError	os_win.c	706;"	d	file:
osGetNativeSystemInfo	os_win.c	1063;"	d	file:
osGetProcAddressA	os_win.c	721;"	d	file:
osGetProcessHeap	os_win.c	1084;"	d	file:
osGetSystemInfo	os_win.c	730;"	d	file:
osGetSystemTime	os_win.c	734;"	d	file:
osGetSystemTimeAsFileTime	os_win.c	742;"	d	file:
osGetTempPathA	os_win.c	751;"	d	file:
osGetTempPathW	os_win.c	759;"	d	file:
osGetTickCount	os_win.c	767;"	d	file:
osGetTickCount64	os_win.c	1055;"	d	file:
osGetVersionExA	os_win.c	775;"	d	file:
osGetVersionExW	os_win.c	785;"	d	file:
osGetcwd	os_unix.c	368;"	d	file:
osGeteuid	os_unix.c	459;"	d	file:
osGetpagesize	os_unix.c	487;"	d	file:
osGetpid	os_unix.c	172;"	d	file:
osHeapAlloc	os_win.c	790;"	d	file:
osHeapCompact	os_win.c	839;"	d	file:
osHeapCreate	os_win.c	799;"	d	file:
osHeapDestroy	os_win.c	808;"	d	file:
osHeapFree	os_win.c	812;"	d	file:
osHeapReAlloc	os_win.c	816;"	d	file:
osHeapSize	os_win.c	821;"	d	file:
osHeapValidate	os_win.c	830;"	d	file:
osInterlockedCompareExchange	os_win.c	1103;"	d	file:
osIsNT	os_win.c	1397;"	d	file:
osIsNT	os_win.c	1399;"	d	file:
osIsNT	os_win.c	1401;"	d	file:
osIsNT	os_win.c	1403;"	d	file:
osLoadLibraryA	os_win.c	847;"	d	file:
osLoadLibraryW	os_win.c	856;"	d	file:
osLoadPackagedLibrary	os_win.c	1046;"	d	file:
osLocalFree	os_win.c	864;"	d	file:
osLocaltime	date.c	/^static int osLocaltime(time_t *t, struct tm *pTm){$/;"	f	file:
osLockFile	os_win.c	873;"	d	file:
osLockFileEx	os_win.c	884;"	d	file:
osLstat	os_unix.c	501;"	d	file:
osMapViewOfFile	os_win.c	895;"	d	file:
osMapViewOfFileFromApp	os_win.c	1028;"	d	file:
osMkdir	os_unix.c	446;"	d	file:
osMmap	os_unix.c	466;"	d	file:
osMremap	os_unix.c	480;"	d	file:
osMultiByteToWideChar	os_win.c	900;"	d	file:
osMunmap	os_unix.c	473;"	d	file:
osOpen	os_unix.c	359;"	d	file:
osOpenDirectory	os_unix.c	443;"	d	file:
osOutputDebugStringA	os_win.c	1072;"	d	file:
osOutputDebugStringW	os_win.c	1080;"	d	file:
osPread	os_unix.c	401;"	d	file:
osPread64	os_unix.c	408;"	d	file:
osPwrite	os_unix.c	418;"	d	file:
osPwrite64	os_unix.c	426;"	d	file:
osQueryPerformanceCounter	os_win.c	905;"	d	file:
osRead	os_unix.c	394;"	d	file:
osReadFile	os_win.c	910;"	d	file:
osReadlink	os_unix.c	494;"	d	file:
osRmdir	os_unix.c	449;"	d	file:
osSetEndOfFile	os_win.c	915;"	d	file:
osSetFilePointer	os_win.c	923;"	d	file:
osSetFilePointerEx	os_win.c	1010;"	d	file:
osSleep	os_win.c	932;"	d	file:
osStat	os_unix.c	371;"	d	file:
osSystemTimeToFileTime	os_win.c	936;"	d	file:
osUnlink	os_unix.c	440;"	d	file:
osUnlockFile	os_win.c	946;"	d	file:
osUnlockFileEx	os_win.c	956;"	d	file:
osUnmapViewOfFile	os_win.c	965;"	d	file:
osUuidCreate	os_win.c	1117;"	d	file:
osUuidCreateSequential	os_win.c	1125;"	d	file:
osWaitForSingleObject	os_win.c	992;"	d	file:
osWaitForSingleObjectEx	os_win.c	1001;"	d	file:
osWideCharToMultiByte	os_win.c	969;"	d	file:
osWrite	os_unix.c	411;"	d	file:
osWriteFile	os_win.c	974;"	d	file:
out	shell.c	/^  FILE *out;             \/* Write results here *\/$/;"	m	struct:ShellState	file:
out2Prerelease	vdbe.c	/^static Mem *out2Prerelease(Vdbe *p, VdbeOp *pOp){$/;"	f	file:
out2PrereleaseWithClear	vdbe.c	/^static SQLITE_NOINLINE Mem *out2PrereleaseWithClear(Mem *pOut){$/;"	f	file:
outCount	shell.c	/^  int outCount;          \/* Revert to stdout when reaching zero *\/$/;"	m	struct:ShellState	file:
outfile	shell.c	/^  char outfile[FILENAME_MAX]; \/* Filename for *out *\/$/;"	m	struct:ShellState	file:
output_c_string	shell.c	/^static void output_c_string(FILE *out, const char *z){$/;"	f	file:
output_csv	shell.c	/^static void output_csv(ShellState *p, const char *z, int bSep){$/;"	f	file:
output_file_close	shell.c	/^static void output_file_close(FILE *f){$/;"	f	file:
output_file_open	shell.c	/^static FILE *output_file_open(const char *zFile){$/;"	f	file:
output_hex_blob	shell.c	/^static void output_hex_blob(FILE *out, const void *pBlob, int nBlob){$/;"	f	file:
output_html_string	shell.c	/^static void output_html_string(FILE *out, const char *z){$/;"	f	file:
output_quoted_string	shell.c	/^static void output_quoted_string(FILE *out, const char *z){$/;"	f	file:
output_reset	shell.c	/^static void output_reset(ShellState *p){$/;"	f	file:
overflow	func.c	/^  u8 overflow;      \/* True if integer overflow seen *\/$/;"	m	struct:SumCtx	file:
overload_function	sqlite3ext.h	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines
overloadedGlobFunction	test8.c	/^static void overloadedGlobFunction($/;"	f	file:
owner	mutex_unix.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
owner	mutex_w32.c	/^  volatile DWORD owner;      \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
p	shell.c	/^  sqlite3_session *p;      \/* The open session *\/$/;"	m	struct:OpenSession	file:
p	sqliteInt.h	/^  void *p;          \/* Pointer to sampled record *\/$/;"	m	struct:IndexSample
p	test_multiplex.c	/^    sqlite3_file *p;                  \/* Handle for the chunk *\/$/;"	m	struct:multiplexGroup::multiplexReal	file:
p	vdbe.h	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::p4union
p1	vdbe.h	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp
p1	vdbe.h	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList
p1	whereInt.h	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel
p2	vdbe.h	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp
p2	vdbe.h	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList
p2	whereInt.h	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel
p3	vdbe.h	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp
p3	vdbe.h	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList
p3	whereInt.h	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel
p4	vdbe.h	/^  } p4;$/;"	m	struct:VdbeOp	typeref:union:VdbeOp::p4union
p4type	vdbe.h	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp
p4union	vdbe.h	/^  union p4union {     \/* fourth parameter *\/$/;"	u	struct:VdbeOp
p5	vdbe.h	/^  u8 p5;              \/* Fifth parameter is an unsigned character *\/$/;"	m	struct:VdbeOp
p5	whereInt.h	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel
pAggInfo	sqliteInt.h	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr
pAggInfo	sqliteInt.h	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext
pAinc	sqliteInt.h	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse
pAltCursor	vdbeInt.h	/^  VdbeCursor *pAltCursor; \/* Associated index cursor from which to read *\/$/;"	m	struct:VdbeCursor
pAndInfo	whereInt.h	/^    WhereAndInfo *pAndInfo; \/* Extra information if (eOperator& WO_AND)!=0 *\/$/;"	m	union:WhereTerm::__anon8
pAppData	os_win.c	/^  void *pAppData;                    \/* The extra pAppData, if any. *\/$/;"	m	struct:winVfsAppData	file:
pArg	sqliteInt.h	/^  void *pArg;                \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler
pArg	test_quota.c	/^  void *pArg;                    \/* Third argument to the xCallback() *\/$/;"	m	struct:quotaGroup	file:
pArray	tclsqlite.c	/^  Tcl_Obj *pArray;                \/* Name of array variable *\/$/;"	m	struct:DbEvalContext	file:
pAuthArg	sqliteInt.h	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3
pAux	sqliteInt.h	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module
pAux	vdbeInt.h	/^  void *pAux;                     \/* Aux data pointer *\/$/;"	m	struct:AuxData
pAuxData	vdbeInt.h	/^  AuxData *pAuxData;      \/* Linked list of auxdata allocations *\/$/;"	m	struct:Vdbe
pAuxData	vdbeInt.h	/^  AuxData *pAuxData;      \/* Linked list of auxdata allocations *\/$/;"	m	struct:VdbeFrame
pBackup	pager.c	/^  sqlite3_backup *pBackup;    \/* Pointer to list of ongoing backup processes *\/$/;"	m	struct:Pager	file:
pBlob	tclsqlite.c	/^  sqlite3_blob *pBlob;      \/* sqlite3 blob handle *\/$/;"	m	struct:IncrblobChannel	file:
pBlockingConnection	sqliteInt.h	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3
pBt	btreeInt.h	/^  BtShared *pBt;            \/* The BtShared this cursor points to *\/$/;"	m	struct:BtCursor
pBt	btreeInt.h	/^  BtShared *pBt;       \/* Pointer to BtShared that this page is part of *\/$/;"	m	struct:MemPage
pBt	btreeInt.h	/^  BtShared *pBt;     \/* Sharable content of this btree *\/$/;"	m	struct:Btree
pBt	btreeInt.h	/^  BtShared *pBt;    \/* The tree being checked out *\/$/;"	m	struct:IntegrityCk
pBt	sqliteInt.h	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db
pBt	vdbeInt.h	/^  Btree *pBt;           \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor
pBtree	btreeInt.h	/^  Btree *pBtree;            \/* The Btree to which this cursor belongs *\/$/;"	m	struct:BtCursor
pBtree	btreeInt.h	/^  Btree *pBtree;        \/* Btree handle holding this lock *\/$/;"	m	struct:BtLock
pBuffer	test_vfs.c	/^  TestvfsBuffer *pBuffer;         \/* List of shared buffers *\/$/;"	m	struct:Testvfs	file:
pBulk	pcache1.c	/^  void *pBulk;                        \/* Bulk memory used by pcache-local *\/$/;"	m	struct:PCache1	file:
pBusyArg	test_superlock.c	/^  void *pBusyArg;                 \/* First arg to pass to xBusy *\/$/;"	m	struct:SuperlockBusy	file:
pBusyHandlerArg	pager.c	/^  void *pBusyHandlerArg;      \/* Context argument for xBusyHandler *\/$/;"	m	struct:Pager	file:
pCCurHint	sqliteInt.h	/^    struct CCurHint *pCCurHint;                \/* Used by codeCursorHint() *\/$/;"	m	union:Walker::__anon19	typeref:struct:Walker::__anon19::CCurHint
pCache	pcache.c	/^  sqlite3_pcache *pCache;             \/* Pluggable cache module *\/$/;"	m	struct:PCache	file:
pCache	pcache.h	/^  PCache *pCache;                \/* Cache that owns this page *\/$/;"	m	struct:PgHdr
pCache	pcache1.c	/^  PCache1 *pCache;               \/* Cache that currently owns this page *\/$/;"	m	struct:PgHdr1	file:
pCheck	sqliteInt.h	/^  ExprList *pCheck;    \/* All CHECK constraints *\/$/;"	m	struct:Table
pChunk	memjournal.c	/^  FileChunk *pChunk;              \/* Specific chunk into which cursor points *\/$/;"	m	struct:FilePoint	file:
pChunk	rowset.c	/^  struct RowSetChunk *pChunk;    \/* List of all chunk allocations *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetChunk	file:
pCmd	test_bestindex.c	/^  Tcl_Obj *pCmd;$/;"	m	struct:tcl_vtab	file:
pCmp	test1.c	/^  Tcl_Obj *pCmp;$/;"	m	struct:TestCollationX	file:
pCodec	pager.c	/^  void *pCodec;               \/* First argument to xCodec... methods *\/$/;"	m	struct:Pager	file:
pColl	vdbe.h	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::p4union
pCollNeededArg	sqliteInt.h	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3
pCollate	tclsqlite.c	/^  SqlCollate *pCollate;      \/* List of SQL collation functions *\/$/;"	m	struct:SqliteDb	file:
pCollateNeeded	tclsqlite.c	/^  Tcl_Obj *pCollateNeeded;   \/* Collation needed script *\/$/;"	m	struct:SqliteDb	file:
pCols	sqliteInt.h	/^    ExprList *pCols;                \/* List of explicit column names, or NULL *\/$/;"	m	struct:With::Cte
pColumnList	test_schema.c	/^  sqlite3_stmt *pColumnList;$/;"	m	struct:schema_cursor	file:
pColumns	sqliteInt.h	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger
pCommitArg	sqliteInt.h	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/$/;"	m	struct:sqlite3
pConstExpr	sqliteInt.h	/^  ExprList *pConstExpr;\/* Constant expressions *\/$/;"	m	struct:Parse
pContent	test_intarray.c	/^  sqlite3_intarray *pContent;   \/* Content of the integer array *\/$/;"	m	struct:intarray_vtab	file:
pCovidx	whereInt.h	/^    Index *pCovidx;       \/* Possible covering index for WHERE_MULTI_OR *\/$/;"	m	union:WhereLevel::__anon3
pCsr	vdbeInt.h	/^  VdbeCursor *pCsr;               \/* Cursor to read old values from *\/$/;"	m	struct:PreUpdate
pCsr	vdbeblob.c	/^  BtCursor *pCsr;         \/* Cursor pointing at blob row *\/$/;"	m	struct:Incrblob	file:
pCtx	vdbe.h	/^    sqlite3_context *pCtx; \/* Used when p4type is P4_FUNCCTX *\/$/;"	m	union:VdbeOp::p4union
pCurrent	os_unix.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:unix_syscall	file:
pCurrent	os_win.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:win_syscall	file:
pCursor	btreeInt.h	/^  BtCursor *pCursor;    \/* A list of all open cursors *\/$/;"	m	struct:BtShared
pCursor	vdbeInt.h	/^    BtCursor *pCursor;          \/* CURTYPE_BTREE.  Btree cursor *\/$/;"	m	union:VdbeCursor::__anon1
pData	btree.h	/^  const void *pData;      \/* Data for tables.  NULL for indexes *\/$/;"	m	struct:BtreePayload
pData	pcache.h	/^  void *pData;                   \/* Page data *\/$/;"	m	struct:PgHdr
pDb	tclsqlite.c	/^  SqliteDb *pDb;                  \/* Database handle *\/$/;"	m	struct:DbEvalContext	file:
pDb	tclsqlite.c	/^  SqliteDb *pDb;            \/* Associated database connection *\/$/;"	m	struct:IncrblobChannel	file:
pDb	tclsqlite.c	/^  SqliteDb *pDb;        \/* Database connection that owns this function *\/$/;"	m	struct:SqlFunc	file:
pDb	test_server.c	/^  sqlite3 *pDb;                \/* The SQLite connection *\/$/;"	m	struct:SqlMessage	file:
pDbFd	wal.c	/^  sqlite3_file *pDbFd;       \/* File handle for the database file *\/$/;"	m	struct:Wal	file:
pDbList	test_schema.c	/^  sqlite3_stmt *pDbList;$/;"	m	struct:schema_cursor	file:
pDbPage	btreeInt.h	/^  DbPage *pDbPage;     \/* Pager page handle *\/$/;"	m	struct:MemPage
pDef	vdbeInt.h	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:Mem::MemValue
pDefault	os_unix.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:unix_syscall	file:
pDefault	os_win.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:win_syscall	file:
pDel	test1.c	/^  Tcl_Obj *pDel;$/;"	m	struct:TestCollationX	file:
pDelFrame	vdbeInt.h	/^  VdbeFrame *pDelFrame;   \/* List of frame objects to free on VM reset *\/$/;"	m	struct:Vdbe
pDest	backup.c	/^  Btree *pDest;            \/* Destination b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pDestDb	backup.c	/^  sqlite3* pDestDb;        \/* Destination database handle *\/$/;"	m	struct:sqlite3_backup	file:
pDestroy	test1.c	/^  Tcl_Obj *pDestroy;              \/* Destructor script *\/$/;"	m	struct:CreateFunctionV2	file:
pDestructor	sqliteInt.h	/^    FuncDestructor *pDestructor;   \/* Reference counted destructor function *\/$/;"	m	union:FuncDef::__anon11
pDflt	sqliteInt.h	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column
pDfltColl	sqliteInt.h	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3
pDir	test_fs.c	/^  DIR *pDir;                      \/* Open directory *\/$/;"	m	struct:FsdirCsr	file:
pDirty	pcache.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDirty	pcache.h	/^  PgHdr *pDirty;                 \/* Transient list of dirty sorted by pgno *\/$/;"	m	struct:PgHdr
pDirtyNext	pcache.h	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr
pDirtyPrev	pcache.h	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr
pDirtyTail	pcache.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDisconnect	sqliteInt.h	/^  VTable *pDisconnect;    \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3
pDistinctSet	whereInt.h	/^  ExprList *pDistinctSet;   \/* DISTINCT over all these values *\/$/;"	m	struct:WhereInfo
pDummy	test_pcache.c	/^  void *pDummy;             \/* Dummy allocation to simulate failures *\/$/;"	m	struct:testpcacheGlobalType	file:
pEList	sqliteInt.h	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select
pEList	sqliteInt.h	/^  ExprList *pEList;    \/* Optional list of result-set columns *\/$/;"	m	struct:NameContext
pEnd	pcache1.c	/^  void *pStart, *pEnd;           \/* Bounds of global page cache memory *\/$/;"	m	struct:PCacheGlobal	file:
pEnd	sqliteInt.h	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside
pEntry	rowset.c	/^  struct RowSetEntry *pEntry;    \/* List of entries using pRight *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pEpoTab	sqliteInt.h	/^  Table *pEpoTab;                      \/* Eponymous table for this module *\/$/;"	m	struct:Module
pErr	sqliteInt.h	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3
pExpr	sqliteInt.h	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func
pExpr	sqliteInt.h	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col
pExpr	sqliteInt.h	/^    Expr *pExpr;            \/* The list of expressions *\/$/;"	m	struct:ExprList::ExprList_item
pExpr	sqliteInt.h	/^  Expr *pExpr;          \/* The expression parse tree *\/$/;"	m	struct:ExprSpan
pExpr	vdbe.h	/^    Expr *pExpr;           \/* Used when p4type is P4_EXPR *\/$/;"	m	union:VdbeOp::p4union
pExpr	whereInt.h	/^  Expr *pExpr;            \/* Pointer to the subexpression that is this term *\/$/;"	m	struct:WhereTerm
pExprList	sqliteInt.h	/^  ExprList *pExprList; \/* SET clause for UPDATE. *\/$/;"	m	struct:TriggerStep
pExtra	pcache.h	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr
pFKey	sqliteInt.h	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table
pFd	test_osinst.c	/^  sqlite3_file *pFd;              \/* File descriptor open on vfslog file *\/$/;"	m	struct:VfslogVtab	file:
pFd	test_vfs.c	/^  TestvfsFd *pFd;                 \/* File data *\/$/;"	m	struct:TestvfsFile	file:
pFd	vdbesort.c	/^  sqlite3_file *pFd;              \/* File handle *\/$/;"	m	struct:SorterFile	file:
pFd	vdbesort.c	/^  sqlite3_file *pFd;              \/* File handle to write to *\/$/;"	m	struct:PmaWriter	file:
pFd	vdbesort.c	/^  sqlite3_file *pFd;          \/* File handle we are reading from *\/$/;"	m	struct:PmaReader	file:
pFd	wal.c	/^  sqlite3_file *pFd;           \/* The WAL file to which we write *\/$/;"	m	struct:WalWriter	file:
pFile	test6.c	/^  CrashFile *pFile;            \/* File this write() applies to *\/$/;"	m	struct:WriteBuffer	file:
pFile	test_onefile.c	/^  sqlite3_file *pFile;$/;"	m	struct:fs_real_file	file:
pFile	test_quota.c	/^  quotaFile *pFile;               \/* The underlying file *\/$/;"	m	struct:quotaConn	file:
pFile	test_quota.c	/^  quotaFile *pFile;       \/* The file record in the quota system *\/$/;"	m	struct:quota_FILE	file:
pFile	test_vfs.c	/^  TestvfsFd *pFile;               \/* List of open handles *\/$/;"	m	struct:TestvfsBuffer	file:
pFileList	test_onefile.c	/^  fs_real_file *pFileList;$/;"	m	struct:fs_vfs_t	file:
pFiles	test_quota.c	/^  quotaFile *pFiles;             \/* Files within this group *\/$/;"	m	struct:quotaGroup	file:
pFiller	vdbeInt.h	/^  void *pFiller;      \/* So that sizeof(Mem) is a multiple of 8 *\/$/;"	m	struct:Mem
pFinal	test1.c	/^  Tcl_Obj *pFinal;                \/* Script for agg. finalization invocation *\/$/;"	m	struct:CreateFunctionV2	file:
pFirst	mem2.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:__anon21	typeref:struct:__anon21::MemBlockHdr	file:
pFirst	memjournal.c	/^  FileChunk *pFirst;              \/* Head of in-memory chunk-list *\/$/;"	m	struct:MemJournal	file:
pFirst	os_unix.c	/^  unixShm *pFirst;           \/* All unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
pFirst	os_win.c	/^  winShm *pFirst;            \/* All winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
pForest	rowset.c	/^  struct RowSetEntry *pForest;   \/* List of binary trees of entries *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrame	vdbeInt.h	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:Mem::MemValue
pFrame	vdbeInt.h	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe
pFree	pcache1.c	/^  PgFreeslot *pFree;             \/* Free page blocks *\/$/;"	m	struct:PCacheGlobal	file:
pFree	pcache1.c	/^  PgHdr1 *pFree;                      \/* List of unused pcache-local pages *\/$/;"	m	struct:PCache1	file:
pFree	sqliteInt.h	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside
pFree	test_wsd.c	/^  u8 *pFree;$/;"	m	struct:ProcessLocalStorage	file:
pFree	vdbeInt.h	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe
pFresh	rowset.c	/^  struct RowSetEntry *pFresh;    \/* Source of new entry objects *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrom	sqliteInt.h	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey
pFunc	sqliteInt.h	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func
pFunc	tclsqlite.c	/^  SqlFunc *pFunc;            \/* List of SQL functions *\/$/;"	m	struct:SqliteDb	file:
pFunc	test1.c	/^  Tcl_Obj *pFunc;                 \/* Script for function invocation *\/$/;"	m	struct:CreateFunctionV2	file:
pFunc	vdbe.h	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::p4union
pFunc	vdbeInt.h	/^  FuncDef *pFunc;         \/* Pointer to function information *\/$/;"	m	struct:sqlite3_context
pFuncArg	sqliteInt.h	/^      ExprList *pFuncArg;  \/* Arguments to table-valued-function *\/$/;"	m	union:SrcList::SrcList_item::__anon17
pGlobal	test_wsd.c	/^static ProcessLocalStorage *pGlobal = 0;$/;"	v	file:
pGroup	pcache1.c	/^  PGroup *pGroup;                     \/* PGroup this cache belongs to *\/$/;"	m	struct:PCache1	file:
pGroup	test_multiplex.c	/^  multiplexGroup *pGroup;         \/* The underlying group of files *\/$/;"	m	struct:multiplexConn	file:
pGroup	test_quota.c	/^  quotaGroup *pGroup;             \/* Quota group to which this file belongs *\/$/;"	m	struct:quotaFile	file:
pGroup	test_quota.c	/^  quotaGroup *pGroup;$/;"	m	struct:__anon25	file:
pGroupBy	sqliteInt.h	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo
pGroupBy	sqliteInt.h	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select
pGroups	test_multiplex.c	/^  multiplexGroup *pGroups;$/;"	m	struct:__anon20	file:
pHasContent	btreeInt.h	/^  Bitvec *pHasContent;  \/* Set of pages moved to free-list this transaction *\/$/;"	m	struct:BtShared
pHash	sqliteInt.h	/^    FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	union:FuncDef::__anon11
pHaving	sqliteInt.h	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select
pHeap	sqliteInt.h	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config
pI64	vdbe.h	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::p4union
pIBIndex	sqliteInt.h	/^    Index *pIBIndex;  \/* Index structure corresponding to u1.zIndexedBy *\/$/;"	m	struct:SrcList::SrcList_item
pId	os_unix.c	/^  struct vxworksFileId *pId;          \/* Unique file ID *\/$/;"	m	struct:unixFile	typeref:struct:unixFile::vxworksFileId	file:
pId	os_unix.c	/^  struct vxworksFileId *pId;  \/* Unique file ID for vxworks. *\/$/;"	m	struct:unixFileId	typeref:struct:unixFileId::vxworksFileId	file:
pIdList	sqliteInt.h	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep
pIdx	expr.c	/^  Index *pIdx;     \/* The index to be tested for coverage *\/$/;"	m	struct:IdxCover	file:
pIdx	vdbemem.c	/^  Index *pIdx;$/;"	m	struct:ValueNewStat4Ctx	file:
pIdx	wherecode.c	/^  Index *pIdx;    \/* The index used to access the table *\/$/;"	m	struct:CCurHint	file:
pIdxCover	sqliteInt.h	/^    struct IdxCover *pIdxCover;                \/* Check for index coverage *\/$/;"	m	union:Walker::__anon19	typeref:struct:Walker::__anon19::IdxCover
pIdxExpr	whereInt.h	/^  Expr *pIdxExpr;            \/* Search for this index expression *\/$/;"	m	struct:WhereScan
pIn	threads.c	/^  void *pIn;                     \/* Argument to the thread *\/$/;"	m	struct:SQLiteThread	file:
pIn	threads.c	/^  void *pIn;               \/* Argument to xTask *\/$/;"	m	struct:SQLiteThread	file:
pInJournal	pager.c	/^  Bitvec *pInJournal;         \/* One bit for each page in the database file *\/$/;"	m	struct:Pager	file:
pInSavepoint	pager.c	/^  Bitvec *pInSavepoint;        \/* Set of pages in this savepoint *\/$/;"	m	struct:PagerSavepoint	file:
pIncr	vdbesort.c	/^  IncrMerger *pIncr;          \/* Incremental merger *\/$/;"	m	struct:PmaReader	file:
pIncrblob	tclsqlite.c	/^  IncrblobChannel *pIncrblob;\/* Linked list of open incrblob channels *\/$/;"	m	struct:SqliteDb	file:
pIndex	sqliteInt.h	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table
pIndex	whereInt.h	/^      Index *pIndex;         \/* Index used, or NULL *\/$/;"	m	struct:WhereLoop::__anon5::__anon6
pInfo	test_vfstrace.c	/^  vfstrace_info *pInfo;     \/* The trace-VFS to which this file belongs *\/$/;"	m	struct:vfstrace_file	file:
pInitMutex	sqliteInt.h	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config
pInode	os_unix.c	/^  unixInodeInfo *pInode;              \/* Info about locks on this inode *\/$/;"	m	struct:unixFile	file:
pInode	os_unix.c	/^  unixInodeInfo *pInode;     \/* unixInodeInfo that owns this SHM node *\/$/;"	m	struct:unixShmNode	file:
pInterp	test1.c	/^  Tcl_Interp *pInterp;$/;"	m	struct:LogCallback	file:
pKey	btree.h	/^  const void *pKey;       \/* Key content for indexes.  NULL for tables *\/$/;"	m	struct:BtreePayload
pKey	btreeInt.h	/^  void *pKey;               \/* Saved key that was cursor last known position *\/$/;"	m	struct:BtCursor
pKey	hash.h	/^  const char *pKey;            \/* Key associated with this element *\/$/;"	m	struct:HashElem
pKey	test_wsd.c	/^  void *pKey;$/;"	m	struct:ProcessLocalVar	file:
pKeyInfo	btreeInt.h	/^  struct KeyInfo *pKeyInfo; \/* Argument passed to comparison function *\/$/;"	m	struct:BtCursor	typeref:struct:BtCursor::KeyInfo
pKeyInfo	sqliteInt.h	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord
pKeyInfo	vdbe.h	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::p4union
pKeyInfo	vdbeInt.h	/^  KeyInfo *pKeyInfo;    \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor
pKeyInfo	vdbesort.c	/^  KeyInfo *pKeyInfo;              \/* How to compare records *\/$/;"	m	struct:VdbeSorter	file:
pLast	mem2.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:__anon21	typeref:struct:__anon21::MemBlockHdr	file:
pLast	rowset.c	/^  struct RowSetEntry *pLast;     \/* Last entry on the pEntry list *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pLast	sqliteInt.h	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep
pLeft	rowset.c	/^  struct RowSetEntry *pLeft;    \/* Left subtree (smaller entries) *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pLeft	sqliteInt.h	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr
pLimit	sqliteInt.h	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select
pList	sqliteInt.h	/^    ExprList *pList;     \/* op = IN, EXISTS, SELECT, CASE, FUNCTION, BETWEEN *\/$/;"	m	union:Expr::__anon13
pList	test_journal.c	/^  jt_file *pList;                \/* List of all open files *\/$/;"	m	struct:JtGlobal	file:
pList	vdbesort.c	/^  SorterRecord *pList;            \/* Linked list of records *\/$/;"	m	struct:SorterList	file:
pList1	test_tclvar.c	/^  Tcl_Obj *pList1;     \/* Result of [info vars ?pattern?] *\/$/;"	m	struct:tclvar_cursor	file:
pList2	test_tclvar.c	/^  Tcl_Obj *pList2;     \/* Result of [array names [lindex $pList1 $i1]] *\/$/;"	m	struct:tclvar_cursor	file:
pLock	btreeInt.h	/^  BtLock *pLock;        \/* List of locks held on this shared-btree struct *\/$/;"	m	struct:BtShared
pLog	shell.c	/^  FILE *pLog;            \/* Write log output here *\/$/;"	m	struct:ShellState	file:
pLog	test_osinst.c	/^  sqlite3_file *pLog;             \/* Log file handle *\/$/;"	m	struct:VfslogVfs	file:
pLogArg	sqliteInt.h	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config
pLoops	whereInt.h	/^  WhereLoop *pLoops;        \/* List of all WhereLoop objects *\/$/;"	m	struct:WhereInfo
pLruNext	pcache1.c	/^  PgHdr1 *pLruNext;              \/* Next in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruPrev	pcache1.c	/^  PgHdr1 *pLruPrev;              \/* Previous in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pMap	os_win.c	/^    void *pMap;$/;"	m	struct:winShmNode::ShmRegion	file:
pMapRegion	os_unix.c	/^  void *pMapRegion;                   \/* Memory mapped region *\/$/;"	m	struct:unixFile	file:
pMapRegion	os_win.c	/^  void *pMapRegion;             \/* Area memory mapped *\/$/;"	m	struct:winFile	file:
pMem	vdbe.h	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::p4union
pMem	vdbeInt.h	/^  Mem *pMem;              \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context
pMerger	vdbesort.c	/^  MergeEngine *pMerger;           \/* Merge engine thread reads data from *\/$/;"	m	struct:IncrMerger	file:
pMerger	vdbesort.c	/^  MergeEngine *pMerger;           \/* Or here, if bUseThreads==0 *\/$/;"	m	struct:VdbeSorter	file:
pMethod	memjournal.c	/^  const sqlite3_io_methods *pMethod; \/* Parent class. MUST BE FIRST *\/$/;"	m	struct:MemJournal	file:
pMethod	os_unix.c	/^  sqlite3_io_methods const *pMethod;  \/* Always the first entry *\/$/;"	m	struct:unixFile	file:
pMethod	os_win.c	/^  const sqlite3_io_methods *pMethod; \/* The file I\/O methods to use. *\/$/;"	m	struct:winVfsAppData	file:
pMethod	os_win.c	/^  const sqlite3_io_methods *pMethod; \/*** Must be first ***\/$/;"	m	struct:winFile	file:
pMethod	test6.c	/^  const sqlite3_io_methods *pMethod;   \/* Must be first *\/$/;"	m	struct:CrashFile	file:
pMmapFreelist	pager.c	/^  PgHdr *pMmapFreelist;       \/* List of free mmap page headers (pDirty) *\/$/;"	m	struct:Pager	file:
pMod	sqliteInt.h	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable
pModule	sqliteInt.h	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module
pMutex	test_multiplex.c	/^  sqlite3_mutex *pMutex;$/;"	m	struct:__anon20	file:
pMutex	test_quota.c	/^  sqlite3_mutex *pMutex;$/;"	m	struct:__anon25	file:
pNC	sqliteInt.h	/^    NameContext *pNC;                          \/* Naming context *\/$/;"	m	union:Walker::__anon19
pName	sqliteInt.h	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer
pNew	whereInt.h	/^  WhereLoop *pNew;          \/* Template WhereLoop *\/$/;"	m	struct:WhereLoopBuilder
pNewTable	sqliteInt.h	/^  Table *pNewTable;         \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse
pNewTrigger	sqliteInt.h	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse
pNewUnpacked	vdbeInt.h	/^  UnpackedRecord *pNewUnpacked;   \/* Unpacked version of new.* record *\/$/;"	m	struct:PreUpdate
pNext	backup.c	/^  sqlite3_backup *pNext;   \/* Next backup associated with source pager *\/$/;"	m	struct:sqlite3_backup	file:
pNext	btreeInt.h	/^  BtCursor *pNext;          \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor
pNext	btreeInt.h	/^  BtLock *pNext;        \/* Next in BtShared.pLock list *\/$/;"	m	struct:BtLock
pNext	btreeInt.h	/^  BtShared *pNext;      \/* Next on a list of sharable BtShared structs *\/$/;"	m	struct:BtShared
pNext	btreeInt.h	/^  Btree *pNext;      \/* List of other sharable Btrees from the same db *\/$/;"	m	struct:Btree
pNext	malloc.c	/^  struct ScratchFreeslot *pNext;   \/* Next unused scratch buffer *\/$/;"	m	struct:ScratchFreeslot	typeref:struct:ScratchFreeslot::ScratchFreeslot	file:
pNext	mem2.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::MemBlockHdr	file:
pNext	memjournal.c	/^  FileChunk *pNext;               \/* Next chunk in the journal *\/$/;"	m	struct:FileChunk	file:
pNext	os_unix.c	/^  UnixUnusedFd *pNext;      \/* Next unused file descriptor on same file *\/$/;"	m	struct:UnixUnusedFd	file:
pNext	os_unix.c	/^  struct vxworksFileId *pNext;  \/* Next in a list of them all *\/$/;"	m	struct:vxworksFileId	typeref:struct:vxworksFileId::vxworksFileId	file:
pNext	os_unix.c	/^  unixInodeInfo *pNext;           \/* List of all unixInodeInfo objects *\/$/;"	m	struct:unixInodeInfo	file:
pNext	os_unix.c	/^  unixShm *pNext;            \/* Next unixShm with the same unixShmNode *\/$/;"	m	struct:unixShm	file:
pNext	os_win.c	/^  winShm *pNext;             \/* Next winShm with the same winShmNode *\/$/;"	m	struct:winShm	file:
pNext	os_win.c	/^  winShmNode *pNext;         \/* Next in list of all winShmNode objects *\/$/;"	m	struct:winShmNode	file:
pNext	pcache1.c	/^  PgFreeslot *pNext;  \/* Next free slot *\/$/;"	m	struct:PgFreeslot	file:
pNext	pcache1.c	/^  PgHdr1 *pNext;                 \/* Next in hash table chain *\/$/;"	m	struct:PgHdr1	file:
pNext	sqliteInt.h	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo
pNext	sqliteInt.h	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef
pNext	sqliteInt.h	/^  Index *pNext;            \/* The next index associated with the same table *\/$/;"	m	struct:Index
pNext	sqliteInt.h	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot
pNext	sqliteInt.h	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext
pNext	sqliteInt.h	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint
pNext	sqliteInt.h	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select
pNext	sqliteInt.h	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger
pNext	sqliteInt.h	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg
pNext	sqliteInt.h	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep
pNext	sqliteInt.h	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable
pNext	tclsqlite.c	/^  IncrblobChannel *pNext;   \/* Linked list of all open incrblob channels *\/$/;"	m	struct:IncrblobChannel	file:
pNext	tclsqlite.c	/^  SqlCollate *pNext;    \/* Next function on the list of them all *\/$/;"	m	struct:SqlCollate	file:
pNext	tclsqlite.c	/^  SqlFunc *pNext;       \/* Next function on the list of them all *\/$/;"	m	struct:SqlFunc	file:
pNext	tclsqlite.c	/^  SqlPreparedStmt *pNext;  \/* Next in linked list *\/$/;"	m	struct:SqlPreparedStmt	file:
pNext	test6.c	/^  WriteBuffer *pNext;          \/* Next in CrashGlobal.pWriteList *\/$/;"	m	struct:WriteBuffer	file:
pNext	test_journal.c	/^  jt_file *pNext;          \/* All files are stored in a linked list *\/$/;"	m	struct:jt_file	file:
pNext	test_multiplex.c	/^  multiplexGroup *pNext, *pPrev;   \/* Doubly linked list of all group objects *\/$/;"	m	struct:multiplexGroup	file:
pNext	test_onefile.c	/^  fs_real_file *pNext;$/;"	m	struct:fs_real_file	file:
pNext	test_quota.c	/^  quotaFile *pNext, **ppPrev;     \/* Linked list of files in the same group *\/$/;"	m	struct:quotaFile	file:
pNext	test_quota.c	/^  quotaGroup *pNext, **ppPrev;   \/* Doubly linked list of all quota objects *\/$/;"	m	struct:quotaGroup	file:
pNext	test_server.c	/^  SqlMessage *pNext;           \/* Next message in the queue *\/$/;"	m	struct:SqlMessage	file:
pNext	test_vfs.c	/^  TestvfsBuffer *pNext;           \/* Next in linked list of all buffers *\/$/;"	m	struct:TestvfsBuffer	file:
pNext	test_vfs.c	/^  TestvfsFd *pNext;               \/* Next handle opened on the same file *\/$/;"	m	struct:TestvfsFd	file:
pNext	test_wsd.c	/^  ProcessLocalVar *pNext;$/;"	m	struct:ProcessLocalVar	file:
pNext	vdbe.h	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram
pNext	vdbeInt.h	/^  AuxData *pNext;                 \/* Next element in list *\/$/;"	m	struct:AuxData
pNext	vdbeInt.h	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe
pNext	vdbesort.c	/^    SorterRecord *pNext;          \/* Pointer to next record in list *\/$/;"	m	union:SorterRecord::__anon2	file:
pNextBlocked	sqliteInt.h	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3
pNextChunk	rowset.c	/^  struct RowSetChunk *pNextChunk;        \/* Next chunk on list of them all *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetChunk	file:
pNextFrom	sqliteInt.h	/^  FKey *pNextFrom;  \/* Next FKey with the same in pFrom. Next parent of pFrom *\/$/;"	m	struct:FKey
pNextLoop	whereInt.h	/^  WhereLoop *pNextLoop; \/* Next WhereLoop object in the WhereClause *\/$/;"	m	struct:WhereLoop
pNextTo	sqliteInt.h	/^  FKey *pNextTo;    \/* Next with the same zTo. Next child of zTo. *\/$/;"	m	struct:FKey
pNextZombie	sqliteInt.h	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table
pObj	test1.c	/^  Tcl_Obj *pObj;$/;"	m	struct:LogCallback	file:
pOffset	sqliteInt.h	/^  Expr *pOffset;         \/* OFFSET expression. NULL means not used. *\/$/;"	m	struct:Select
pOldMethod	os_unix.c	/^  sqlite3_io_methods const *pOldMethod;     \/* Original I\/O methods for close *\/$/;"	m	struct:proxyLockingContext	file:
pOn	sqliteInt.h	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item
pOrInfo	whereInt.h	/^    WhereOrInfo *pOrInfo;   \/* Extra information if (eOperator & WO_OR)!=0 *\/$/;"	m	union:WhereTerm::__anon8
pOrSet	whereInt.h	/^  WhereOrSet *pOrSet;       \/* Record best loops here, if not NULL *\/$/;"	m	struct:WhereLoopBuilder
pOrderBy	select.c	/^  ExprList *pOrderBy;   \/* The ORDER BY (or GROUP BY clause) *\/$/;"	m	struct:SortCtx	file:
pOrderBy	sqliteInt.h	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select
pOrderBy	sqliteInt.h	/^  ExprList *pOrderBy;  \/* Key columns for SRT_Queue and SRT_DistQueue *\/$/;"	m	struct:SelectDest
pOrderBy	whereInt.h	/^  ExprList *pOrderBy;       \/* ORDER BY clause *\/$/;"	m	struct:WhereLoopBuilder
pOrderBy	whereInt.h	/^  ExprList *pOrderBy;       \/* The ORDER BY clause or NULL *\/$/;"	m	struct:WhereInfo
pOrig	test6.c	/^  sqlite3_vfs *pOrig;                   \/* Wrapped vfs structure *\/$/;"	m	struct:crashAppData	file:
pOrigVfs	test_multiplex.c	/^  sqlite3_vfs *pOrigVfs;$/;"	m	struct:__anon20	file:
pOrigVfs	test_quota.c	/^  sqlite3_vfs *pOrigVfs;$/;"	m	struct:__anon25	file:
pOrigWC	whereInt.h	/^  WhereClause *pOrigWC;      \/* Original, innermost WhereClause *\/$/;"	m	struct:WhereScan
pOut	threads.c	/^  void *pOut;                    \/* Result returned by the thread *\/$/;"	m	struct:SQLiteThread	file:
pOut	vdbeInt.h	/^  Mem *pOut;              \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context
pOutArg	test_vfstrace.c	/^  void *pOutArg;                      \/* First argument to xOut *\/$/;"	m	struct:vfstrace_info	file:
pOuter	sqliteInt.h	/^  With *pOuter;                   \/* Containing WITH clause, or NULL *\/$/;"	m	struct:With
pOuter	whereInt.h	/^  WhereClause *pOuter;     \/* Outer conjunction *\/$/;"	m	struct:WhereClause
pPCache	pager.c	/^  PCache *pPCache;            \/* Pointer to page cache object *\/$/;"	m	struct:Pager	file:
pPage	pcache.h	/^  sqlite3_pcache_page *pPage;    \/* Pcache object page handle *\/$/;"	m	struct:PgHdr
pPage	sqliteInt.h	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config
pPage1	btreeInt.h	/^  MemPage *pPage1;      \/* First page of the database *\/$/;"	m	struct:BtShared
pPager	btreeInt.h	/^  Pager *pPager;        \/* The page cache *\/$/;"	m	struct:BtShared
pPager	btreeInt.h	/^  Pager *pPager;    \/* The associated pager.  Also accessible by pBt->pPager *\/$/;"	m	struct:IntegrityCk
pPager	pcache.h	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr
pParent	test_onefile.c	/^  sqlite3_vfs *pParent;$/;"	m	struct:fs_vfs_t	file:
pParent	test_vfs.c	/^  sqlite3_vfs *pParent;           \/* The VFS to use for file IO *\/$/;"	m	struct:Testvfs	file:
pParent	vdbeInt.h	/^  VdbeFrame *pParent;     \/* Parent of this frame, or NULL if parent is main *\/$/;"	m	struct:VdbeFrame
pParse	sqliteInt.h	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker
pParse	sqliteInt.h	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext
pParse	sqliteInt.h	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext
pParse	sqliteInt.h	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer
pParse	vdbeInt.h	/^  Parse *pParse;          \/* Parsing context used to create this Vdbe *\/$/;"	m	struct:Vdbe
pParse	vdbemem.c	/^  Parse *pParse;$/;"	m	struct:ValueNewStat4Ctx	file:
pParse	whereInt.h	/^  Parse *pParse;            \/* Parsing and code generating context *\/$/;"	m	struct:WhereInfo
pPartIdxWhere	sqliteInt.h	/^  Expr *pPartIdxWhere;     \/* WHERE clause for partial indices *\/$/;"	m	struct:Index
pPayload	btreeInt.h	/^  u8 *pPayload;  \/* Pointer to the start of payload *\/$/;"	m	struct:CellInfo
pPg	dbstat.c	/^  DbPage *pPg;$/;"	m	struct:StatPage	file:
pPreStmt	tclsqlite.c	/^  SqlPreparedStmt *pPreStmt;      \/* Current statement *\/$/;"	m	struct:DbEvalContext	file:
pPreUpdate	sqliteInt.h	/^  PreUpdate *pPreUpdate;        \/* Context for active pre-update callback *\/$/;"	m	struct:sqlite3
pPreUpdateArg	sqliteInt.h	/^  void *pPreUpdateArg;          \/* First argument to xPreUpdateCallback *\/$/;"	m	struct:sqlite3
pPreUpdateHook	tclsqlite.c	/^  Tcl_Obj *pPreUpdateHook;   \/* Pre-update hook script (if any) *\/$/;"	m	struct:SqliteDb	file:
pPrev	btreeInt.h	/^  Btree *pPrev;      \/* Back pointer of the same list *\/$/;"	m	struct:Btree
pPrev	mem2.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::	file:
pPrev	os_unix.c	/^  unixInodeInfo *pPrev;           \/*    .... doubly linked *\/$/;"	m	struct:unixInodeInfo	file:
pPrev	tclsqlite.c	/^  IncrblobChannel *pPrev;   \/* Linked list of all open incrblob channels *\/$/;"	m	struct:IncrblobChannel	file:
pPrev	tclsqlite.c	/^  SqlPreparedStmt *pPrev;  \/* Previous on the list *\/$/;"	m	struct:SqlPreparedStmt	file:
pPrev	test_multiplex.c	/^  multiplexGroup *pNext, *pPrev;   \/* Doubly linked list of all group objects *\/$/;"	m	struct:multiplexGroup	file:
pPrev	test_server.c	/^  SqlMessage *pPrev;           \/* Previous message in the queue *\/$/;"	m	struct:SqlMessage	file:
pPrev	vdbeInt.h	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe
pPrevTo	sqliteInt.h	/^  FKey *pPrevTo;    \/* Previous with the same zTo *\/$/;"	m	struct:FKey
pPrior	sqliteInt.h	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select
pPrior	vtab.c	/^  VtabCtx *pPrior;    \/* Parent context (if any) *\/$/;"	m	struct:VtabCtx	file:
pProfileArg	sqliteInt.h	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3
pProgram	sqliteInt.h	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg
pProgram	vdbe.h	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::p4union
pProgram	vdbeInt.h	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe
pProgressArg	sqliteInt.h	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3
pQueueHead	test_server.c	/^  SqlMessage *pQueueHead;       \/* Head of the message queue *\/$/;"	m	struct:ServerState	file:
pQueueTail	test_server.c	/^  SqlMessage *pQueueTail;       \/* Tail of the message queue *\/$/;"	m	struct:ServerState	file:
pReader	vdbesort.c	/^  PmaReader *pReader;             \/* Readr data from here after Rewind() *\/$/;"	m	struct:VdbeSorter	file:
pReal	test_devsym.c	/^  sqlite3_file *pReal;$/;"	m	struct:devsym_file	file:
pReal	test_journal.c	/^  sqlite3_file *pReal;     \/* The file handle for the underlying vfs *\/$/;"	m	struct:jt_file	file:
pReal	test_mutex.c	/^  sqlite3_mutex *pReal;$/;"	m	struct:sqlite3_mutex	file:
pReal	test_onefile.c	/^  fs_real_file *pReal;$/;"	m	struct:fs_file	file:
pReal	test_osinst.c	/^  sqlite3_file *pReal;            \/* Underlying file handle *\/$/;"	m	struct:VfslogFile	file:
pReal	test_vfs.c	/^  sqlite3_file *pReal;            \/* The real, underlying file descriptor *\/$/;"	m	struct:TestvfsFd	file:
pReal	test_vfstrace.c	/^  sqlite3_file *pReal;      \/* The real underlying file *\/$/;"	m	struct:vfstrace_file	file:
pReal	vdbe.h	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::p4union
pRealFile	test6.c	/^  sqlite3_file *pRealFile;             \/* Underlying "real" file handle *\/$/;"	m	struct:CrashFile	file:
pRec	whereInt.h	/^  UnpackedRecord *pRec;     \/* Probe for stat4 (if required) *\/$/;"	m	struct:WhereLoopBuilder
pRef	btree.c	/^  MemPage *pRef;          \/* Reference page *\/$/;"	m	struct:CellArray	file:
pReprepare	sqliteInt.h	/^  Vdbe *pReprepare;         \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse
pResult	threads.c	/^  void *pResult;           \/* Result of xTask *\/$/;"	m	struct:SQLiteThread	file:
pResultSet	vdbeInt.h	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe
pRight	rowset.c	/^  struct RowSetEntry *pRight;   \/* Right subtree (larger entries) or list *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pRight	sqliteInt.h	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr
pRollbackArg	sqliteInt.h	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/$/;"	m	struct:sqlite3
pRollbackHook	tclsqlite.c	/^  Tcl_Obj *pRollbackHook;    \/* Rollback hook script (if any) *\/$/;"	m	struct:SqliteDb	file:
pRootVfs	test_vfstrace.c	/^  sqlite3_vfs *pRootVfs;              \/* The underlying real VFS *\/$/;"	m	struct:vfstrace_info	file:
pRowSet	vdbeInt.h	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:Mem::MemValue
pSavepoint	sqliteInt.h	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3
pSchema	btreeInt.h	/^  void *pSchema;        \/* Pointer to space allocated by sqlite3BtreeSchema() *\/$/;"	m	struct:BtShared
pSchema	sqliteInt.h	/^    Schema *pSchema;  \/* Schema to which this item is fixed *\/$/;"	m	struct:SrcList::SrcList_item
pSchema	sqliteInt.h	/^  Schema *pSchema;         \/* Schema containing this index *\/$/;"	m	struct:Index
pSchema	sqliteInt.h	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger
pSchema	sqliteInt.h	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db
pSchema	sqliteInt.h	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table
pSchema	sqliteInt.h	/^  Schema *pSchema;    \/* Fix items to this schema *\/$/;"	m	struct:DbFixer
pScopyFrom	vdbeInt.h	/^  Mem *pScopyFrom;    \/* This Mem is a shallow copy of pScopyFrom *\/$/;"	m	struct:Mem
pScratch	sqliteInt.h	/^  void *pScratch;                   \/* Scratch memory *\/$/;"	m	struct:Sqlite3Config
pScratchEnd	malloc.c	/^  void *pScratchEnd;$/;"	m	struct:Mem0Global	file:
pScratchFree	malloc.c	/^  ScratchFreeslot *pScratchFree;$/;"	m	struct:Mem0Global	file:
pScript	tclsqlite.c	/^  Tcl_Obj *pScript;     \/* The Tcl_Obj representation of the script *\/$/;"	m	struct:SqlFunc	file:
pScript	test_quota.c	/^  Tcl_Obj *pScript;      \/* Script to be run *\/$/;"	m	struct:TclQuotaCallback	file:
pScript	test_superlock.c	/^  Tcl_Obj *pScript;$/;"	m	struct:InterpAndScript	file:
pScript	test_vfs.c	/^  Tcl_Obj *pScript;               \/* Script to execute *\/$/;"	m	struct:Testvfs	file:
pSelect	sqliteInt.h	/^    Select *pSelect;                \/* The definition of this CTE *\/$/;"	m	struct:With::Cte
pSelect	sqliteInt.h	/^    Select *pSelect;     \/* EP_xIsSelect and op = IN, EXISTS, SELECT *\/$/;"	m	union:Expr::__anon13
pSelect	sqliteInt.h	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item
pSelect	sqliteInt.h	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table
pSelect	sqliteInt.h	/^  Select *pSelect;     \/* SELECT statement or RHS of INSERT INTO SELECT ... *\/$/;"	m	struct:TriggerStep
pSem	os_unix.c	/^  sem_t *pSem;                    \/* Named POSIX semaphore *\/$/;"	m	struct:unixInodeInfo	file:
pSeqTab	sqliteInt.h	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema
pShm	os_unix.c	/^  unixShm *pShm;                      \/* Shared memory segment information *\/$/;"	m	struct:unixFile	file:
pShm	os_win.c	/^  winShm *pShm;           \/* Instance of shared memory on this file *\/$/;"	m	struct:winFile	file:
pShm	test_vfs.c	/^  TestvfsBuffer *pShm;            \/* Shared memory buffer *\/$/;"	m	struct:TestvfsFd	file:
pShmId	test_vfs.c	/^  Tcl_Obj *pShmId;                \/* Shared memory id for Tcl callbacks *\/$/;"	m	struct:TestvfsFd	file:
pShmNode	os_unix.c	/^  unixShmNode *pShmNode;          \/* Shared memory associated with this inode *\/$/;"	m	struct:unixInodeInfo	file:
pShmNode	os_unix.c	/^  unixShmNode *pShmNode;     \/* The underlying unixShmNode object *\/$/;"	m	struct:unixShm	file:
pShmNode	os_win.c	/^  winShmNode *pShmNode;      \/* The underlying winShmNode object *\/$/;"	m	struct:winShm	file:
pSnapshot	wal.c	/^  WalIndexHdr *pSnapshot;    \/* Start transaction here if not NULL *\/$/;"	m	struct:Wal	file:
pSorter	vdbeInt.h	/^    VdbeSorter *pSorter;        \/* CURTYPE_SORTER. Sorter object *\/$/;"	m	union:VdbeCursor::__anon1
pSorter	vdbesort.c	/^  VdbeSorter *pSorter;            \/* Sorter that owns this sub-task *\/$/;"	m	struct:SortSubtask	file:
pSpace	vdbeaux.c	/^  u8 *pSpace;          \/* Available memory *\/$/;"	m	struct:ReusableSpace	file:
pSql	tclsqlite.c	/^  Tcl_Obj *pSql;                  \/* Object holding string zSql *\/$/;"	m	struct:DbEvalContext	file:
pSqllogArg	sqliteInt.h	/^  void *pSqllogArg;$/;"	m	struct:Sqlite3Config
pSrc	backup.c	/^  Btree *pSrc;             \/* Source b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pSrc	expr.c	/^  SrcList *pSrc;   \/* One particular FROM clause in a nested query *\/$/;"	m	struct:SrcCount	file:
pSrc	sqliteInt.h	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select
pSrcCount	sqliteInt.h	/^    struct SrcCount *pSrcCount;                \/* Counting column references *\/$/;"	m	union:Walker::__anon19	typeref:struct:Walker::__anon19::SrcCount
pSrcDb	backup.c	/^  sqlite3* pSrcDb;         \/* Source database handle *\/$/;"	m	struct:sqlite3_backup	file:
pSrcList	sqliteInt.h	/^    SrcList *pSrcList;                         \/* FROM clause *\/$/;"	m	union:Walker::__anon19
pSrcList	sqliteInt.h	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext
pStart	pcache1.c	/^  void *pStart, *pEnd;           \/* Bounds of global page cache memory *\/$/;"	m	struct:PCacheGlobal	file:
pStart	sqliteInt.h	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside
pStep	test1.c	/^  Tcl_Obj *pStep;                 \/* Script for agg. step invocation *\/$/;"	m	struct:CreateFunctionV2	file:
pStmt	dbstat.c	/^  sqlite3_stmt *pStmt;            \/* Iterates through set of root pages *\/$/;"	m	struct:StatCursor	file:
pStmt	shell.c	/^  sqlite3_stmt *pStmt;   \/* Current statement if any. *\/$/;"	m	struct:ShellState	file:
pStmt	tclsqlite.c	/^  sqlite3_stmt *pStmt;     \/* The prepared statement *\/$/;"	m	struct:SqlPreparedStmt	file:
pStmt	test4.c	/^  sqlite3_stmt *pStmt;     \/* Pending operation *\/$/;"	m	struct:Thread	file:
pStmt	test7.c	/^  sqlite3_stmt *pStmt;     \/* Pending operation *\/$/;"	m	struct:Thread	file:
pStmt	test8.c	/^  sqlite3_stmt *pStmt;$/;"	m	struct:echo_cursor	file:
pStmt	test_bestindex.c	/^  sqlite3_stmt *pStmt;            \/* Read data from here *\/$/;"	m	struct:tcl_cursor	file:
pStmt	test_fs.c	/^  sqlite3_stmt *pStmt;            \/* Statement to list paths *\/$/;"	m	struct:FstreeCsr	file:
pStmt	test_fs.c	/^  sqlite3_stmt *pStmt;$/;"	m	struct:fs_cursor	file:
pStmt	test_server.c	/^  sqlite3_stmt *pStmt;         \/* A specific statement *\/$/;"	m	struct:SqlMessage	file:
pStmt	vdbeblob.c	/^  sqlite3_stmt *pStmt;    \/* Statement holding cursor open *\/$/;"	m	struct:Incrblob	file:
pStress	pcache.c	/^  void *pStress;                      \/* Argument to xStress *\/$/;"	m	struct:PCache	file:
pSynced	pcache.c	/^  PgHdr *pSynced;                     \/* Last synced page in dirty page list *\/$/;"	m	struct:PCache	file:
pTab	sqliteInt.h	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col
pTab	sqliteInt.h	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item
pTab	sqliteInt.h	/^  Table *pTab;           \/* Table for TK_COLUMN expressions. *\/$/;"	m	struct:Expr
pTab	sqliteInt.h	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo
pTab	vdbe.h	/^    Table *pTab;           \/* Used when p4type is P4_TABLE *\/$/;"	m	union:VdbeOp::p4union
pTab	vdbeblob.c	/^  Table *pTab;            \/* Table object *\/$/;"	m	struct:Incrblob	file:
pTab	vtab.c	/^  Table *pTab;        \/* The Table object to which the virtual table belongs *\/$/;"	m	struct:VtabCtx	file:
pTabList	whereInt.h	/^  SrcList *pTabList;        \/* List of tables in the join *\/$/;"	m	struct:WhereInfo
pTabSchema	sqliteInt.h	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger
pTable	sqliteInt.h	/^  Table *pTable;           \/* The SQL table being indexed *\/$/;"	m	struct:Index
pTableList	test_schema.c	/^  sqlite3_stmt *pTableList;$/;"	m	struct:schema_cursor	file:
pTask	vdbesort.c	/^  SortSubtask *pTask;             \/* Task that owns this merger *\/$/;"	m	struct:IncrMerger	file:
pTask	vdbesort.c	/^  SortSubtask *pTask;        \/* Used by this thread only *\/$/;"	m	struct:MergeEngine	file:
pTestCollateInterp	test1.c	/^static Tcl_Interp* pTestCollateInterp;$/;"	v	file:
pThread	vdbesort.c	/^  SQLiteThread *pThread;          \/* Background thread, if any *\/$/;"	m	struct:SortSubtask	file:
pTmpSpace	btreeInt.h	/^  u8 *pTmpSpace;        \/* Temp space sufficient to hold a single cell *\/$/;"	m	struct:BtShared
pTmpSpace	pager.c	/^  char *pTmpSpace;            \/* Pager.pageSize bytes of space for tmp use *\/$/;"	m	struct:Pager	file:
pToplevel	sqliteInt.h	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse
pTraceArg	sqliteInt.h	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3
pTraceVfs	test_vfstrace.c	/^  sqlite3_vfs *pTraceVfs;             \/* Pointer back to the trace VFS *\/$/;"	m	struct:vfstrace_info	file:
pTrig	sqliteInt.h	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep
pTrigger	delete.c	584;"	d	file:
pTrigger	insert.c	1074;"	d	file:
pTrigger	sqliteInt.h	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg
pTrigger	sqliteInt.h	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table
pTrigger	update.c	703;"	d	file:
pTriggerPrg	sqliteInt.h	/^  TriggerPrg *pTriggerPrg;  \/* Linked list of coded triggers *\/$/;"	m	struct:Parse
pTriggerTab	sqliteInt.h	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse
pUnlockArg	sqliteInt.h	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3
pUnlockConnection	sqliteInt.h	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3
pUnlockNotify	tclsqlite.c	/^  Tcl_Obj *pUnlockNotify;    \/* Unlock notify script (if any) *\/$/;"	m	struct:SqliteDb	file:
pUnpacked	vdbeInt.h	/^  UnpackedRecord *pUnpacked;      \/* Unpacked version of aRecord[] *\/$/;"	m	struct:PreUpdate
pUnpacked	vdbesort.c	/^  UnpackedRecord *pUnpacked;      \/* Space to unpack a record *\/$/;"	m	struct:SortSubtask	file:
pUnpacked	vdbesort.c	/^  UnpackedRecord *pUnpacked;      \/* Used by VdbeSorterCompare() *\/$/;"	m	struct:VdbeSorter	file:
pUnused	os_unix.c	/^  UnixUnusedFd *pUnused;              \/* Pre-allocated UnixUnusedFd *\/$/;"	m	struct:unixFile	file:
pUnused	os_unix.c	/^  UnixUnusedFd *pUnused;          \/* Unused file descriptors to close *\/$/;"	m	struct:unixInodeInfo	file:
pUpdateArg	sqliteInt.h	/^  void *pUpdateArg;$/;"	m	struct:sqlite3
pUpdateHook	tclsqlite.c	/^  Tcl_Obj *pUpdateHook;      \/* Update hook script (if any) *\/$/;"	m	struct:SqliteDb	file:
pUser	sqliteInt.h	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq
pUserData	sqliteInt.h	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef
pUserData	sqliteInt.h	/^  void *pUserData;$/;"	m	struct:FuncDestructor
pUsing	sqliteInt.h	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item
pVCur	vdbeInt.h	/^    sqlite3_vtab_cursor *pVCur; \/* CURTYPE_VTAB.   Vtab cursor *\/$/;"	m	union:VdbeCursor::__anon1
pVTable	sqliteInt.h	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table
pVTable	vtab.c	/^  VTable *pVTable;    \/* The virtual table being constructed *\/$/;"	m	struct:VtabCtx	file:
pVdbe	sqliteInt.h	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse
pVdbe	sqliteInt.h	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	typeref:struct:sqlite3::Vdbe
pVdbe	vdbeInt.h	/^  Vdbe *pVdbe;            \/* The VM that owns this context *\/$/;"	m	struct:sqlite3_context
pVdbe	vdbeInt.h	/^  Vdbe *pVdbe;       \/* Attach the explanation to this Vdbe *\/$/;"	m	struct:Explain
pVdbeBranchArg	sqliteInt.h	/^  void *pVdbeBranchArg;                                     \/* 1st argument *\/$/;"	m	struct:Sqlite3Config
pVfs	memjournal.c	/^  sqlite3_vfs *pVfs;              \/* The "real" underlying VFS *\/$/;"	m	struct:MemJournal	file:
pVfs	os_unix.c	/^  sqlite3_vfs *pVfs;                  \/* The VFS that created this unixFile *\/$/;"	m	struct:unixFile	file:
pVfs	os_win.c	/^  sqlite3_vfs *pVfs;      \/* The VFS used to open this file *\/$/;"	m	struct:winFile	file:
pVfs	pager.c	/^  sqlite3_vfs *pVfs;          \/* OS functions to use for IO *\/$/;"	m	struct:Pager	file:
pVfs	sqliteInt.h	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3
pVfs	test_devsym.c	/^  sqlite3_vfs *pVfs;$/;"	m	struct:DevsymGlobal	file:
pVfs	test_journal.c	/^  sqlite3_vfs *pVfs;             \/* Parent VFS *\/$/;"	m	struct:JtGlobal	file:
pVfs	test_osinst.c	/^  sqlite3_vfs *pVfs;              \/* Parent VFS *\/$/;"	m	struct:VfslogVfs	file:
pVfs	test_vfs.c	/^  sqlite3_vfs *pVfs;              \/* The VFS *\/$/;"	m	struct:TestvfsFd	file:
pVfs	test_vfs.c	/^  sqlite3_vfs *pVfs;              \/* The testvfs registered with SQLite *\/$/;"	m	struct:Testvfs	file:
pVfs	wal.c	/^  sqlite3_vfs *pVfs;         \/* The VFS used to create pDbFd *\/$/;"	m	struct:Wal	file:
pVfslog	test_osinst.c	/^  sqlite3_vfs *pVfslog;           \/* Associated VsflogVfs object *\/$/;"	m	struct:VfslogFile	file:
pVtab	sqliteInt.h	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable
pVtab	vdbe.h	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::p4union
pVtabCtx	sqliteInt.h	/^  VtabCtx *pVtabCtx;            \/* Context for active vtab connect\/create *\/$/;"	m	struct:sqlite3
pWC	whereInt.h	/^  WhereClause *pWC;          \/* WhereClause currently being scanned *\/$/;"	m	struct:WhereScan
pWC	whereInt.h	/^  WhereClause *pWC;         \/* WHERE clause terms *\/$/;"	m	struct:WhereLoopBuilder
pWC	whereInt.h	/^  WhereClause *pWC;       \/* The clause this term is part of *\/$/;"	m	struct:WhereTerm
pWInfo	whereInt.h	/^  WhereInfo *pWInfo;        \/* Information about this WHERE *\/$/;"	m	struct:WhereLoopBuilder
pWInfo	whereInt.h	/^  WhereInfo *pWInfo;       \/* WHERE clause processing context *\/$/;"	m	struct:WhereClause
pWLoop	whereInt.h	/^  struct WhereLoop *pWLoop;  \/* The selected WhereLoop object *\/$/;"	m	struct:WhereLevel	typeref:struct:WhereLevel::WhereLoop
pWal	pager.c	/^  Wal *pWal;                  \/* Write-ahead log used by "journal_mode=wal" *\/$/;"	m	struct:Pager	file:
pWal	wal.c	/^  Wal *pWal;                   \/* The complete WAL information *\/$/;"	m	struct:WalWriter	file:
pWalArg	sqliteInt.h	/^  void *pWalArg;$/;"	m	struct:sqlite3
pWalFd	wal.c	/^  sqlite3_file *pWalFd;      \/* File handle for WAL file *\/$/;"	m	struct:Wal	file:
pWalHook	tclsqlite.c	/^  Tcl_Obj *pWalHook;         \/* WAL hook script (if any) *\/$/;"	m	struct:SqliteDb	file:
pWhen	sqliteInt.h	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger
pWhere	sqliteInt.h	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select
pWhere	sqliteInt.h	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep
pWith	sqliteInt.h	/^  With *pWith;              \/* Current WITH clause, or NULL *\/$/;"	m	struct:Parse
pWith	sqliteInt.h	/^  With *pWith;           \/* WITH clause attached to this select. Or NULL. *\/$/;"	m	struct:Select
pWithToFree	sqliteInt.h	/^  With *pWithToFree;        \/* Free this WITH object at the end of the parse *\/$/;"	m	struct:Parse
pWritable	test_journal.c	/^  Bitvec *pWritable;       \/* Bitvec of pages that may be written to the file *\/$/;"	m	struct:jt_file	file:
pWriteList	test6.c	/^  WriteBuffer *pWriteList;     \/* Head of write-list *\/$/;"	m	struct:CrashGlobal	file:
pWriteListEnd	test6.c	/^  WriteBuffer *pWriteListEnd;  \/* End of write-list *\/$/;"	m	struct:CrashGlobal	file:
pWriter	btreeInt.h	/^  Btree *pWriter;       \/* Btree with currently open write transaction *\/$/;"	m	struct:BtShared
pZombieTab	sqliteInt.h	/^  Table *pZombieTab;        \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse
padToSectorBoundary	wal.c	/^  u8 padToSectorBoundary;    \/* Pad transactions out to the next sector *\/$/;"	m	struct:Wal	file:
padding1	btreeInt.h	/^  void *padding1;           \/* Make object size a multiple of 16 *\/$/;"	m	struct:BtCursor
page	pcache1.c	/^  sqlite3_pcache_page page;      \/* Base class. Must be first. pBuf & pExtra *\/$/;"	m	struct:PgHdr1	file:
page	test_pcache.c	/^    sqlite3_pcache_page page;  \/* Base class *\/$/;"	m	struct:testpcache::testpcachePage	file:
pageFindSlot	btree.c	/^static u8 *pageFindSlot(MemPage *pPg, int nByte, int *pRc){$/;"	f	file:
pageFreeArray	btree.c	/^static int pageFreeArray($/;"	f	file:
pageHash	pcache.h	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr
pageInJournal	pager.c	/^static int pageInJournal(Pager *pPager, PgHdr *pPg){$/;"	f	file:
pageInsertArray	btree.c	/^static int pageInsertArray($/;"	f	file:
pageReinit	btree.c	/^static void pageReinit(DbPage *pData){$/;"	f	file:
pageSize	btreeInt.h	/^  u32 pageSize;         \/* Total number of bytes on a page *\/$/;"	m	struct:BtShared
pageSize	pager.c	/^  int pageSize;               \/* Number of bytes in a page *\/$/;"	m	struct:Pager	file:
page_get	test2.c	/^static int SQLITE_TCLAPI page_get($/;"	f	file:
page_lookup	test2.c	/^static int SQLITE_TCLAPI page_lookup($/;"	f	file:
page_number	test2.c	/^static int SQLITE_TCLAPI page_number($/;"	f	file:
page_read	test2.c	/^static int SQLITE_TCLAPI page_read($/;"	f	file:
page_unref	test2.c	/^static int SQLITE_TCLAPI page_unref($/;"	f	file:
page_write	test2.c	/^static int SQLITE_TCLAPI page_write($/;"	f	file:
pagerAcquireMapPage	pager.c	/^static int pagerAcquireMapPage($/;"	f	file:
pagerAddPageToRollbackJournal	pager.c	/^static SQLITE_NOINLINE int pagerAddPageToRollbackJournal(PgHdr *pPg){$/;"	f	file:
pagerBeginReadTransaction	pager.c	/^static int pagerBeginReadTransaction(Pager *pPager){$/;"	f	file:
pagerBeginReadTransaction	pager.c	828;"	d	file:
pagerExclusiveLock	pager.c	/^static int pagerExclusiveLock(Pager *pPager){$/;"	f	file:
pagerFixMaplimit	pager.c	/^static void pagerFixMaplimit(Pager *pPager){$/;"	f	file:
pagerFlushOnCommit	pager.c	/^static int pagerFlushOnCommit(Pager *pPager, int bCommit){$/;"	f	file:
pagerFreeMapHdrs	pager.c	/^static void pagerFreeMapHdrs(Pager *pPager){$/;"	f	file:
pagerLockDb	pager.c	/^static int pagerLockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerOpenSavepoint	pager.c	/^static SQLITE_NOINLINE int pagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f	file:
pagerOpenWal	pager.c	/^static int pagerOpenWal(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	pager.c	/^static int pagerOpenWalIfPresent(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	pager.c	827;"	d	file:
pagerOpentemp	pager.c	/^static int pagerOpentemp($/;"	f	file:
pagerPagecount	pager.c	/^static int pagerPagecount(Pager *pPager, Pgno *pnPage){$/;"	f	file:
pagerPlaybackSavepoint	pager.c	/^static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){$/;"	f	file:
pagerReleaseMapPage	pager.c	/^static void pagerReleaseMapPage(PgHdr *pPg){$/;"	f	file:
pagerReportSize	pager.c	/^static void pagerReportSize(Pager *pPager){$/;"	f	file:
pagerReportSize	pager.c	2156;"	d	file:
pagerRollbackWal	pager.c	/^static int pagerRollbackWal(Pager *pPager){$/;"	f	file:
pagerRollbackWal	pager.c	825;"	d	file:
pagerStress	pager.c	/^static int pagerStress(void *p, PgHdr *pPg){$/;"	f	file:
pagerSyncHotJournal	pager.c	/^static int pagerSyncHotJournal(Pager *pPager){$/;"	f	file:
pagerUndoCallback	pager.c	/^static int pagerUndoCallback(void *pCtx, Pgno iPg){$/;"	f	file:
pagerUnlockAndRollback	pager.c	/^static void pagerUnlockAndRollback(Pager *pPager){$/;"	f	file:
pagerUnlockDb	pager.c	/^static int pagerUnlockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerUnlockIfUnused	pager.c	/^static void pagerUnlockIfUnused(Pager *pPager){$/;"	f	file:
pagerUseWal	pager.c	/^static int pagerUseWal(Pager *pPager){$/;"	f	file:
pagerUseWal	pager.c	824;"	d	file:
pagerWalFrames	pager.c	/^static int pagerWalFrames($/;"	f	file:
pagerWalFrames	pager.c	826;"	d	file:
pagerWriteLargeSector	pager.c	/^static SQLITE_NOINLINE int pagerWriteLargeSector(PgHdr *pPg){$/;"	f	file:
pager_cksum	pager.c	/^static u32 pager_cksum(Pager *pPager, const u8 *aData){$/;"	f	file:
pager_close	test2.c	/^static int SQLITE_TCLAPI pager_close($/;"	f	file:
pager_commit	test2.c	/^static int SQLITE_TCLAPI pager_commit($/;"	f	file:
pager_datahash	pager.c	/^static u32 pager_datahash(int nByte, unsigned char *pData){$/;"	f	file:
pager_datahash	pager.c	1215;"	d	file:
pager_delmaster	pager.c	/^static int pager_delmaster(Pager *pPager, const char *zMaster){$/;"	f	file:
pager_end_transaction	pager.c	/^static int pager_end_transaction(Pager *pPager, int hasMaster, int bCommit){$/;"	f	file:
pager_error	pager.c	/^static int pager_error(Pager *pPager, int rc){$/;"	f	file:
pager_incr_changecounter	pager.c	/^static int pager_incr_changecounter(Pager *pPager, int isDirectMode){$/;"	f	file:
pager_open	test2.c	/^static int SQLITE_TCLAPI pager_open($/;"	f	file:
pager_open_journal	pager.c	/^static int pager_open_journal(Pager *pPager){$/;"	f	file:
pager_pagecount	test2.c	/^static int SQLITE_TCLAPI pager_pagecount($/;"	f	file:
pager_pagehash	pager.c	/^static u32 pager_pagehash(PgHdr *pPage){$/;"	f	file:
pager_pagehash	pager.c	1216;"	d	file:
pager_playback	pager.c	/^static int pager_playback(Pager *pPager, int isHot){$/;"	f	file:
pager_playback_one_page	pager.c	/^static int pager_playback_one_page($/;"	f	file:
pager_reset	pager.c	/^static void pager_reset(Pager *pPager){$/;"	f	file:
pager_rollback	test2.c	/^static int SQLITE_TCLAPI pager_rollback($/;"	f	file:
pager_set_pagehash	pager.c	/^static void pager_set_pagehash(PgHdr *pPage){$/;"	f	file:
pager_set_pagehash	pager.c	1217;"	d	file:
pager_stats	test2.c	/^static int SQLITE_TCLAPI pager_stats($/;"	f	file:
pager_stmt_begin	test2.c	/^static int SQLITE_TCLAPI pager_stmt_begin($/;"	f	file:
pager_stmt_commit	test2.c	/^static int SQLITE_TCLAPI pager_stmt_commit($/;"	f	file:
pager_stmt_rollback	test2.c	/^static int SQLITE_TCLAPI pager_stmt_rollback($/;"	f	file:
pager_test_reiniter	test2.c	/^static void pager_test_reiniter(DbPage *pNotUsed){$/;"	f	file:
pager_truncate	pager.c	/^static int pager_truncate(Pager *pPager, Pgno nPage){$/;"	f	file:
pager_truncate	test2.c	/^static int SQLITE_TCLAPI pager_truncate($/;"	f	file:
pager_unlock	pager.c	/^static void pager_unlock(Pager *pPager){$/;"	f	file:
pager_wait_on_lock	pager.c	/^static int pager_wait_on_lock(Pager *pPager, int locktype){$/;"	f	file:
pager_write	pager.c	/^static int pager_write(PgHdr *pPg){$/;"	f	file:
pager_write_changecounter	pager.c	/^static void pager_write_changecounter(PgHdr *pPg){$/;"	f	file:
pager_write_pagelist	pager.c	/^static int pager_write_pagelist(Pager *pPager, PgHdr *pList){$/;"	f	file:
parent	test_thread.c	/^  Tcl_ThreadId parent;     \/* Thread id of parent thread *\/$/;"	m	struct:SqlThread	file:
parseDateOrTime	date.c	/^static int parseDateOrTime($/;"	f	file:
parseHhMmSs	date.c	/^static int parseHhMmSs(const char *zDate, DateTime *p){$/;"	f	file:
parseModifier	date.c	/^static int parseModifier(sqlite3_context *pCtx, const char *zMod, DateTime *p){$/;"	f	file:
parseTimezone	date.c	/^static int parseTimezone(const char *zDate, DateTime *p){$/;"	f	file:
parseYyyyMmDd	date.c	/^static int parseYyyyMmDd(const char *zDate, DateTime *p){$/;"	f	file:
parse_client_id	test7.c	/^static int parse_client_id(Tcl_Interp *interp, const char *zArg){$/;"	f	file:
parse_thread_id	test4.c	/^static int parse_thread_id(Tcl_Interp *interp, const char *zArg){$/;"	f	file:
patternCompare	func.c	/^static int patternCompare($/;"	f	file:
payloadSize	vdbeInt.h	/^  u32 payloadSize;      \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor
pc	vdbeInt.h	/^  int pc;                 \/* Program Counter in parent (calling) frame *\/$/;"	m	struct:VdbeFrame
pc	vdbeInt.h	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe
pcache	test_init.c	/^  sqlite3_pcache_methods2 pcache;$/;"	m	struct:Wrapped	file:
pcache1	pcache1.c	224;"	d	file:
pcache1Alloc	pcache1.c	/^static void *pcache1Alloc(int nByte){$/;"	f	file:
pcache1AllocPage	pcache1.c	/^static PgHdr1 *pcache1AllocPage(PCache1 *pCache, int benignMalloc){$/;"	f	file:
pcache1Cachesize	pcache1.c	/^static void pcache1Cachesize(sqlite3_pcache *p, int nMax){$/;"	f	file:
pcache1Create	pcache1.c	/^static sqlite3_pcache *pcache1Create(int szPage, int szExtra, int bPurgeable){$/;"	f	file:
pcache1Destroy	pcache1.c	/^static void pcache1Destroy(sqlite3_pcache *p){$/;"	f	file:
pcache1EnforceMaxPage	pcache1.c	/^static void pcache1EnforceMaxPage(PCache1 *pCache){$/;"	f	file:
pcache1EnterMutex	pcache1.c	230;"	d	file:
pcache1EnterMutex	pcache1.c	234;"	d	file:
pcache1Fetch	pcache1.c	/^static sqlite3_pcache_page *pcache1Fetch($/;"	f	file:
pcache1FetchNoMutex	pcache1.c	/^static PgHdr1 *pcache1FetchNoMutex($/;"	f	file:
pcache1FetchStage2	pcache1.c	/^static SQLITE_NOINLINE PgHdr1 *pcache1FetchStage2($/;"	f	file:
pcache1FetchWithMutex	pcache1.c	/^static PgHdr1 *pcache1FetchWithMutex($/;"	f	file:
pcache1Free	pcache1.c	/^static void pcache1Free(void *p){$/;"	f	file:
pcache1FreePage	pcache1.c	/^static void pcache1FreePage(PgHdr1 *p){$/;"	f	file:
pcache1Init	pcache1.c	/^static int pcache1Init(void *NotUsed){$/;"	f	file:
pcache1InitBulk	pcache1.c	/^static int pcache1InitBulk(PCache1 *pCache){$/;"	f	file:
pcache1LeaveMutex	pcache1.c	231;"	d	file:
pcache1LeaveMutex	pcache1.c	235;"	d	file:
pcache1MemSize	pcache1.c	/^static int pcache1MemSize(void *p){$/;"	f	file:
pcache1Pagecount	pcache1.c	/^static int pcache1Pagecount(sqlite3_pcache *p){$/;"	f	file:
pcache1PinPage	pcache1.c	/^static PgHdr1 *pcache1PinPage(PgHdr1 *pPage){$/;"	f	file:
pcache1Rekey	pcache1.c	/^static void pcache1Rekey($/;"	f	file:
pcache1RemoveFromHash	pcache1.c	/^static void pcache1RemoveFromHash(PgHdr1 *pPage, int freeFlag){$/;"	f	file:
pcache1ResizeHash	pcache1.c	/^static void pcache1ResizeHash(PCache1 *p){$/;"	f	file:
pcache1Shrink	pcache1.c	/^static void pcache1Shrink(sqlite3_pcache *p){$/;"	f	file:
pcache1Shutdown	pcache1.c	/^static void pcache1Shutdown(void *NotUsed){$/;"	f	file:
pcache1Truncate	pcache1.c	/^static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){$/;"	f	file:
pcache1TruncateUnsafe	pcache1.c	/^static void pcache1TruncateUnsafe($/;"	f	file:
pcache1UnderMemoryPressure	pcache1.c	/^static int pcache1UnderMemoryPressure(PCache1 *pCache){$/;"	f	file:
pcache1Unpin	pcache1.c	/^static void pcache1Unpin($/;"	f	file:
pcache1_g	pcache1.c	/^} pcache1_g;$/;"	v	typeref:struct:PCacheGlobal	file:
pcache2	sqliteInt.h	/^  sqlite3_pcache_methods2 pcache2;  \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config
pcacheDump	pcache.c	/^  void pcacheDump(PCache *pCache){$/;"	f
pcacheDump	pcache.c	95;"	d	file:
pcacheFetchFinishWithInit	pcache.c	/^static SQLITE_NOINLINE PgHdr *pcacheFetchFinishWithInit($/;"	f	file:
pcacheManageDirtyList	pcache.c	/^static void pcacheManageDirtyList(PgHdr *pPage, u8 addRemove){$/;"	f	file:
pcacheMergeDirtyList	pcache.c	/^static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){$/;"	f	file:
pcacheSortDirtyList	pcache.c	/^static PgHdr *pcacheSortDirtyList(PgHdr *pIn){$/;"	f	file:
pcacheTrace	pcache.c	68;"	d	file:
pcacheTrace	pcache.c	94;"	d	file:
pcacheUnpin	pcache.c	/^static void pcacheUnpin(PgHdr *p){$/;"	f	file:
pcache_fail	test_init.c	/^  int pcache_fail;             \/* True to fail pcache subsystem inialization *\/$/;"	m	struct:Wrapped	file:
pcache_init	test_init.c	/^  int pcache_init;             \/* True if pcache subsystem is initalized *\/$/;"	m	struct:Wrapped	file:
pclose	shell.c	110;"	d	file:
pclose	shell.c	111;"	d	file:
pgno	btreeInt.h	/^  Pgno pgno;           \/* Page number for this page *\/$/;"	m	struct:MemPage
pgno	pcache.h	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr
pgnoRoot	btreeInt.h	/^  Pgno pgnoRoot;            \/* The root page of this tree *\/$/;"	m	struct:BtCursor
pgnoRoot	vdbeInt.h	/^  Pgno pgnoRoot;        \/* Root page of the open btree cursor *\/$/;"	m	struct:VdbeCursor
pgsz	test_syscall.c	/^  int pgsz;$/;"	m	struct:TestSyscallGlobal	file:
pgsz	test_vfs.c	/^  int pgsz;                       \/* Page size *\/$/;"	m	struct:TestvfsBuffer	file:
pgsz	vdbesort.c	/^  int pgsz;                       \/* Main database page size *\/$/;"	m	struct:VdbeSorter	file:
pnBytesFreed	sqliteInt.h	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3
pointerToText	test_malloc.c	/^static void pointerToText(void *p, char *z){$/;"	f	file:
popen	shell.c	108;"	d	file:
popen	shell.c	109;"	d	file:
populateCellCache	btree.c	/^static void populateCellCache(CellArray *p, int idx, int N){$/;"	f	file:
posixOpen	os_unix.c	/^static int posixOpen(const char *zFile, int flags, int mode){$/;"	f	file:
posixUnlock	os_unix.c	/^static int posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){$/;"	f	file:
postToParent	test_thread.c	/^static void postToParent(SqlThread *p, Tcl_Obj *pScript){$/;"	f	file:
ppPrev	test_quota.c	/^  quotaFile *pNext, **ppPrev;     \/* Linked list of files in the same group *\/$/;"	m	struct:quotaFile	file:
ppPrev	test_quota.c	/^  quotaGroup *pNext, **ppPrev;   \/* Doubly linked list of all quota objects *\/$/;"	m	struct:quotaGroup	file:
ppRec	vdbemem.c	/^  UnpackedRecord **ppRec;$/;"	m	struct:ValueNewStat4Ctx	file:
ppThis	test_onefile.c	/^  fs_real_file **ppThis;$/;"	m	struct:fs_real_file	file:
prefix	printf.c	/^  etByte prefix;           \/* Offset into aPrefix[] of the prefix string *\/$/;"	m	struct:et_info	file:
prepStack	test1.c	/^static void prepStack(void){$/;"	f	file:
prepare	sqlite3ext.h	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines
prepare16	sqlite3ext.h	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines
prepare16_v2	sqlite3ext.h	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines
prepare_v2	sqlite3ext.h	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines
prereq	whereInt.h	/^  Bitmask prereq;       \/* Bitmask of other loops that must run first *\/$/;"	m	struct:WhereLoop
prereq	whereInt.h	/^  Bitmask prereq;     \/* Prerequisites *\/$/;"	m	struct:WhereOrCost
prereqAll	whereInt.h	/^  Bitmask prereqAll;      \/* Bitmask of tables referenced by pExpr *\/$/;"	m	struct:WhereTerm
prereqRight	whereInt.h	/^  Bitmask prereqRight;    \/* Bitmask of tables used by pExpr->pRight *\/$/;"	m	struct:WhereTerm
prev	hash.h	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem
prev	mem3.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::__anon22::__anon24	file:
prev	mem5.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	file:
prevSize	mem3.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon22::__anon23	file:
printBold	shell.c	/^static void printBold(const char *zText){$/;"	f	file:
printExplainQueryPlan	test1.c	/^int printExplainQueryPlan(sqlite3_stmt *pStmt){$/;"	f
print_pager_state	pager.c	/^static char *print_pager_state(Pager *p){$/;"	f	file:
printfFlags	sqliteInt.h	/^  u8   printfFlags;    \/* SQLITE_PRINTF flags below *\/$/;"	m	struct:StrAccum
printfFunc	func.c	/^static void printfFunc($/;"	f	file:
prngSeed	test_pcache.c	/^  unsigned prngSeed;        \/* Seed for the PRNG *\/$/;"	m	struct:testpcacheGlobalType	file:
processDevSymArgs	test6.c	/^static int processDevSymArgs($/;"	f	file:
process_input	shell.c	/^static int process_input(ShellState *p, FILE *in){$/;"	f	file:
process_sqliterc	shell.c	/^static void process_sqliterc($/;"	f	file:
profile	sqlite3ext.h	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines
progress_handler	sqlite3ext.h	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines
proxyBreakConchLock	os_unix.c	/^static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){$/;"	f	file:
proxyCheckReservedLock	os_unix.c	/^static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
proxyClose	os_unix.c	/^static int proxyClose(sqlite3_file *id) {$/;"	f	file:
proxyConchLock	os_unix.c	/^static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){$/;"	f	file:
proxyCreateConchPathname	os_unix.c	/^static int proxyCreateConchPathname(char *dbPath, char **pConchPath){$/;"	f	file:
proxyCreateLockPath	os_unix.c	/^static int proxyCreateLockPath(const char *lockPath){$/;"	f	file:
proxyCreateUnixFile	os_unix.c	/^static int proxyCreateUnixFile($/;"	f	file:
proxyFileControl	os_unix.c	/^static int proxyFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
proxyGetDbPathForUnixFile	os_unix.c	/^static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){$/;"	f	file:
proxyGetHostID	os_unix.c	/^static int proxyGetHostID(unsigned char *pHostID, int *pError){$/;"	f	file:
proxyGetLockPath	os_unix.c	/^static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){$/;"	f	file:
proxyLock	os_unix.c	/^static int proxyLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
proxyLockingContext	os_unix.c	/^struct proxyLockingContext {$/;"	s	file:
proxyLockingContext	os_unix.c	/^typedef struct proxyLockingContext proxyLockingContext;$/;"	t	typeref:struct:proxyLockingContext	file:
proxyReleaseConch	os_unix.c	/^static int proxyReleaseConch(unixFile *pFile){$/;"	f	file:
proxyTakeConch	os_unix.c	/^static int proxyTakeConch(unixFile *pFile){$/;"	f	file:
proxyTransformUnixFile	os_unix.c	/^static int proxyTransformUnixFile(unixFile *pFile, const char *path) {$/;"	f	file:
proxyUnlock	os_unix.c	/^static int proxyUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
pseudoTableReg	vdbeInt.h	/^    int pseudoTableReg;         \/* CURTYPE_PSEUDO. Reg holding content. *\/$/;"	m	union:VdbeCursor::__anon1
pthreadMutexAlloc	mutex_unix.c	/^static sqlite3_mutex *pthreadMutexAlloc(int iType){$/;"	f	file:
pthreadMutexEnd	mutex_unix.c	/^static int pthreadMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexEnter	mutex_unix.c	/^static void pthreadMutexEnter(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexFree	mutex_unix.c	/^static void pthreadMutexFree(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexHeld	mutex_unix.c	/^static int pthreadMutexHeld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexInit	mutex_unix.c	/^static int pthreadMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexLeave	mutex_unix.c	/^static void pthreadMutexLeave(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexNotheld	mutex_unix.c	/^static int pthreadMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexTry	mutex_unix.c	/^static int pthreadMutexTry(sqlite3_mutex *p){$/;"	f	file:
ptrChngFunction	test1.c	/^static void ptrChngFunction($/;"	f	file:
ptrToText	test_blob.c	/^static char *ptrToText(void *p){$/;"	f	file:
ptrmapGet	btree.c	/^static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){$/;"	f	file:
ptrmapGet	btree.c	1011;"	d	file:
ptrmapPageno	btree.c	/^static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){$/;"	f	file:
ptrmapPut	btree.c	/^static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){$/;"	f	file:
ptrmapPut	btree.c	1010;"	d	file:
ptrmapPutOvflPtr	btree.c	/^static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){$/;"	f	file:
ptrmapPutOvflPtr	btree.c	1012;"	d	file:
pushDownWhereTerms	select.c	/^static int pushDownWhereTerms($/;"	f	file:
pushOntoSorter	select.c	/^static void pushOntoSorter($/;"	f	file:
put2byte	btreeInt.h	690;"	d
put32bits	pager.c	1072;"	d	file:
put32bits	test_osinst.c	/^static void put32bits(unsigned char *p, unsigned int v){$/;"	f	file:
put4byte	btreeInt.h	692;"	d
putVarint	sqliteInt.h	3874;"	d
putVarint32	sqliteInt.h	3870;"	d
putVarint64	util.c	/^static int SQLITE_NOINLINE putVarint64(unsigned char *p, u64 v){$/;"	f	file:
pzErrMsg	sqliteInt.h	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:__anon18
pzNeededCollation	test1.c	/^static char *pzNeededCollation = zNeededCollation;$/;"	v	file:
querySharedCacheTableLock	btree.c	/^static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){$/;"	f	file:
querySharedCacheTableLock	btree.c	107;"	d	file:
queueMutex	test_server.c	/^  pthread_mutex_t queueMutex;   \/* Hold this mutex to access the msg queue *\/$/;"	m	struct:ServerState	file:
quotaCheckReservedLock	test_quota.c	/^static int quotaCheckReservedLock(sqlite3_file *pConn, int *pResOut){$/;"	f	file:
quotaClose	test_quota.c	/^static int quotaClose(sqlite3_file *pConn){$/;"	f	file:
quotaConn	test_quota.c	/^struct quotaConn {$/;"	s	file:
quotaConn	test_quota.c	/^typedef struct quotaConn quotaConn;$/;"	t	typeref:struct:quotaConn	file:
quotaDelete	test_quota.c	/^static int quotaDelete($/;"	f	file:
quotaDeviceCharacteristics	test_quota.c	/^static int quotaDeviceCharacteristics(sqlite3_file *pConn){$/;"	f	file:
quotaEnter	test_quota.c	/^static void quotaEnter(void){ sqlite3_mutex_enter(gQuota.pMutex); }$/;"	f	file:
quotaFile	test_quota.c	/^struct quotaFile {$/;"	s	file:
quotaFile	test_quota.c	/^typedef struct quotaFile quotaFile;$/;"	t	typeref:struct:quotaFile	file:
quotaFileControl	test_quota.c	/^static int quotaFileControl(sqlite3_file *pConn, int op, void *pArg){$/;"	f	file:
quotaFileSize	test_quota.c	/^static int quotaFileSize(sqlite3_file *pConn, sqlite3_int64 *pSize){$/;"	f	file:
quotaFindFile	test_quota.c	/^static quotaFile *quotaFindFile($/;"	f	file:
quotaGroup	test_quota.c	/^struct quotaGroup {$/;"	s	file:
quotaGroup	test_quota.c	/^typedef struct quotaGroup quotaGroup;$/;"	t	typeref:struct:quotaGroup	file:
quotaGroupDeref	test_quota.c	/^static void quotaGroupDeref(quotaGroup *pGroup){$/;"	f	file:
quotaGroupFind	test_quota.c	/^static quotaGroup *quotaGroupFind(const char *zFilename){$/;"	f	file:
quotaGroupOpenFileCount	test_quota.c	/^static int quotaGroupOpenFileCount(quotaGroup *pGroup){$/;"	f	file:
quotaLeave	test_quota.c	/^static void quotaLeave(void){ sqlite3_mutex_leave(gQuota.pMutex); }$/;"	f	file:
quotaLock	test_quota.c	/^static int quotaLock(sqlite3_file *pConn, int lock){$/;"	f	file:
quotaOpen	test_quota.c	/^static int quotaOpen($/;"	f	file:
quotaRead	test_quota.c	/^static int quotaRead($/;"	f	file:
quotaRemoveAllFiles	test_quota.c	/^static void quotaRemoveAllFiles(quotaGroup *pGroup){$/;"	f	file:
quotaRemoveFile	test_quota.c	/^static void quotaRemoveFile(quotaFile *pFile){$/;"	f	file:
quotaSectorSize	test_quota.c	/^static int quotaSectorSize(sqlite3_file *pConn){$/;"	f	file:
quotaShmBarrier	test_quota.c	/^static void quotaShmBarrier(sqlite3_file *pConn){$/;"	f	file:
quotaShmLock	test_quota.c	/^static int quotaShmLock($/;"	f	file:
quotaShmMap	test_quota.c	/^static int quotaShmMap($/;"	f	file:
quotaShmUnmap	test_quota.c	/^static int quotaShmUnmap(sqlite3_file *pConn, int deleteFlag){$/;"	f	file:
quotaStrglob	test_quota.c	/^static int quotaStrglob(const char *zGlob, const char *z){$/;"	f	file:
quotaSubOpen	test_quota.c	/^static sqlite3_file *quotaSubOpen(sqlite3_file *pConn){$/;"	f	file:
quotaSync	test_quota.c	/^static int quotaSync(sqlite3_file *pConn, int flags){$/;"	f	file:
quotaTruncate	test_quota.c	/^static int quotaTruncate(sqlite3_file *pConn, sqlite3_int64 size){$/;"	f	file:
quotaUnlock	test_quota.c	/^static int quotaUnlock(sqlite3_file *pConn, int lock){$/;"	f	file:
quotaWrite	test_quota.c	/^static int quotaWrite($/;"	f	file:
quota_FILE	test_quota.c	/^struct quota_FILE {$/;"	s	file:
quota_FILE	test_quota.h	/^typedef struct quota_FILE quota_FILE;$/;"	t	typeref:struct:quota_FILE
quota_mbcs_free	test_quota.c	/^static void quota_mbcs_free(char *zOld){$/;"	f	file:
quota_utf8_to_mbcs	test_quota.c	/^static char *quota_utf8_to_mbcs(const char *zUtf8){$/;"	f	file:
quoteFunc	func.c	/^static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
r	vdbeInt.h	/^    double r;           \/* Real value used when MEM_Real is set in flags *\/$/;"	m	union:Mem::MemValue
r1	sqliteInt.h	/^  i8 r1;              \/* Value to return if (lhs > rhs) *\/$/;"	m	struct:UnpackedRecord
r2	sqliteInt.h	/^  i8 r2;              \/* Value to return if (rhs < lhs) *\/$/;"	m	struct:UnpackedRecord
rCost	whereInt.h	/^  LogEst rCost;         \/* Total cost of this path *\/$/;"	m	struct:WherePath
rRun	whereInt.h	/^  LogEst rRun;          \/* Cost of running each loop *\/$/;"	m	struct:WhereLoop
rRun	whereInt.h	/^  LogEst rRun;        \/* Cost of running this subquery *\/$/;"	m	struct:WhereOrCost
rSetup	whereInt.h	/^  LogEst rSetup;        \/* One-time setup cost (ex: create transient index) *\/$/;"	m	struct:WhereLoop
rSum	func.c	/^  double rSum;      \/* Floating point sum *\/$/;"	m	struct:SumCtx	file:
rUnsorted	whereInt.h	/^  LogEst rUnsorted;     \/* Total cost of this path ignoring sorting costs *\/$/;"	m	struct:WherePath
radius	test_rtree.c	/^  double radius;$/;"	m	struct:Circle	file:
randStr	test_func.c	/^static void randStr(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
randomBlob	func.c	/^static void randomBlob($/;"	f	file:
randomFill	mem2.c	/^static void randomFill(char *pBuf, int nByte){$/;"	f	file:
randomFunc	func.c	/^static void randomFunc($/;"	f	file:
randomness	sqlite3ext.h	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines
randomnessPid	os_unix.c	/^static pid_t randomnessPid = 0;$/;"	v	file:
raw_printf	shell.c	400;"	d	file:
rc	backup.c	/^  int rc;                  \/* Backup process error code *\/$/;"	m	struct:sqlite3_backup	file:
rc	sqliteInt.h	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse
rc	sqliteInt.h	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:__anon18
rc	table.c	/^  int rc;            \/* Return code from sqlite3_exec() *\/$/;"	m	struct:TabResult	file:
rc	tclsqlite.c	/^  int rc;                    \/* Return code of most recent sqlite3_exec() *\/$/;"	m	struct:SqliteDb	file:
rc	test4.c	/^  int rc;               \/* operation return code *\/$/;"	m	struct:Thread	file:
rc	test7.c	/^  int rc;                  \/* operation return code *\/$/;"	m	struct:Thread	file:
rc	vdbeInt.h	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe
rcApp	vdbeInt.h	/^  int rcApp;              \/* errcode set by sqlite3_result_error_code() *\/$/;"	m	struct:Vdbe
read32bits	pager.c	/^static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){$/;"	f	file:
readDbPage	pager.c	/^static int readDbPage(PgHdr *pPg, u32 iFrame){$/;"	f	file:
readJournalFile	test_journal.c	/^static int readJournalFile(jt_file *p, jt_file *pMain){$/;"	f	file:
readJournalHdr	pager.c	/^static int readJournalHdr($/;"	f	file:
readLock	wal.c	/^  i16 readLock;              \/* Which read lock is being held.  -1 for none *\/$/;"	m	struct:Wal	file:
readMasterJournal	pager.c	/^static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){$/;"	f	file:
readOnly	pager.c	/^  u8 readOnly;                \/* True for a read-only database *\/$/;"	m	struct:Pager	file:
readOnly	vdbeInt.h	/^  bft readOnly:1;         \/* True for statements that do not write *\/$/;"	m	struct:Vdbe
readOnly	wal.c	/^  u8 readOnly;               \/* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY *\/$/;"	m	struct:Wal	file:
read_fts3varint	test_hexio.c	/^static int SQLITE_TCLAPI read_fts3varint($/;"	f	file:
readdir	test_windirent.c	/^LPDIRENT readdir($/;"	f
readdir_r	test_windirent.c	/^INT readdir_r($/;"	f
readfileFunc	shell.c	/^static void readfileFunc($/;"	f	file:
readpoint	memjournal.c	/^  FilePoint readpoint;            \/* Pointer to the end of the last xRead() *\/$/;"	m	struct:MemJournal	file:
readsTable	insert.c	/^static int readsTable(Parse *p, int iDb, Table *pTab){$/;"	f	file:
real2hex	test_func.c	/^static void real2hex($/;"	f	file:
realloc	sqlite3ext.h	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines
realloc64	sqlite3ext.h	/^  void *(*realloc64)(void*,sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines
rebuildPage	btree.c	/^static int rebuildPage($/;"	f	file:
recordFunc	vdbemem.c	/^static void recordFunc($/;"	f	file:
regCtr	sqliteInt.h	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo
regResult	sqliteInt.h	/^    int regResult;    \/* Registers holding results of a co-routine *\/$/;"	m	struct:SrcList::SrcList_item
regReturn	select.c	/^  int regReturn;        \/* Register holding block-output return address *\/$/;"	m	struct:SortCtx	file:
regReturn	sqliteInt.h	/^    int regReturn;    \/* Register holding return address of addrFillSub *\/$/;"	m	struct:SrcList::SrcList_item
regRoot	sqliteInt.h	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse
regRowid	sqliteInt.h	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse
registerTestFunctions	test_func.c	/^static int registerTestFunctions($/;"	f	file:
registerTrace	vdbe.c	/^static void registerTrace(int iReg, Mem *p){$/;"	f	file:
register_circle_geom	test_rtree.c	/^static int SQLITE_TCLAPI register_circle_geom($/;"	f	file:
register_cube_geom	test_rtree.c	/^static int SQLITE_TCLAPI register_cube_geom($/;"	f	file:
register_demovfs	test_demovfs.c	/^static int SQLITE_TCLAPI register_demovfs($/;"	f	file:
register_echo_module	test8.c	/^static int SQLITE_TCLAPI register_echo_module($/;"	f	file:
register_fs_module	test_fs.c	/^static int SQLITE_TCLAPI register_fs_module($/;"	f	file:
register_schema_module	test_schema.c	/^static int SQLITE_TCLAPI register_schema_module($/;"	f	file:
register_tcl_module	test_bestindex.c	/^static int SQLITE_TCLAPI register_tcl_module($/;"	f	file:
register_tclvar_module	test_tclvar.c	/^static int SQLITE_TCLAPI register_tclvar_module($/;"	f	file:
rehash	hash.c	/^static int rehash(Hash *pH, unsigned int new_size){$/;"	f	file:
reindexDatabases	build.c	/^static void reindexDatabases(Parse *pParse, char const *zColl){$/;"	f	file:
reindexTable	build.c	/^static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){$/;"	f	file:
releaseAllSavepoints	pager.c	/^static void releaseAllSavepoints(Pager *pPager){$/;"	f	file:
releaseInodeInfo	os_unix.c	/^static void releaseInodeInfo(unixFile *pFile){$/;"	f	file:
releaseMemArray	vdbeaux.c	/^static void releaseMemArray(Mem *p, int N){$/;"	f	file:
releasePage	btree.c	/^static void releasePage(MemPage *pPage){$/;"	f	file:
releasePageNotNull	btree.c	/^static void releasePageNotNull(MemPage *pPage){$/;"	f	file:
release_memory	sqlite3ext.h	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines
reloadTableSchema	alter.c	/^static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){$/;"	f	file:
relocatePage	btree.c	/^static int relocatePage($/;"	f	file:
removeElementGivenHash	hash.c	/^static void removeElementGivenHash($/;"	f	file:
removeFromBlockedList	notify.c	/^static void removeFromBlockedList(sqlite3 *db){$/;"	f	file:
removeFromSharingList	btree.c	/^static int removeFromSharingList(BtShared *pBt){$/;"	f	file:
renameParentFunc	alter.c	/^static void renameParentFunc($/;"	f	file:
renameTableFunc	alter.c	/^static void renameTableFunc($/;"	f	file:
renameTriggerFunc	alter.c	/^static void renameTriggerFunc($/;"	f	file:
renderLogMsg	printf.c	/^static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){$/;"	f	file:
replaceFunc	func.c	/^static void replaceFunc($/;"	f	file:
reportError	main.c	/^static int reportError(int iErr, int lineno, const char *zType){$/;"	f	file:
reserved	os_unix.c	/^  int reserved;$/;"	m	struct:afpLockingContext	file:
reset	sqlite3ext.h	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines
resetAccumulator	select.c	/^static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
resetAutoExtObjCmd	test_autoext.c	/^static int SQLITE_TCLAPI resetAutoExtObjCmd($/;"	f	file:
reset_auto_extension	sqlite3ext.h	/^  void (*reset_auto_extension)(void);$/;"	m	struct:sqlite3_api_routines
reset_prng_state	test1.c	/^static int SQLITE_TCLAPI reset_prng_state($/;"	f	file:
resizeIndexObject	build.c	/^static int resizeIndexObject(sqlite3 *db, Index *pIdx, int N){$/;"	f	file:
resolveAlias	resolve.c	/^static void resolveAlias($/;"	f	file:
resolveAsName	resolve.c	/^static int resolveAsName($/;"	f	file:
resolveAttachExpr	attach.c	/^static int resolveAttachExpr(NameContext *pName, Expr *pExpr)$/;"	f	file:
resolveCompoundOrderBy	resolve.c	/^static int resolveCompoundOrderBy($/;"	f	file:
resolveExprStep	resolve.c	/^static int resolveExprStep(Walker *pWalker, Expr *pExpr){$/;"	f	file:
resolveOrderByTermToExprList	resolve.c	/^static int resolveOrderByTermToExprList($/;"	f	file:
resolveOrderGroupBy	resolve.c	/^static int resolveOrderGroupBy($/;"	f	file:
resolveOutOfRangeError	resolve.c	/^static void resolveOutOfRangeError($/;"	f	file:
resolveP2Values	vdbeaux.c	/^static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){$/;"	f	file:
resolveSelectStep	resolve.c	/^static int resolveSelectStep(Walker *pWalker, Select *p){$/;"	f	file:
resolve_backslashes	shell.c	/^static void resolve_backslashes(char *z){$/;"	f	file:
restoreCursorPosition	btree.c	819;"	d	file:
restore_debug_trace_modes	shell.c	/^static void restore_debug_trace_modes(void){$/;"	f	file:
restore_prng_state	test1.c	/^static int SQLITE_TCLAPI restore_prng_state($/;"	f	file:
result_blob	sqlite3ext.h	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_blob64	sqlite3ext.h	/^  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines
result_double	sqlite3ext.h	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines
result_error	sqlite3ext.h	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines
result_error16	sqlite3ext.h	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines
result_error_code	sqlite3ext.h	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines
result_error_nomem	sqlite3ext.h	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
result_error_toobig	sqlite3ext.h	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
result_int	sqlite3ext.h	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines
result_int64	sqlite3ext.h	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines
result_null	sqlite3ext.h	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
result_subtype	sqlite3ext.h	/^  void (*result_subtype)(sqlite3_context*,unsigned int);$/;"	m	struct:sqlite3_api_routines
result_text	sqlite3ext.h	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_text16	sqlite3ext.h	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_text16be	sqlite3ext.h	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_text16le	sqlite3ext.h	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_text64	sqlite3ext.h	/^  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines
result_value	sqlite3ext.h	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
result_zeroblob	sqlite3ext.h	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines
result_zeroblob64	sqlite3ext.h	/^  int (*result_zeroblob64)(sqlite3_context*,sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines
retRangeStart	os_unix.c	/^  unsigned long long retRangeStart; \/* nbr of 1st byte locked if successful *\/$/;"	m	struct:ByteRangeLockPB2	file:
returnSingleInt	pragma.c	/^static void returnSingleInt(Vdbe *v, const char *zLabel, i64 value){$/;"	f	file:
returnSingleText	pragma.c	/^static void returnSingleText($/;"	f	file:
reusable	sqliteInt.h	/^    unsigned reusable :1;   \/* Constant expression is reusable *\/$/;"	m	struct:ExprList::ExprList_item
revLoop	whereInt.h	/^  Bitmask revLoop;      \/* aLoop[]s that should be reversed for ORDER BY *\/$/;"	m	struct:WherePath
revMask	whereInt.h	/^  Bitmask revMask;          \/* Mask of ORDER BY terms that need reversing *\/$/;"	m	struct:WhereInfo
robustFchown	os_unix.c	/^static int robustFchown(int fd, uid_t uid, gid_t gid){$/;"	f	file:
robust_close	os_unix.c	/^static void robust_close(unixFile *pFile, int h, int lineno){$/;"	f	file:
robust_flock	os_unix.c	/^static int robust_flock(int fd, int op){$/;"	f	file:
robust_flock	os_unix.c	2243;"	d	file:
robust_ftruncate	os_unix.c	/^static int robust_ftruncate(int h, sqlite3_int64 sz){$/;"	f	file:
robust_open	os_unix.c	/^static int robust_open(const char *z, int f, mode_t m){$/;"	f	file:
rollback_hook	sqlite3ext.h	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines
roundFunc	func.c	/^static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
rowSeparator	shell.c	/^  char rowSeparator[20]; \/* Row separator character for MODE_Ascii *\/$/;"	m	struct:ShellState	file:
rowSetEntryAlloc	rowset.c	/^static struct RowSetEntry *rowSetEntryAlloc(RowSet *p){$/;"	f	file:
rowSetEntryMerge	rowset.c	/^static struct RowSetEntry *rowSetEntryMerge($/;"	f	file:
rowSetEntrySort	rowset.c	/^static struct RowSetEntry *rowSetEntrySort(struct RowSetEntry *pIn){$/;"	f	file:
rowSetListToTree	rowset.c	/^static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){$/;"	f	file:
rowSetNDeepTree	rowset.c	/^static struct RowSetEntry *rowSetNDeepTree($/;"	f	file:
rowSetTreeToList	rowset.c	/^static void rowSetTreeToList($/;"	f	file:
rowid	test_schema.c	/^  int rowid;$/;"	m	struct:schema_cursor	file:
rsFlags	rowset.c	/^  u16 rsFlags;                   \/* Various flags *\/$/;"	m	struct:RowSet	file:
ru_stime	shell.c	/^  struct timeval ru_stime; \/* system CPU time used *\/$/;"	m	struct:rusage	typeref:struct:rusage::timeval	file:
ru_utime	shell.c	/^  struct timeval ru_utime; \/* user CPU time used *\/$/;"	m	struct:rusage	typeref:struct:rusage::timeval	file:
runAsObjProc	test1.c	/^static int SQLITE_TCLAPI runAsObjProc($/;"	f	file:
runOnlyOnce	vdbeInt.h	/^  bft runOnlyOnce:1;      \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe
run_schema_dump_query	shell.c	/^static int run_schema_dump_query($/;"	f	file:
run_table_dump_query	shell.c	/^static int run_table_dump_query($/;"	f	file:
rusage	shell.c	/^struct rusage {$/;"	s	file:
s	date.c	/^  double s;          \/* Seconds *\/$/;"	m	struct:DateTime	file:
s	random.c	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
sArg	sqliteInt.h	/^  Token sArg;               \/* Complete text of a module argument *\/$/;"	m	struct:Parse
sBegin	shell.c	/^static struct rusage sBegin;  \/* CPU time at start *\/$/;"	v	typeref:struct:rusage	file:
sColMap	sqliteInt.h	/^  struct sColMap {      \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey
sDb	test3.c	/^static sqlite3 sDb;$/;"	v	file:
sIoMethodsV1	test_multiplex.c	/^  sqlite3_io_methods sIoMethodsV1;$/;"	m	struct:__anon20	file:
sIoMethodsV1	test_quota.c	/^  sqlite3_io_methods sIoMethodsV1;$/;"	m	struct:__anon25	file:
sIoMethodsV2	test_multiplex.c	/^  sqlite3_io_methods sIoMethodsV2;$/;"	m	struct:__anon20	file:
sIoMethodsV2	test_quota.c	/^  sqlite3_io_methods sIoMethodsV2;$/;"	m	struct:__anon25	file:
sLastToken	sqliteInt.h	/^  Token sLastToken;         \/* The last token parsed *\/$/;"	m	struct:Parse
sMaskSet	whereInt.h	/^  WhereMaskSet sMaskSet;    \/* Map cursor numbers to bitmasks *\/$/;"	m	struct:WhereInfo
sNameToken	sqliteInt.h	/^  Token sNameToken;         \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse
sPragmaNames	pragma.h	/^static const struct sPragmaNames {$/;"	s
sThisVfs	test_multiplex.c	/^  sqlite3_vfs sThisVfs;$/;"	m	struct:__anon20	file:
sThisVfs	test_quota.c	/^  sqlite3_vfs sThisVfs;$/;"	m	struct:__anon25	file:
sWC	whereInt.h	/^  WhereClause sWC;          \/* Decomposition of the WHERE clause *\/$/;"	m	struct:WhereInfo
safeToUseEvalObjv	tclsqlite.c	/^static int safeToUseEvalObjv(Tcl_Interp *interp, Tcl_Obj *pCmd){$/;"	f	file:
safety_level	sqliteInt.h	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db
sampleClear	analyze.c	/^static void sampleClear(sqlite3 *db, Stat4Sample *p){$/;"	f	file:
sampleCopy	analyze.c	/^static void sampleCopy(Stat4Accum *p, Stat4Sample *pTo, Stat4Sample *pFrom){$/;"	f	file:
sampleInsert	analyze.c	/^static void sampleInsert(Stat4Accum *p, Stat4Sample *pNew, int nEqZero){$/;"	f	file:
sampleIsBetter	analyze.c	/^static int sampleIsBetter($/;"	f	file:
sampleIsBetterPost	analyze.c	/^static int sampleIsBetterPost($/;"	f	file:
samplePushPrevious	analyze.c	/^static void samplePushPrevious(Stat4Accum *p, int iChng){$/;"	f	file:
sampleSetRowid	analyze.c	/^static void sampleSetRowid(sqlite3 *db, Stat4Sample *p, int n, const u8 *pData){$/;"	f	file:
sampleSetRowidInt64	analyze.c	/^static void sampleSetRowidInt64(sqlite3 *db, Stat4Sample *p, i64 iRowid){$/;"	f	file:
saveAllCursors	btree.c	/^static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){$/;"	f	file:
saveCursorKey	btree.c	/^static int saveCursorKey(BtCursor *pCur){$/;"	f	file:
saveCursorPosition	btree.c	/^static int saveCursorPosition(BtCursor *pCur){$/;"	f	file:
saveCursorsOnList	btree.c	/^static int SQLITE_NOINLINE saveCursorsOnList($/;"	f	file:
save_err_msg	shell.c	/^static char *save_err_msg($/;"	f	file:
save_prng_state	test1.c	/^static int SQLITE_TCLAPI save_prng_state($/;"	f	file:
savedNQueryLoop	whereInt.h	/^  int savedNQueryLoop;      \/* pParse->nQueryLoop outside the WHERE loop *\/$/;"	m	struct:WhereInfo
savedSelectTrace	shell.c	/^static int savedSelectTrace;$/;"	v	file:
savedWhereTrace	shell.c	/^static int savedWhereTrace;$/;"	v	file:
saved_cnt	pager.c	/^static int saved_cnt;$/;"	v	file:
savepoint_opt	parse.y	/^savepoint_opt ::= .$/;"	l
savepoint_opt	parse.y	/^savepoint_opt ::= SAVEPOINT.$/;"	l
scanstatsOn	shell.c	/^  int scanstatsOn;       \/* True to display scan stats before each finalize *\/$/;"	m	struct:ShellState	file:
schemaBestIndex	test_schema.c	/^static int schemaBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
schemaClose	test_schema.c	/^static int schemaClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
schemaColumn	test_schema.c	/^static int schemaColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
schemaCreate	test_schema.c	/^static int schemaCreate($/;"	f	file:
schemaDestroy	test_schema.c	/^static int schemaDestroy(sqlite3_vtab *pVtab){$/;"	f	file:
schemaEof	test_schema.c	/^static int schemaEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
schemaFilter	test_schema.c	/^static int schemaFilter($/;"	f	file:
schemaFlags	sqliteInt.h	/^  u16 schemaFlags;     \/* Flags associated with this schema *\/$/;"	m	struct:Schema
schemaIsValid	prepare.c	/^static void schemaIsValid(Parse *pParse){$/;"	f	file:
schemaModule	test_schema.c	/^static sqlite3_module schemaModule = {$/;"	v	file:
schemaNext	test_schema.c	/^static int schemaNext(sqlite3_vtab_cursor *cur){$/;"	f	file:
schemaOpen	test_schema.c	/^static int schemaOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
schemaRowid	test_schema.c	/^static int schemaRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){$/;"	f	file:
schema_cookie	sqliteInt.h	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema
schema_cursor	test_schema.c	/^struct schema_cursor {$/;"	s	file:
schema_cursor	test_schema.c	/^typedef struct schema_cursor schema_cursor;$/;"	t	typeref:struct:schema_cursor	file:
schema_vtab	test_schema.c	/^struct schema_vtab {$/;"	s	file:
schema_vtab	test_schema.c	/^typedef struct schema_vtab schema_vtab;$/;"	t	typeref:struct:schema_vtab	file:
scratchAllocOut	malloc.c	/^static int scratchAllocOut = 0;$/;"	v	file:
searchWith	select.c	/^static struct Cte *searchWith($/;"	f	file:
sectorSize	os_unix.c	/^  int sectorSize;                     \/* Device sector size *\/$/;"	m	struct:unixFile	file:
sectorSize	pager.c	/^  u32 sectorSize;             \/* Assumed sector size during rollback *\/$/;"	m	struct:Pager	file:
seekAndRead	os_unix.c	/^static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){$/;"	f	file:
seekAndWrite	os_unix.c	/^static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){$/;"	f	file:
seekAndWriteFd	os_unix.c	/^static int seekAndWriteFd($/;"	f	file:
seekOp	vdbeInt.h	/^  u8 seekOp;            \/* Most recent seek operation on this cursor *\/$/;"	m	struct:VdbeCursor
seekResult	vdbeInt.h	/^  int seekResult;       \/* Result of previous sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor
seenInterrupt	shell.c	/^static volatile int seenInterrupt = 0;$/;"	v	file:
selFlags	sqliteInt.h	/^  u32 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select
selectAddSubqueryTypeInfo	select.c	/^static void selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){$/;"	f	file:
selectExpander	select.c	/^static int selectExpander(Walker *pWalker, Select *p){$/;"	f	file:
selectInnerLoop	select.c	/^static void selectInnerLoop($/;"	f	file:
selectNodeIsConstant	expr.c	/^static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){$/;"	f	file:
selectOpName	select.c	/^static const char *selectOpName(int id){$/;"	f	file:
selectPopWith	select.c	/^static void selectPopWith(Walker *pWalker, Select *p){$/;"	f	file:
selectPopWith	select.c	4217;"	d	file:
semXCheckReservedLock	os_unix.c	/^static int semXCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
semXClose	os_unix.c	/^static int semXClose(sqlite3_file *id) {$/;"	f	file:
semXLock	os_unix.c	/^static int semXLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
semXUnlock	os_unix.c	/^static int semXUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
sendToServer	test_server.c	/^static void sendToServer(SqlMessage *pMsg){$/;"	f	file:
separateCache	pcache1.c	/^  int separateCache;             \/* Use a new PGroup for each PCache *\/$/;"	m	struct:PCacheGlobal	file:
seqCount	vdbeInt.h	/^  i64 seqCount;         \/* Sequence counter *\/$/;"	m	struct:VdbeCursor
serialGet	vdbeaux.c	/^static u32 SQLITE_NOINLINE serialGet($/;"	f	file:
serverHalt	test_server.c	/^  volatile int serverHalt;      \/* Server halts itself when true *\/$/;"	m	struct:ServerState	file:
serverMutex	test_server.c	/^  pthread_mutex_t serverMutex;  \/* Held by the server while it is running *\/$/;"	m	struct:ServerState	file:
serverWakeup	test_server.c	/^  pthread_cond_t serverWakeup;  \/* Signal this condvar to wake up the server *\/$/;"	m	struct:ServerState	file:
serverWrapper	test_server.c	/^static void *serverWrapper(void *pnDecr){$/;"	f	file:
session_close	shell.c	/^static void session_close(OpenSession *pSession){$/;"	f	file:
session_close_all	shell.c	/^static void session_close_all(ShellState *p){$/;"	f	file:
session_close_all	shell.c	2327;"	d	file:
session_filter	shell.c	/^static int session_filter(void *pCtx, const char *zTab){$/;"	f	file:
session_help	shell.c	/^void session_help(ShellState *p){$/;"	f
setAllColumnNames	pragma.c	/^static void setAllColumnNames($/;"	f	file:
setAllPagerFlags	pragma.c	/^static void setAllPagerFlags(sqlite3 *db){$/;"	f	file:
setAllPagerFlags	pragma.c	233;"	d	file:
setBinaryMode	shell.c	/^static void setBinaryMode(FILE *file, int isOutput){$/;"	f	file:
setBinaryMode	shell.c	164;"	d	file:
setChildPtrmaps	btree.c	/^static int setChildPtrmaps(MemPage *pPage){$/;"	f	file:
setChildPtrmaps	btree.c	3698;"	d	file:
setDateTimeToCurrent	date.c	/^static int setDateTimeToCurrent(sqlite3_context *context, DateTime *p){$/;"	f	file:
setDestPgsz	backup.c	/^static int setDestPgsz(sqlite3_backup *p){$/;"	f	file:
setJoinExpr	select.c	/^static void setJoinExpr(Expr *p, int iTable){$/;"	f	file:
setLikeOptFlag	func.c	/^static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){$/;"	f	file:
setMaster	pager.c	/^  u8 setMaster;               \/* True if a m-j name has been written to jrnl *\/$/;"	m	struct:Pager	file:
setOneColumnName	pragma.c	/^static void setOneColumnName(Vdbe *v, const char *z){$/;"	f	file:
setPageReferenced	btree.c	/^static void setPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
setPendingFd	os_unix.c	/^static void setPendingFd(unixFile *pFile){$/;"	f	file:
setResultStrOrError	vdbeapi.c	/^static void setResultStrOrError($/;"	f	file:
setSectorSize	pager.c	/^static void setSectorSize(Pager *pPager){$/;"	f	file:
setSharedCacheTableLock	btree.c	/^static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){$/;"	f	file:
setSharedCacheTableLock	btree.c	108;"	d	file:
setStrAccumError	printf.c	/^static void setStrAccumError(StrAccum *p, u8 eError){$/;"	f	file:
setTestUnlockNotifyVars	tclsqlite.c	/^static void setTestUnlockNotifyVars(Tcl_Interp *interp, int iArg, int nArg){$/;"	f	file:
setTestUnlockNotifyVars	tclsqlite.c	772;"	d	file:
setTextMode	shell.c	/^static void setTextMode(FILE *file, int isOutput){$/;"	f	file:
setTextMode	shell.c	165;"	d	file:
set_authorizer	sqlite3ext.h	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,$/;"	m	struct:sqlite3_api_routines
set_auxdata	sqlite3ext.h	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines
set_options	test_config.c	/^static void set_options(Tcl_Interp *interp){$/;"	f	file:
set_table_name	shell.c	/^static void set_table_name(ShellState *p, const char *zName){$/;"	f	file:
setupLookaside	main.c	/^static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){$/;"	f	file:
sharable	btreeInt.h	/^  u8 sharable;       \/* True if we can share pBt with another db *\/$/;"	m	struct:Btree
shared	os_win.c	/^  winceLock *shared;      \/* Global shared lock memory for the file  *\/$/;"	m	struct:winFile	file:
sharedByte	os_unix.c	/^  unsigned long long sharedByte;  \/* for AFP simulated shared lock *\/$/;"	m	struct:unixInodeInfo	file:
sharedCacheEnabled	sqliteInt.h	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config
sharedLockByte	os_win.c	/^  short sharedLockByte;   \/* Randomly chosen byte used as a shared lock *\/$/;"	m	struct:winFile	file:
sharedMask	os_unix.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:unixShm	file:
sharedMask	os_unix.c	/^  u8 sharedMask;             \/* Mask of shared locks held *\/$/;"	m	struct:unixShmNode	file:
sharedMask	os_win.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:winShm	file:
sharedlock	test_vfs.c	/^  u32 sharedlock;                 \/* Mask of shared locks *\/$/;"	m	struct:TestvfsFd	file:
shellAuth	shell.c	/^static int shellAuth($/;"	f	file:
shellDatabaseError	shell.c	/^static int shellDatabaseError(sqlite3 *db){$/;"	f	file:
shellFlgs	shell.c	/^  unsigned shellFlgs;    \/* Various flags *\/$/;"	m	struct:ShellState	file:
shellLog	shell.c	/^static void shellLog(void *pArg, int iErrCode, const char *zMsg){$/;"	f	file:
shellNomemError	shell.c	/^static int shellNomemError(void){$/;"	f	file:
shell_add_history	shell.c	76;"	d	file:
shell_add_history	shell.c	85;"	d	file:
shell_callback	shell.c	/^static int shell_callback($/;"	f	file:
shell_dbinfo_command	shell.c	/^static int shell_dbinfo_command(ShellState *p, int nArg, char **azArg){$/;"	f	file:
shell_exec	shell.c	/^static int shell_exec($/;"	f	file:
shell_read_history	shell.c	77;"	d	file:
shell_read_history	shell.c	86;"	d	file:
shell_read_history	shell.c	93;"	d	file:
shell_readline	shell.c	80;"	d	file:
shell_readline	shell.c	89;"	d	file:
shell_stifle_history	shell.c	79;"	d	file:
shell_stifle_history	shell.c	88;"	d	file:
shell_stifle_history	shell.c	95;"	d	file:
shell_write_history	shell.c	78;"	d	file:
shell_write_history	shell.c	87;"	d	file:
shell_write_history	shell.c	94;"	d	file:
shellstaticFunc	shell.c	/^static void shellstaticFunc($/;"	f	file:
showHeader	shell.c	/^  int showHeader;        \/* True to show column names in List or Column mode *\/$/;"	m	struct:ShellState	file:
showHeader	shell.c	/^  int showHeader;     \/* The ".header" setting prior to ".explain on" *\/$/;"	m	struct:SavedModeInfo	file:
signed	parse.y	/^signed ::= minus_num.$/;"	l
signed	parse.y	/^signed ::= plus_num.$/;"	l
simulateVtabError	test8.c	/^static int simulateVtabError(echo_vtab *p, const char *zMethod){$/;"	f	file:
size4x	mem3.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon22::__anon23	file:
sjfd	pager.c	/^  sqlite3_file *sjfd;         \/* File descriptor for sub-journal *\/$/;"	m	struct:Pager	file:
skipFlag	vdbeInt.h	/^  u8 skipFlag;            \/* Skip accumulator loading if true *\/$/;"	m	struct:sqlite3_context
skipNext	btreeInt.h	/^  int skipNext;    \/* Prev() is noop if negative. Next() is noop if positive.$/;"	m	struct:BtCursor
sleep	sqlite3ext.h	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines
sleepObj	os_win.c	/^static HANDLE sleepObj = NULL;$/;"	v	file:
snprintf	sqlite3ext.h	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines
soft_heap_limit	sqlite3ext.h	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines
soft_heap_limit64	sqlite3ext.h	/^  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);$/;"	m	struct:sqlite3_api_routines
sortFlags	select.c	/^  u8 sortFlags;         \/* Zero or more SORTFLAG_* bits *\/$/;"	m	struct:SortCtx	file:
sortOrder	sqliteInt.h	/^    u8 sortOrder;           \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item
sorted	whereInt.h	/^  u8 sorted;                \/* True if really sorted (not just grouped) *\/$/;"	m	struct:WhereInfo
sorter_test_fakeheap	test1.c	/^static int SQLITE_TCLAPI sorter_test_fakeheap($/;"	f	file:
sorter_test_sort4_helper	test1.c	/^static int SQLITE_TCLAPI sorter_test_sort4_helper($/;"	f	file:
sortingIdx	sqliteInt.h	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo
sortingIdxPTab	sqliteInt.h	/^  int sortingIdxPTab;     \/* Cursor number of pseudo-table *\/$/;"	m	struct:AggInfo
soundexFunc	func.c	/^static void soundexFunc($/;"	f	file:
sourceid	sqlite3ext.h	/^  const char *(*sourceid)(void);$/;"	m	struct:sqlite3_api_routines
sourceidFunc	func.c	/^static void sourceidFunc($/;"	f	file:
sql	sqlite3ext.h	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
sql_trace_callback	shell.c	/^static int sql_trace_callback($/;"	f	file:
sqlite3	sqliteInt.h	/^struct sqlite3 {$/;"	s
sqlite3AbsInt32	util.c	/^int sqlite3AbsInt32(int x){$/;"	f
sqlite3AddCheckConstraint	build.c	/^void sqlite3AddCheckConstraint($/;"	f
sqlite3AddCollateType	build.c	/^void sqlite3AddCollateType(Parse *pParse, Token *pToken){$/;"	f
sqlite3AddColumn	build.c	/^void sqlite3AddColumn(Parse *pParse, Token *pName, Token *pType){$/;"	f
sqlite3AddDefaultValue	build.c	/^void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){$/;"	f
sqlite3AddInt64	util.c	/^int sqlite3AddInt64(i64 *pA, i64 iB){$/;"	f
sqlite3AddNotNull	build.c	/^void sqlite3AddNotNull(Parse *pParse, int onError){$/;"	f
sqlite3AddPrimaryKey	build.c	/^void sqlite3AddPrimaryKey($/;"	f
sqlite3AffinityType	build.c	/^char sqlite3AffinityType(const char *zIn, u8 *pszEst){$/;"	f
sqlite3AllocateIndexObject	build.c	/^Index *sqlite3AllocateIndexObject($/;"	f
sqlite3AlterBeginAddColumn	alter.c	/^void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3AlterFinishAddColumn	alter.c	/^void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){$/;"	f
sqlite3AlterFunctions	alter.c	/^void sqlite3AlterFunctions(void){$/;"	f
sqlite3AlterRenameTable	alter.c	/^void sqlite3AlterRenameTable($/;"	f
sqlite3AnalysisLoad	analyze.c	/^int sqlite3AnalysisLoad(sqlite3 *db, int iDb){$/;"	f
sqlite3Analyze	analyze.c	/^void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3AnalyzeFunctions	vdbemem.c	/^void sqlite3AnalyzeFunctions(void){$/;"	f
sqlite3ApiExit	malloc.c	/^int sqlite3ApiExit(sqlite3* db, int rc){$/;"	f
sqlite3Apis	loadext.c	/^static const sqlite3_api_routines sqlite3Apis = { 0 };$/;"	v	file:
sqlite3Apis	loadext.c	/^static const sqlite3_api_routines sqlite3Apis = {$/;"	v	file:
sqlite3AppendChar	printf.c	/^void sqlite3AppendChar(StrAccum *p, int N, char c){$/;"	f
sqlite3ArrayAllocate	build.c	/^void *sqlite3ArrayAllocate($/;"	f
sqlite3AtoF	util.c	/^int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){$/;"	f
sqlite3Atoi	util.c	/^int sqlite3Atoi(const char *z){$/;"	f
sqlite3Atoi64	util.c	/^int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){$/;"	f
sqlite3Attach	attach.c	/^void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){$/;"	f
sqlite3AuthCheck	auth.c	/^int sqlite3AuthCheck($/;"	f
sqlite3AuthCheck	sqliteInt.h	3824;"	d
sqlite3AuthContextPop	auth.c	/^void sqlite3AuthContextPop(AuthContext *pContext){$/;"	f
sqlite3AuthContextPop	sqliteInt.h	3826;"	d
sqlite3AuthContextPush	auth.c	/^void sqlite3AuthContextPush($/;"	f
sqlite3AuthContextPush	sqliteInt.h	3825;"	d
sqlite3AuthRead	auth.c	/^void sqlite3AuthRead($/;"	f
sqlite3AuthRead	sqliteInt.h	3823;"	d
sqlite3AuthReadCol	auth.c	/^int sqlite3AuthReadCol($/;"	f
sqlite3AutoExtList	loadext.c	/^static SQLITE_WSD struct sqlite3AutoExtList {$/;"	s	file:
sqlite3AutoExtList	loadext.c	/^typedef struct sqlite3AutoExtList sqlite3AutoExtList;$/;"	t	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoLoadExtensions	loadext.c	/^void sqlite3AutoLoadExtensions(sqlite3 *db){$/;"	f
sqlite3Autoext	loadext.c	/^} sqlite3Autoext = { 0, 0 };$/;"	v	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoincrementBegin	insert.c	/^void sqlite3AutoincrementBegin(Parse *pParse){$/;"	f
sqlite3AutoincrementBegin	sqliteInt.h	3624;"	d
sqlite3AutoincrementEnd	insert.c	/^void sqlite3AutoincrementEnd(Parse *pParse){$/;"	f
sqlite3AutoincrementEnd	sqliteInt.h	3625;"	d
sqlite3BackupRestart	backup.c	/^void sqlite3BackupRestart(sqlite3_backup *pBackup){$/;"	f
sqlite3BackupUpdate	backup.c	/^void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){$/;"	f
sqlite3BeginBenignMalloc	fault.c	/^void sqlite3BeginBenignMalloc(void){$/;"	f
sqlite3BeginBenignMalloc	sqliteInt.h	4141;"	d
sqlite3BeginBenignMalloc	test_func.c	162;"	d	file:
sqlite3BeginTransaction	build.c	/^void sqlite3BeginTransaction(Parse *pParse, int type){$/;"	f
sqlite3BeginTrigger	trigger.c	/^void sqlite3BeginTrigger($/;"	f
sqlite3BeginWriteOperation	build.c	/^void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){$/;"	f
sqlite3BenignMallocHooks	fault.c	/^void sqlite3BenignMallocHooks($/;"	f
sqlite3BinaryCompareCollSeq	expr.c	/^CollSeq *sqlite3BinaryCompareCollSeq($/;"	f
sqlite3BitvecBuiltinTest	bitvec.c	/^int sqlite3BitvecBuiltinTest(int sz, int *aOp){$/;"	f
sqlite3BitvecClear	bitvec.c	/^void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){$/;"	f
sqlite3BitvecCreate	bitvec.c	/^Bitvec *sqlite3BitvecCreate(u32 iSize){$/;"	f
sqlite3BitvecDestroy	bitvec.c	/^void sqlite3BitvecDestroy(Bitvec *p){$/;"	f
sqlite3BitvecSet	bitvec.c	/^int sqlite3BitvecSet(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecSize	bitvec.c	/^u32 sqlite3BitvecSize(Bitvec *p){$/;"	f
sqlite3BitvecTest	bitvec.c	/^int sqlite3BitvecTest(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecTestNotNull	bitvec.c	/^int sqlite3BitvecTestNotNull(Bitvec *p, u32 i){$/;"	f
sqlite3BlobCompare	vdbeaux.c	/^static SQLITE_NOINLINE int sqlite3BlobCompare(const Mem *pB1, const Mem *pB2){$/;"	f	file:
sqlite3BlockedList	notify.c	/^static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;$/;"	v	file:
sqlite3BtreeBeginStmt	btree.c	/^int sqlite3BtreeBeginStmt(Btree *p, int iStatement){$/;"	f
sqlite3BtreeBeginTrans	btree.c	/^int sqlite3BtreeBeginTrans(Btree *p, int wrflag){$/;"	f
sqlite3BtreeCheckpoint	btree.c	/^int sqlite3BtreeCheckpoint(Btree *p, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3BtreeClearCursor	btree.c	/^void sqlite3BtreeClearCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClearTable	btree.c	/^int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){$/;"	f
sqlite3BtreeClearTableOfCursor	btree.c	/^int sqlite3BtreeClearTableOfCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClose	btree.c	/^int sqlite3BtreeClose(Btree *p){$/;"	f
sqlite3BtreeCloseCursor	btree.c	/^int sqlite3BtreeCloseCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeCommit	btree.c	/^int sqlite3BtreeCommit(Btree *p){$/;"	f
sqlite3BtreeCommitPhaseOne	btree.c	/^int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){$/;"	f
sqlite3BtreeCommitPhaseTwo	btree.c	/^int sqlite3BtreeCommitPhaseTwo(Btree *p, int bCleanup){$/;"	f
sqlite3BtreeConnectionCount	btree.c	/^int sqlite3BtreeConnectionCount(Btree *p){$/;"	f
sqlite3BtreeConnectionCount	btree.h	337;"	d
sqlite3BtreeCopyFile	backup.c	/^int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){$/;"	f
sqlite3BtreeCount	btree.c	/^int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){$/;"	f
sqlite3BtreeCreateTable	btree.c	/^int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){$/;"	f
sqlite3BtreeCursor	btree.c	/^int sqlite3BtreeCursor($/;"	f
sqlite3BtreeCursorHasHint	btree.c	/^int sqlite3BtreeCursorHasHint(BtCursor *pCsr, unsigned int mask){$/;"	f
sqlite3BtreeCursorHasMoved	btree.c	/^int sqlite3BtreeCursorHasMoved(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorHint	btree.c	/^void sqlite3BtreeCursorHint(BtCursor *pCur, int eHintType, ...){$/;"	f
sqlite3BtreeCursorHintFlags	btree.c	/^void sqlite3BtreeCursorHintFlags(BtCursor *pCur, unsigned x){$/;"	f
sqlite3BtreeCursorIsValid	btree.c	/^int sqlite3BtreeCursorIsValid(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorList	test_btree.c	/^void sqlite3BtreeCursorList(Btree *p){$/;"	f
sqlite3BtreeCursorRestore	btree.c	/^int sqlite3BtreeCursorRestore(BtCursor *pCur, int *pDifferentRow){$/;"	f
sqlite3BtreeCursorSize	btree.c	/^int sqlite3BtreeCursorSize(void){$/;"	f
sqlite3BtreeCursorZero	btree.c	/^void sqlite3BtreeCursorZero(BtCursor *p){$/;"	f
sqlite3BtreeData	btree.c	/^int sqlite3BtreeData(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeDelete	btree.c	/^int sqlite3BtreeDelete(BtCursor *pCur, u8 flags){$/;"	f
sqlite3BtreeDropTable	btree.c	/^int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){$/;"	f
sqlite3BtreeEnter	btmutex.c	/^void sqlite3BtreeEnter(Btree *p){$/;"	f
sqlite3BtreeEnter	btree.h	333;"	d
sqlite3BtreeEnterAll	btmutex.c	/^void sqlite3BtreeEnterAll(sqlite3 *db){$/;"	f
sqlite3BtreeEnterAll	btree.h	334;"	d
sqlite3BtreeEnterCursor	btmutex.c	/^void sqlite3BtreeEnterCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeEnterCursor	btree.h	336;"	d
sqlite3BtreeEof	btree.c	/^int sqlite3BtreeEof(BtCursor *pCur){$/;"	f
sqlite3BtreeFirst	btree.c	/^int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeGetAutoVacuum	btree.c	/^int sqlite3BtreeGetAutoVacuum(Btree *p){$/;"	f
sqlite3BtreeGetFilename	btree.c	/^const char *sqlite3BtreeGetFilename(Btree *p){$/;"	f
sqlite3BtreeGetJournalname	btree.c	/^const char *sqlite3BtreeGetJournalname(Btree *p){$/;"	f
sqlite3BtreeGetMeta	btree.c	/^void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){$/;"	f
sqlite3BtreeGetOptimalReserve	btree.c	/^int sqlite3BtreeGetOptimalReserve(Btree *p){$/;"	f
sqlite3BtreeGetPageSize	btree.c	/^int sqlite3BtreeGetPageSize(Btree *p){$/;"	f
sqlite3BtreeGetReserveNoMutex	btree.c	/^int sqlite3BtreeGetReserveNoMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsAllMutexes	btmutex.c	/^int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){$/;"	f
sqlite3BtreeHoldsAllMutexes	btree.h	357;"	d
sqlite3BtreeHoldsMutex	btmutex.c	/^int sqlite3BtreeHoldsMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsMutex	btree.h	356;"	d
sqlite3BtreeIncrVacuum	btree.c	/^int sqlite3BtreeIncrVacuum(Btree *p){$/;"	f
sqlite3BtreeIncrblobCursor	btree.c	/^void sqlite3BtreeIncrblobCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeInsert	btree.c	/^int sqlite3BtreeInsert($/;"	f
sqlite3BtreeIntegerKey	btree.c	/^i64 sqlite3BtreeIntegerKey(BtCursor *pCur){$/;"	f
sqlite3BtreeIntegrityCheck	btree.c	/^char *sqlite3BtreeIntegrityCheck($/;"	f
sqlite3BtreeIsInBackup	btree.c	/^int sqlite3BtreeIsInBackup(Btree *p){$/;"	f
sqlite3BtreeIsInReadTrans	btree.c	/^int sqlite3BtreeIsInReadTrans(Btree *p){$/;"	f
sqlite3BtreeIsInTrans	btree.c	/^int sqlite3BtreeIsInTrans(Btree *p){$/;"	f
sqlite3BtreeIsReadonly	btree.c	/^int sqlite3BtreeIsReadonly(Btree *p){$/;"	f
sqlite3BtreeKey	btree.c	/^int sqlite3BtreeKey(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeLast	btree.c	/^int sqlite3BtreeLast(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeLastPage	btree.c	/^u32 sqlite3BtreeLastPage(Btree *p){$/;"	f
sqlite3BtreeLeave	btmutex.c	/^void sqlite3BtreeLeave(Btree *p){$/;"	f
sqlite3BtreeLeave	btree.h	352;"	d
sqlite3BtreeLeaveAll	btmutex.c	/^void sqlite3BtreeLeaveAll(sqlite3 *db){$/;"	f
sqlite3BtreeLeaveAll	btree.h	354;"	d
sqlite3BtreeLeaveCursor	btmutex.c	/^void sqlite3BtreeLeaveCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeLeaveCursor	btree.h	353;"	d
sqlite3BtreeLockTable	btree.c	/^int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){$/;"	f
sqlite3BtreeMaxPageCount	btree.c	/^int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){$/;"	f
sqlite3BtreeMovetoUnpacked	btree.c	/^int sqlite3BtreeMovetoUnpacked($/;"	f
sqlite3BtreeNewDb	btree.c	/^int sqlite3BtreeNewDb(Btree *p){$/;"	f
sqlite3BtreeNext	btree.c	/^int sqlite3BtreeNext(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeOpen	btree.c	/^int sqlite3BtreeOpen($/;"	f
sqlite3BtreePager	btree.c	/^Pager *sqlite3BtreePager(Btree *p){$/;"	f
sqlite3BtreePayloadFetch	btree.c	/^const void *sqlite3BtreePayloadFetch(BtCursor *pCur, u32 *pAmt){$/;"	f
sqlite3BtreePayloadSize	btree.c	/^u32 sqlite3BtreePayloadSize(BtCursor *pCur){$/;"	f
sqlite3BtreePrevious	btree.c	/^int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreePutData	btree.c	/^int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){$/;"	f
sqlite3BtreeRollback	btree.c	/^int sqlite3BtreeRollback(Btree *p, int tripCode, int writeOnly){$/;"	f
sqlite3BtreeSavepoint	btree.c	/^int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){$/;"	f
sqlite3BtreeSchema	btree.c	/^void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){$/;"	f
sqlite3BtreeSchemaLocked	btree.c	/^int sqlite3BtreeSchemaLocked(Btree *p){$/;"	f
sqlite3BtreeSecureDelete	btree.c	/^int sqlite3BtreeSecureDelete(Btree *p, int newFlag){$/;"	f
sqlite3BtreeSetAutoVacuum	btree.c	/^int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){$/;"	f
sqlite3BtreeSetCacheSize	btree.c	/^int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetMmapLimit	btree.c	/^int sqlite3BtreeSetMmapLimit(Btree *p, sqlite3_int64 szMmap){$/;"	f
sqlite3BtreeSetPageSize	btree.c	/^int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){$/;"	f
sqlite3BtreeSetPagerFlags	btree.c	/^int sqlite3BtreeSetPagerFlags($/;"	f
sqlite3BtreeSetSpillSize	btree.c	/^int sqlite3BtreeSetSpillSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetVersion	btree.c	/^int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){$/;"	f
sqlite3BtreeSharable	btree.c	/^int sqlite3BtreeSharable(Btree *p){$/;"	f
sqlite3BtreeSharable	btree.h	335;"	d
sqlite3BtreeSharedCacheReport	test_btree.c	/^int SQLITE_TCLAPI sqlite3BtreeSharedCacheReport($/;"	f
sqlite3BtreeTrace	btree.c	/^int sqlite3BtreeTrace=1;  \/* True to enable tracing *\/$/;"	v
sqlite3BtreeTripAllCursors	btree.c	/^int sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode, int writeOnly){$/;"	f
sqlite3BtreeUpdateMeta	btree.c	/^int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){$/;"	f
sqlite3BuiltinFunctions	global.c	/^FuncDefHash sqlite3BuiltinFunctions;$/;"	v
sqlite3CantopenError	main.c	/^int sqlite3CantopenError(int lineno){$/;"	f
sqlite3ChangeCookie	build.c	/^void sqlite3ChangeCookie(Parse *pParse, int iDb){$/;"	f
sqlite3CheckCollSeq	callback.c	/^int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){$/;"	f
sqlite3CheckObjectName	build.c	/^int sqlite3CheckObjectName(Parse *pParse, const char *zName){$/;"	f
sqlite3Checkpoint	main.c	/^int sqlite3Checkpoint(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3ClearStatTables	build.c	/^static void sqlite3ClearStatTables($/;"	f	file:
sqlite3ClearTempRegCache	expr.c	/^void sqlite3ClearTempRegCache(Parse *pParse){$/;"	f
sqlite3Close	main.c	/^static int sqlite3Close(sqlite3 *db, int forceZombie){$/;"	f	file:
sqlite3CloseExtensions	loadext.c	/^void sqlite3CloseExtensions(sqlite3 *db){$/;"	f
sqlite3CloseExtensions	sqliteInt.h	4023;"	d
sqlite3CloseSavepoints	main.c	/^void sqlite3CloseSavepoints(sqlite3 *db){$/;"	f
sqlite3CodeDropTable	build.c	/^void sqlite3CodeDropTable(Parse *pParse, Table *pTab, int iDb, int isView){$/;"	f
sqlite3CodeOnce	expr.c	/^int sqlite3CodeOnce(Parse *pParse){$/;"	f
sqlite3CodeRowTrigger	sqliteInt.h	3805;"	d
sqlite3CodeRowTrigger	trigger.c	/^void sqlite3CodeRowTrigger($/;"	f
sqlite3CodeRowTriggerDirect	sqliteInt.h	3806;"	d
sqlite3CodeRowTriggerDirect	trigger.c	/^void sqlite3CodeRowTriggerDirect($/;"	f
sqlite3CodeSubselect	expr.c	/^int sqlite3CodeSubselect($/;"	f
sqlite3CodeVerifyNamedSchema	build.c	/^void sqlite3CodeVerifyNamedSchema(Parse *pParse, const char *zDb){$/;"	f
sqlite3CodeVerifySchema	build.c	/^void sqlite3CodeVerifySchema(Parse *pParse, int iDb){$/;"	f
sqlite3CollapseDatabaseArray	build.c	/^void sqlite3CollapseDatabaseArray(sqlite3 *db){$/;"	f
sqlite3ColumnDefault	update.c	/^void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){$/;"	f
sqlite3ColumnOfIndex	build.c	/^i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){$/;"	f
sqlite3ColumnPropertiesFromName	build.c	/^void sqlite3ColumnPropertiesFromName(Table *pTab, Column *pCol){$/;"	f
sqlite3ColumnPropertiesFromName	sqliteInt.h	3569;"	d
sqlite3ColumnType	util.c	/^char *sqlite3ColumnType(Column *pCol, char *zDflt){$/;"	f
sqlite3ColumnsFromExprList	select.c	/^int sqlite3ColumnsFromExprList($/;"	f
sqlite3CommitInternalChanges	build.c	/^void sqlite3CommitInternalChanges(sqlite3 *db){$/;"	f
sqlite3CommitTransaction	build.c	/^void sqlite3CommitTransaction(Parse *pParse){$/;"	f
sqlite3CompareAffinity	expr.c	/^char sqlite3CompareAffinity(Expr *pExpr, char aff2){$/;"	f
sqlite3CompleteInsertion	insert.c	/^void sqlite3CompleteInsertion($/;"	f
sqlite3Config	global.c	/^SQLITE_WSD struct Sqlite3Config sqlite3Config = {$/;"	v	typeref:struct:Sqlite3Config
sqlite3ConnectionBlocked	notify.c	/^void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){$/;"	f
sqlite3ConnectionBlocked	sqliteInt.h	4187;"	d
sqlite3ConnectionClosed	notify.c	/^void sqlite3ConnectionClosed(sqlite3 *db){$/;"	f
sqlite3ConnectionClosed	sqliteInt.h	4189;"	d
sqlite3ConnectionUnlocked	notify.c	/^void sqlite3ConnectionUnlocked(sqlite3 *db){$/;"	f
sqlite3ConnectionUnlocked	sqliteInt.h	4188;"	d
sqlite3CorruptError	main.c	/^int sqlite3CorruptError(int lineno){$/;"	f
sqlite3Coverage	util.c	/^void sqlite3Coverage(int x){$/;"	f
sqlite3CrashTestEnable	test6.c	/^static int sqlite3CrashTestEnable = 0;$/;"	v	file:
sqlite3CreateColumnExpr	resolve.c	/^Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){$/;"	f
sqlite3CreateForeignKey	build.c	/^void sqlite3CreateForeignKey($/;"	f
sqlite3CreateFunc	main.c	/^int sqlite3CreateFunc($/;"	f
sqlite3CreateIndex	build.c	/^void sqlite3CreateIndex($/;"	f
sqlite3CreateView	build.c	/^void sqlite3CreateView($/;"	f
sqlite3CtypeMap	global.c	/^const unsigned char sqlite3CtypeMap[256] = {$/;"	v
sqlite3DbFree	malloc.c	/^void sqlite3DbFree(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocRaw	malloc.c	/^void *sqlite3DbMallocRaw(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMallocRawNN	malloc.c	/^void *sqlite3DbMallocRawNN(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMallocSize	malloc.c	/^int sqlite3DbMallocSize(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocZero	malloc.c	/^void *sqlite3DbMallocZero(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMaskAllZero	build.c	/^int sqlite3DbMaskAllZero(yDbMask m){$/;"	f
sqlite3DbNameToBtree	main.c	/^Btree *sqlite3DbNameToBtree(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3DbRealloc	malloc.c	/^void *sqlite3DbRealloc(sqlite3 *db, void *p, u64 n){$/;"	f
sqlite3DbReallocOrFree	malloc.c	/^void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, u64 n){$/;"	f
sqlite3DbStrDup	malloc.c	/^char *sqlite3DbStrDup(sqlite3 *db, const char *z){$/;"	f
sqlite3DbStrNDup	malloc.c	/^char *sqlite3DbStrNDup(sqlite3 *db, const char *z, u64 n){$/;"	f
sqlite3DbstatRegister	dbstat.c	/^int sqlite3DbstatRegister(sqlite3 *db){ return SQLITE_OK; }$/;"	f
sqlite3DbstatRegister	dbstat.c	/^int sqlite3DbstatRegister(sqlite3 *db){$/;"	f
sqlite3DebugPrintf	pager.c	117;"	d	file:
sqlite3DebugPrintf	printf.c	/^void sqlite3DebugPrintf(const char *zFormat, ...){$/;"	f
sqlite3DecOrHexToI64	util.c	/^int sqlite3DecOrHexToI64(const char *z, i64 *pOut){$/;"	f
sqlite3DefaultMutex	mutex_noop.c	/^sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultMutex	mutex_unix.c	/^sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultMutex	mutex_w32.c	/^sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultRowEst	build.c	/^void sqlite3DefaultRowEst(Index *pIdx){$/;"	f
sqlite3DeferForeignKey	build.c	/^void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){$/;"	f
sqlite3DeleteColumnNames	build.c	/^void sqlite3DeleteColumnNames(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteFrom	delete.c	/^void sqlite3DeleteFrom($/;"	f
sqlite3DeleteIndexSamples	analyze.c	/^void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3DeleteTable	build.c	/^void sqlite3DeleteTable(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteTrigger	sqliteInt.h	3802;"	d
sqlite3DeleteTrigger	trigger.c	/^void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){$/;"	f
sqlite3DeleteTriggerStep	trigger.c	/^void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){$/;"	f
sqlite3Dequote	util.c	/^void sqlite3Dequote(char *z){$/;"	f
sqlite3Detach	attach.c	/^void sqlite3Detach(Parse *pParse, Expr *pDbname){$/;"	f
sqlite3DropIndex	build.c	/^void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){$/;"	f
sqlite3DropTable	build.c	/^void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){$/;"	f
sqlite3DropTrigger	trigger.c	/^void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){$/;"	f
sqlite3DropTriggerPtr	sqliteInt.h	3803;"	d
sqlite3DropTriggerPtr	trigger.c	/^void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){$/;"	f
sqlite3EndBenignMalloc	fault.c	/^void sqlite3EndBenignMalloc(void){$/;"	f
sqlite3EndBenignMalloc	sqliteInt.h	4142;"	d
sqlite3EndBenignMalloc	test_func.c	163;"	d	file:
sqlite3EndTable	build.c	/^void sqlite3EndTable($/;"	f
sqlite3ErrName	main.c	/^const char *sqlite3ErrName(int rc){$/;"	f
sqlite3ErrStr	main.c	/^const char *sqlite3ErrStr(int rc){$/;"	f
sqlite3Error	util.c	/^void sqlite3Error(sqlite3 *db, int err_code){$/;"	f
sqlite3ErrorFinish	util.c	/^static SQLITE_NOINLINE void  sqlite3ErrorFinish(sqlite3 *db, int err_code){$/;"	f	file:
sqlite3ErrorMsg	util.c	/^void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3ErrorWithMsg	util.c	/^void sqlite3ErrorWithMsg(sqlite3 *db, int err_code, const char *zFormat, ...){$/;"	f
sqlite3ExecFunc	test1.c	/^static void sqlite3ExecFunc($/;"	f	file:
sqlite3ExpirePreparedStatements	vdbeaux.c	/^void sqlite3ExpirePreparedStatements(sqlite3 *db){$/;"	f
sqlite3Expr	expr.c	/^Expr *sqlite3Expr($/;"	f
sqlite3ExprAddCollateString	expr.c	/^Expr *sqlite3ExprAddCollateString(Parse *pParse, Expr *pExpr, const char *zC){$/;"	f
sqlite3ExprAddCollateToken	expr.c	/^Expr *sqlite3ExprAddCollateToken($/;"	f
sqlite3ExprAffinity	expr.c	/^char sqlite3ExprAffinity(Expr *pExpr){$/;"	f
sqlite3ExprAlloc	expr.c	/^Expr *sqlite3ExprAlloc($/;"	f
sqlite3ExprAnalyzeAggList	expr.c	/^void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){$/;"	f
sqlite3ExprAnalyzeAggregates	expr.c	/^void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){$/;"	f
sqlite3ExprAnd	expr.c	/^Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){$/;"	f
sqlite3ExprAssignVarNumber	expr.c	/^void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprAttachSubtrees	expr.c	/^void sqlite3ExprAttachSubtrees($/;"	f
sqlite3ExprCacheAffinityChange	expr.c	/^void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){$/;"	f
sqlite3ExprCacheClear	expr.c	/^void sqlite3ExprCacheClear(Parse *pParse){$/;"	f
sqlite3ExprCachePinRegister	expr.c	/^static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){$/;"	f	file:
sqlite3ExprCachePop	expr.c	/^void sqlite3ExprCachePop(Parse *pParse){$/;"	f
sqlite3ExprCachePush	expr.c	/^void sqlite3ExprCachePush(Parse *pParse){$/;"	f
sqlite3ExprCacheRemove	expr.c	/^void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ExprCacheStore	expr.c	/^void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){$/;"	f
sqlite3ExprCanBeNull	expr.c	/^int sqlite3ExprCanBeNull(const Expr *p){$/;"	f
sqlite3ExprCheckHeight	expr.c	/^int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){$/;"	f
sqlite3ExprCheckHeight	sqliteInt.h	4176;"	d
sqlite3ExprCode	expr.c	/^void sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAndCache	expr.c	/^void sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAtInit	expr.c	/^void sqlite3ExprCodeAtInit($/;"	f
sqlite3ExprCodeCopy	expr.c	/^void sqlite3ExprCodeCopy(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeExprList	expr.c	/^int sqlite3ExprCodeExprList($/;"	f
sqlite3ExprCodeFactorable	expr.c	/^void sqlite3ExprCodeFactorable(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeGetColumn	expr.c	/^int sqlite3ExprCodeGetColumn($/;"	f
sqlite3ExprCodeGetColumnOfTable	expr.c	/^void sqlite3ExprCodeGetColumnOfTable($/;"	f
sqlite3ExprCodeGetColumnToReg	expr.c	/^void sqlite3ExprCodeGetColumnToReg($/;"	f
sqlite3ExprCodeIN	expr.c	/^static void sqlite3ExprCodeIN($/;"	f	file:
sqlite3ExprCodeLoadIndexColumn	expr.c	/^void sqlite3ExprCodeLoadIndexColumn($/;"	f
sqlite3ExprCodeMove	expr.c	/^void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeTarget	expr.c	/^int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeTemp	expr.c	/^int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){$/;"	f
sqlite3ExprCollSeq	expr.c	/^CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCompare	expr.c	/^int sqlite3ExprCompare(Expr *pA, Expr *pB, int iTab){$/;"	f
sqlite3ExprContainsSubquery	expr.c	/^int sqlite3ExprContainsSubquery(Expr *p){$/;"	f
sqlite3ExprCoveredByIndex	expr.c	/^int sqlite3ExprCoveredByIndex($/;"	f
sqlite3ExprDelete	expr.c	/^void sqlite3ExprDelete(sqlite3 *db, Expr *p){$/;"	f
sqlite3ExprDeleteNN	expr.c	/^static SQLITE_NOINLINE void sqlite3ExprDeleteNN(sqlite3 *db, Expr *p){$/;"	f	file:
sqlite3ExprDup	expr.c	/^Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){$/;"	f
sqlite3ExprFunction	expr.c	/^Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){$/;"	f
sqlite3ExprIfFalse	expr.c	/^void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIfFalseDup	expr.c	/^void sqlite3ExprIfFalseDup(Parse *pParse, Expr *pExpr, int dest,int jumpIfNull){$/;"	f
sqlite3ExprIfTrue	expr.c	/^void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprImpliesExpr	expr.c	/^int sqlite3ExprImpliesExpr(Expr *pE1, Expr *pE2, int iTab){$/;"	f
sqlite3ExprIsConstant	expr.c	/^int sqlite3ExprIsConstant(Expr *p){$/;"	f
sqlite3ExprIsConstantNotJoin	expr.c	/^int sqlite3ExprIsConstantNotJoin(Expr *p){$/;"	f
sqlite3ExprIsConstantOrFunction	expr.c	/^int sqlite3ExprIsConstantOrFunction(Expr *p, u8 isInit){$/;"	f
sqlite3ExprIsInteger	expr.c	/^int sqlite3ExprIsInteger(Expr *p, int *pValue){$/;"	f
sqlite3ExprIsTableConstant	expr.c	/^int sqlite3ExprIsTableConstant(Expr *p, int iCur){$/;"	f
sqlite3ExprListAppend	expr.c	/^ExprList *sqlite3ExprListAppend($/;"	f
sqlite3ExprListCheckLength	expr.c	/^void sqlite3ExprListCheckLength($/;"	f
sqlite3ExprListCompare	expr.c	/^int sqlite3ExprListCompare(ExprList *pA, ExprList *pB, int iTab){$/;"	f
sqlite3ExprListDelete	expr.c	/^void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){$/;"	f
sqlite3ExprListDup	expr.c	/^ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){$/;"	f
sqlite3ExprListFlags	expr.c	/^u32 sqlite3ExprListFlags(const ExprList *pList){$/;"	f
sqlite3ExprListSetName	expr.c	/^void sqlite3ExprListSetName($/;"	f
sqlite3ExprListSetSortOrder	expr.c	/^void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder){$/;"	f
sqlite3ExprListSetSpan	expr.c	/^void sqlite3ExprListSetSpan($/;"	f
sqlite3ExprNeedsNoAffinityChange	expr.c	/^int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){$/;"	f
sqlite3ExprSetHeightAndFlags	expr.c	/^void sqlite3ExprSetHeightAndFlags(Parse *pParse, Expr *p){$/;"	f
sqlite3ExprSkipCollate	expr.c	/^Expr *sqlite3ExprSkipCollate(Expr *pExpr){$/;"	f
sqlite3ExprWalkNoop	select.c	/^int sqlite3ExprWalkNoop(Walker *NotUsed, Expr *NotUsed2){$/;"	f
sqlite3Fault	test_malloc.c	/^static void sqlite3Fault(void){$/;"	f	file:
sqlite3FaultSim	sqliteInt.h	3584;"	d
sqlite3FaultSim	util.c	/^int sqlite3FaultSim(int iTest){$/;"	f
sqlite3FileSuffix3	sqliteInt.h	3913;"	d
sqlite3FileSuffix3	util.c	/^void sqlite3FileSuffix3(const char *zBaseFilename, char *z){$/;"	f
sqlite3FindCollSeq	callback.c	/^CollSeq *sqlite3FindCollSeq($/;"	f
sqlite3FindDb	build.c	/^int sqlite3FindDb(sqlite3 *db, Token *pName){$/;"	f
sqlite3FindDbName	build.c	/^int sqlite3FindDbName(sqlite3 *db, const char *zName){$/;"	f
sqlite3FindFunction	callback.c	/^FuncDef *sqlite3FindFunction($/;"	f
sqlite3FindInIndex	expr.c	/^int sqlite3FindInIndex(Parse *pParse, Expr *pX, u32 inFlags, int *prRhsHasNull){$/;"	f
sqlite3FindIndex	build.c	/^Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){$/;"	f
sqlite3FindTable	build.c	/^Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){$/;"	f
sqlite3FinishCoding	build.c	/^void sqlite3FinishCoding(Parse *pParse){$/;"	f
sqlite3FinishTrigger	trigger.c	/^void sqlite3FinishTrigger($/;"	f
sqlite3FixExpr	attach.c	/^int sqlite3FixExpr($/;"	f
sqlite3FixExprList	attach.c	/^int sqlite3FixExprList($/;"	f
sqlite3FixInit	attach.c	/^void sqlite3FixInit($/;"	f
sqlite3FixSelect	attach.c	/^int sqlite3FixSelect($/;"	f
sqlite3FixSrcList	attach.c	/^int sqlite3FixSrcList($/;"	f
sqlite3FixTriggerStep	attach.c	/^int sqlite3FixTriggerStep($/;"	f
sqlite3FkActions	fkey.c	/^void sqlite3FkActions($/;"	f
sqlite3FkActions	sqliteInt.h	4111;"	d
sqlite3FkCheck	fkey.c	/^void sqlite3FkCheck($/;"	f
sqlite3FkCheck	sqliteInt.h	4112;"	d
sqlite3FkDelete	fkey.c	/^void sqlite3FkDelete(sqlite3 *db, Table *pTab){$/;"	f
sqlite3FkDelete	sqliteInt.h	4121;"	d
sqlite3FkDropTable	fkey.c	/^void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){$/;"	f
sqlite3FkDropTable	sqliteInt.h	4113;"	d
sqlite3FkLocateIndex	fkey.c	/^int sqlite3FkLocateIndex($/;"	f
sqlite3FkLocateIndex	sqliteInt.h	4122;"	d
sqlite3FkOldmask	fkey.c	/^u32 sqlite3FkOldmask($/;"	f
sqlite3FkOldmask	sqliteInt.h	4114;"	d
sqlite3FkReferences	fkey.c	/^FKey *sqlite3FkReferences(Table *pTab){$/;"	f
sqlite3FkRequired	fkey.c	/^int sqlite3FkRequired($/;"	f
sqlite3FkRequired	sqliteInt.h	4115;"	d
sqlite3FunctionUsesThisSrc	expr.c	/^int sqlite3FunctionUsesThisSrc(Expr *pExpr, SrcList *pSrcList){$/;"	f
sqlite3GenerateConstraintChecks	insert.c	/^void sqlite3GenerateConstraintChecks($/;"	f
sqlite3GenerateIndexKey	delete.c	/^int sqlite3GenerateIndexKey($/;"	f
sqlite3GenerateRowDelete	delete.c	/^void sqlite3GenerateRowDelete($/;"	f
sqlite3GenerateRowIndexDelete	delete.c	/^void sqlite3GenerateRowIndexDelete($/;"	f
sqlite3Get4byte	util.c	/^u32 sqlite3Get4byte(const u8 *p){$/;"	f
sqlite3GetBoolean	pragma.c	/^u8 sqlite3GetBoolean(const char *z, u8 dflt){$/;"	f
sqlite3GetCollSeq	callback.c	/^CollSeq *sqlite3GetCollSeq($/;"	f
sqlite3GetFuncCollSeq	func.c	/^static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){$/;"	f	file:
sqlite3GetInt32	util.c	/^int sqlite3GetInt32(const char *zNum, int *pValue){$/;"	f
sqlite3GetTempRange	expr.c	/^int sqlite3GetTempRange(Parse *pParse, int nReg){$/;"	f
sqlite3GetTempReg	expr.c	/^int sqlite3GetTempReg(Parse *pParse){$/;"	f
sqlite3GetToken	tokenize.c	/^int sqlite3GetToken(const unsigned char *z, int *tokenType){$/;"	f
sqlite3GetVTable	sqliteInt.h	4046;"	d
sqlite3GetVTable	vtab.c	/^VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){$/;"	f
sqlite3GetVarint	util.c	/^u8 sqlite3GetVarint(const unsigned char *p, u64 *v){$/;"	f
sqlite3GetVarint32	util.c	/^u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){$/;"	f
sqlite3GetVdbe	select.c	/^Vdbe *sqlite3GetVdbe(Parse *pParse){$/;"	f
sqlite3GlobalConfig	sqliteInt.h	970;"	d
sqlite3GlobalConfig	sqliteInt.h	976;"	d
sqlite3HaltConstraint	build.c	/^void sqlite3HaltConstraint($/;"	f
sqlite3HashClear	hash.c	/^void sqlite3HashClear(Hash *pH){$/;"	f
sqlite3HashFind	hash.c	/^void *sqlite3HashFind(const Hash *pH, const char *pKey){$/;"	f
sqlite3HashInit	hash.c	/^void sqlite3HashInit(Hash *pNew){$/;"	f
sqlite3HashInsert	hash.c	/^void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){$/;"	f
sqlite3HeaderSizeBtree	btree.c	/^int sqlite3HeaderSizeBtree(void){ return ROUND8(sizeof(MemPage)); }$/;"	f
sqlite3HeaderSizePcache	pcache.c	/^int sqlite3HeaderSizePcache(void){ return ROUND8(sizeof(PgHdr)); }$/;"	f
sqlite3HeaderSizePcache1	pcache1.c	/^int sqlite3HeaderSizePcache1(void){ return ROUND8(sizeof(PgHdr1)); }$/;"	f
sqlite3HeapNearlyFull	malloc.c	/^int sqlite3HeapNearlyFull(void){$/;"	f
sqlite3HexToBlob	util.c	/^void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3HexToInt	util.c	/^u8 sqlite3HexToInt(int h){$/;"	f
sqlite3Hooks	fault.c	/^} sqlite3Hooks = { 0, 0 };$/;"	v	typeref:struct:BenignMallocHooks	file:
sqlite3Hwtime	hwtime.h	/^  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){$/;"	f
sqlite3Hwtime	hwtime.h	/^  __inline__ sqlite_uint64 sqlite3Hwtime(void){$/;"	f
sqlite3Hwtime	hwtime.h	/^  sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }$/;"	f
sqlite3IdListAppend	build.c	/^IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){$/;"	f
sqlite3IdListDelete	build.c	/^void sqlite3IdListDelete(sqlite3 *db, IdList *pList){$/;"	f
sqlite3IdListDup	expr.c	/^IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){$/;"	f
sqlite3IdListIndex	build.c	/^int sqlite3IdListIndex(IdList *pList, const char *zName){$/;"	f
sqlite3InRhsIsConstant	expr.c	/^static int sqlite3InRhsIsConstant(Expr *pIn){$/;"	f	file:
sqlite3IndexAffinityOk	expr.c	/^int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){$/;"	f
sqlite3IndexAffinityStr	insert.c	/^const char *sqlite3IndexAffinityStr(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3IndexColumnAffinity	where.c	/^static char sqlite3IndexColumnAffinity(sqlite3 *db, Index *pIdx, int iCol){$/;"	f	file:
sqlite3IndexedByLookup	select.c	/^int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){$/;"	f
sqlite3Init	prepare.c	/^int sqlite3Init(sqlite3 *db, char **pzErrMsg){$/;"	f
sqlite3InitCallback	prepare.c	/^int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){$/;"	f
sqlite3InitInfo	sqliteInt.h	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3
sqlite3InitOne	prepare.c	/^static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){$/;"	f	file:
sqlite3Insert	insert.c	/^void sqlite3Insert($/;"	f
sqlite3InsertBuiltinFuncs	callback.c	/^void sqlite3InsertBuiltinFuncs($/;"	f
sqlite3IntFloatCompare	vdbeaux.c	/^static int sqlite3IntFloatCompare(i64 i, double r){$/;"	f	file:
sqlite3IntTokens	global.c	/^const Token sqlite3IntTokens[] = {$/;"	v
sqlite3InvalidFunction	vdbeapi.c	/^void sqlite3InvalidFunction($/;"	f
sqlite3InvokeBusyHandler	main.c	/^int sqlite3InvokeBusyHandler(BusyHandler *p){$/;"	f
sqlite3IoTrace	main.c	/^SQLITE_API void (SQLITE_CDECL *sqlite3IoTrace)(const char*, ...) = 0;$/;"	v
sqlite3IoTrace	sqliteInt.h	/^SQLITE_API SQLITE_EXTERN void (SQLITE_CDECL *sqlite3IoTrace)(const char*,...);$/;"	v
sqlite3IoerrnomemError	main.c	/^int sqlite3IoerrnomemError(int lineno){$/;"	f
sqlite3IsEbcdicIdChar	tokenize.c	/^const char sqlite3IsEbcdicIdChar[] = {$/;"	v
sqlite3IsIdChar	tokenize.c	/^int sqlite3IsIdChar(u8 c){ return IdChar(c); }$/;"	f
sqlite3IsLikeFunction	func.c	/^int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){$/;"	f
sqlite3IsNaN	sqliteInt.h	3489;"	d
sqlite3IsNaN	util.c	/^int sqlite3IsNaN(double x){$/;"	f
sqlite3IsNumericAffinity	sqliteInt.h	1719;"	d
sqlite3IsReadOnly	delete.c	/^int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){$/;"	f
sqlite3IsRowid	expr.c	/^int sqlite3IsRowid(const char *z){$/;"	f
sqlite3IsToplevel	sqliteInt.h	3799;"	d
sqlite3IsToplevel	sqliteInt.h	3809;"	d
sqlite3Isalnum	sqliteInt.h	3381;"	d
sqlite3Isalnum	sqliteInt.h	3390;"	d
sqlite3Isalpha	sqliteInt.h	3382;"	d
sqlite3Isalpha	sqliteInt.h	3391;"	d
sqlite3Isdigit	sqliteInt.h	3383;"	d
sqlite3Isdigit	sqliteInt.h	3392;"	d
sqlite3Isquote	sqliteInt.h	3386;"	d
sqlite3Isquote	sqliteInt.h	3395;"	d
sqlite3Isspace	sqliteInt.h	3380;"	d
sqlite3Isspace	sqliteInt.h	3389;"	d
sqlite3Isxdigit	sqliteInt.h	3384;"	d
sqlite3Isxdigit	sqliteInt.h	3393;"	d
sqlite3JoinType	select.c	/^int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){$/;"	f
sqlite3JournalCreate	memjournal.c	/^int sqlite3JournalCreate(sqlite3_file *p){$/;"	f
sqlite3JournalIsInMemory	memjournal.c	/^int sqlite3JournalIsInMemory(sqlite3_file *p){$/;"	f
sqlite3JournalModename	pragma.c	/^const char *sqlite3JournalModename(int eMode){$/;"	f
sqlite3JournalOpen	memjournal.c	/^int sqlite3JournalOpen($/;"	f
sqlite3JournalSize	memjournal.c	/^int sqlite3JournalSize(sqlite3_vfs *pVfs){$/;"	f
sqlite3KeyInfoAlloc	select.c	/^KeyInfo *sqlite3KeyInfoAlloc(sqlite3 *db, int N, int X){$/;"	f
sqlite3KeyInfoIsWriteable	select.c	/^int sqlite3KeyInfoIsWriteable(KeyInfo *p){ return p->nRef==1; }$/;"	f
sqlite3KeyInfoOfIndex	build.c	/^KeyInfo *sqlite3KeyInfoOfIndex(Parse *pParse, Index *pIdx){$/;"	f
sqlite3KeyInfoRef	select.c	/^KeyInfo *sqlite3KeyInfoRef(KeyInfo *p){$/;"	f
sqlite3KeyInfoUnref	select.c	/^void sqlite3KeyInfoUnref(KeyInfo *p){$/;"	f
sqlite3LeaveMutexAndCloseZombie	main.c	/^void sqlite3LeaveMutexAndCloseZombie(sqlite3 *db){$/;"	f
sqlite3LimitWhere	delete.c	/^Expr *sqlite3LimitWhere($/;"	f
sqlite3LoadExtension	loadext.c	/^static int sqlite3LoadExtension($/;"	f	file:
sqlite3LocateCollSeq	build.c	/^CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){$/;"	f
sqlite3LocateTable	build.c	/^Table *sqlite3LocateTable($/;"	f
sqlite3LocateTableItem	build.c	/^Table *sqlite3LocateTableItem($/;"	f
sqlite3LockAndPrepare	prepare.c	/^static int sqlite3LockAndPrepare($/;"	f	file:
sqlite3LogEst	util.c	/^LogEst sqlite3LogEst(u64 x){$/;"	f
sqlite3LogEstAdd	util.c	/^LogEst sqlite3LogEstAdd(LogEst a, LogEst b){$/;"	f
sqlite3LogEstFromDouble	util.c	/^LogEst sqlite3LogEstFromDouble(double x){$/;"	f
sqlite3LogEstToInt	util.c	/^u64 sqlite3LogEstToInt(LogEst x){$/;"	f
sqlite3MPrintf	printf.c	/^char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3Malloc	malloc.c	/^void *sqlite3Malloc(u64 n){$/;"	f
sqlite3MallocAlarm	malloc.c	/^static void sqlite3MallocAlarm(int nByte){$/;"	f	file:
sqlite3MallocEnd	malloc.c	/^void sqlite3MallocEnd(void){$/;"	f
sqlite3MallocInit	malloc.c	/^int sqlite3MallocInit(void){$/;"	f
sqlite3MallocMutex	malloc.c	/^sqlite3_mutex *sqlite3MallocMutex(void){$/;"	f
sqlite3MallocSize	malloc.c	/^int sqlite3MallocSize(void *p){$/;"	f
sqlite3MallocZero	malloc.c	/^void *sqlite3MallocZero(u64 n){$/;"	f
sqlite3MatchSpanName	resolve.c	/^int sqlite3MatchSpanName($/;"	f
sqlite3MaterializeView	delete.c	/^void sqlite3MaterializeView($/;"	f
sqlite3MayAbort	build.c	/^void sqlite3MayAbort(Parse *pParse){$/;"	f
sqlite3MemCompare	vdbeaux.c	/^int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){$/;"	f
sqlite3MemFree	mem0.c	/^static void sqlite3MemFree(void *pPrior){ return; }$/;"	f	file:
sqlite3MemFree	mem1.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:
sqlite3MemFree	mem2.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:
sqlite3MemGetMemsys3	mem3.c	/^const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){$/;"	f
sqlite3MemGetMemsys5	mem5.c	/^const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){$/;"	f
sqlite3MemGetWin32	os_win.c	/^const sqlite3_mem_methods *sqlite3MemGetWin32(void){$/;"	f
sqlite3MemInit	mem0.c	/^static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }$/;"	f	file:
sqlite3MemInit	mem1.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:
sqlite3MemInit	mem2.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:
sqlite3MemJournalOpen	memjournal.c	/^void sqlite3MemJournalOpen(sqlite3_file *pJfd){$/;"	f
sqlite3MemMalloc	mem0.c	/^static void *sqlite3MemMalloc(int nByte){ return 0; }$/;"	f	file:
sqlite3MemMalloc	mem1.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:
sqlite3MemMalloc	mem2.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:
sqlite3MemRealloc	mem0.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }$/;"	f	file:
sqlite3MemRealloc	mem1.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:
sqlite3MemRealloc	mem2.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:
sqlite3MemRoundup	mem0.c	/^static int sqlite3MemRoundup(int n){ return n; }$/;"	f	file:
sqlite3MemRoundup	mem1.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:
sqlite3MemRoundup	mem2.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:
sqlite3MemSetDefault	mem0.c	/^void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemSetDefault	mem1.c	/^void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemSetDefault	mem2.c	/^void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemSetDefault	os_win.c	/^void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemShutdown	mem0.c	/^static void sqlite3MemShutdown(void *NotUsed){ return; }$/;"	f	file:
sqlite3MemShutdown	mem1.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:
sqlite3MemShutdown	mem2.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:
sqlite3MemSize	mem0.c	/^static int sqlite3MemSize(void *pPrior){ return 0; }$/;"	f	file:
sqlite3MemSize	mem1.c	/^static int sqlite3MemSize(void *pPrior){$/;"	f	file:
sqlite3MemSize	mem2.c	/^static int sqlite3MemSize(void *p){$/;"	f	file:
sqlite3MemdebugBacktrace	mem2.c	/^void sqlite3MemdebugBacktrace(int depth){$/;"	f
sqlite3MemdebugBacktraceCallback	mem2.c	/^void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){$/;"	f
sqlite3MemdebugDump	mem2.c	/^void sqlite3MemdebugDump(const char *zFilename){$/;"	f
sqlite3MemdebugHasType	mem2.c	/^int sqlite3MemdebugHasType(void *p, u8 eType){$/;"	f
sqlite3MemdebugHasType	sqliteInt.h	4244;"	d
sqlite3MemdebugMallocCount	mem2.c	/^int sqlite3MemdebugMallocCount(){$/;"	f
sqlite3MemdebugNoType	mem2.c	/^int sqlite3MemdebugNoType(void *p, u8 eType){$/;"	f
sqlite3MemdebugNoType	sqliteInt.h	4245;"	d
sqlite3MemdebugSetType	mem2.c	/^void sqlite3MemdebugSetType(void *p, u8 eType){$/;"	f
sqlite3MemdebugSetType	sqliteInt.h	4243;"	d
sqlite3MemdebugSettitle	mem2.c	/^void sqlite3MemdebugSettitle(const char *zTitle){$/;"	f
sqlite3MemdebugSync	mem2.c	/^void sqlite3MemdebugSync(){$/;"	f
sqlite3MemoryBarrier	mutex_unix.c	/^void sqlite3MemoryBarrier(void){$/;"	f
sqlite3MemoryBarrier	mutex_w32.c	/^void sqlite3MemoryBarrier(void){$/;"	f
sqlite3MemoryBarrier	sqliteInt.h	3474;"	d
sqlite3Memsys3Dump	mem3.c	/^void sqlite3Memsys3Dump(const char *zFilename){$/;"	f
sqlite3Memsys5Dump	mem5.c	/^void sqlite3Memsys5Dump(const char *zFilename){$/;"	f
sqlite3MemsysGetHeader	mem2.c	/^static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){$/;"	f	file:
sqlite3MisuseError	main.c	/^int sqlite3MisuseError(int lineno){$/;"	f
sqlite3MulInt64	util.c	/^int sqlite3MulInt64(i64 *pA, i64 iB){$/;"	f
sqlite3MultiWrite	build.c	/^void sqlite3MultiWrite(Parse *pParse){$/;"	f
sqlite3MutexAlloc	mutex.c	/^sqlite3_mutex *sqlite3MutexAlloc(int id){$/;"	f
sqlite3MutexAlloc	mutex.h	64;"	d
sqlite3MutexEnd	mutex.c	/^int sqlite3MutexEnd(void){$/;"	f
sqlite3MutexEnd	mutex.h	66;"	d
sqlite3MutexInit	mutex.c	/^int sqlite3MutexInit(void){ $/;"	f
sqlite3MutexInit	mutex.h	65;"	d
sqlite3NameFromToken	build.c	/^char *sqlite3NameFromToken(sqlite3 *db, Token *pName){$/;"	f
sqlite3NestedParse	build.c	/^void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3NoTempsInRange	expr.c	/^int sqlite3NoTempsInRange(Parse *pParse, int iFirst, int iLast){$/;"	f
sqlite3NomemError	main.c	/^int sqlite3NomemError(int lineno){$/;"	f
sqlite3NoopMutex	mutex_noop.c	/^sqlite3_mutex_methods const *sqlite3NoopMutex(void){$/;"	f
sqlite3OSTrace	main.c	/^  int sqlite3OSTrace = SQLITE_DEBUG_OS_TRACE;$/;"	v
sqlite3OomClear	malloc.c	/^void sqlite3OomClear(sqlite3 *db){$/;"	f
sqlite3OomFault	malloc.c	/^void sqlite3OomFault(sqlite3 *db){$/;"	f
sqlite3OpcodeProperty	global.c	/^const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;$/;"	v
sqlite3OpenMasterTable	build.c	/^void sqlite3OpenMasterTable(Parse *p, int iDb){$/;"	f
sqlite3OpenTable	insert.c	/^void sqlite3OpenTable($/;"	f
sqlite3OpenTableAndIndices	insert.c	/^int sqlite3OpenTableAndIndices($/;"	f
sqlite3OpenTempDatabase	build.c	/^int sqlite3OpenTempDatabase(Parse *pParse){$/;"	f
sqlite3OsAccess	os.c	/^int sqlite3OsAccess($/;"	f
sqlite3OsCheckReservedLock	os.c	/^int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f
sqlite3OsClose	os.c	/^void sqlite3OsClose(sqlite3_file *pId){$/;"	f
sqlite3OsCloseFree	os.c	/^void sqlite3OsCloseFree(sqlite3_file *pFile){$/;"	f
sqlite3OsCurrentTimeInt64	os.c	/^int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f
sqlite3OsDelete	os.c	/^int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f
sqlite3OsDeviceCharacteristics	os.c	/^int sqlite3OsDeviceCharacteristics(sqlite3_file *id){$/;"	f
sqlite3OsDlClose	os.c	/^void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
sqlite3OsDlError	os.c	/^void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsDlOpen	os.c	/^void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f
sqlite3OsDlSym	os.c	/^void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){$/;"	f
sqlite3OsFetch	os.c	/^int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){$/;"	f
sqlite3OsFileControl	os.c	/^int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileControlHint	os.c	/^void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileSize	os.c	/^int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){$/;"	f
sqlite3OsFullPathname	os.c	/^int sqlite3OsFullPathname($/;"	f
sqlite3OsGetLastError	os.c	/^int sqlite3OsGetLastError(sqlite3_vfs *pVfs){$/;"	f
sqlite3OsInit	os.c	/^int sqlite3OsInit(void){$/;"	f
sqlite3OsLock	os.c	/^int sqlite3OsLock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsOpen	os.c	/^int sqlite3OsOpen($/;"	f
sqlite3OsOpenMalloc	os.c	/^int sqlite3OsOpenMalloc($/;"	f
sqlite3OsRandomness	os.c	/^int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsRead	os.c	/^int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){$/;"	f
sqlite3OsSectorSize	os.c	/^int sqlite3OsSectorSize(sqlite3_file *id){$/;"	f
sqlite3OsShmBarrier	os.c	/^void sqlite3OsShmBarrier(sqlite3_file *id){$/;"	f
sqlite3OsShmLock	os.c	/^int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){$/;"	f
sqlite3OsShmMap	os.c	/^int sqlite3OsShmMap($/;"	f
sqlite3OsShmUnmap	os.c	/^int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){$/;"	f
sqlite3OsSleep	os.c	/^int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f
sqlite3OsSync	os.c	/^int sqlite3OsSync(sqlite3_file *id, int flags){$/;"	f
sqlite3OsTruncate	os.c	/^int sqlite3OsTruncate(sqlite3_file *id, i64 size){$/;"	f
sqlite3OsUnfetch	os.c	/^int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){$/;"	f
sqlite3OsUnlock	os.c	/^int sqlite3OsUnlock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsWrite	os.c	/^int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){$/;"	f
sqlite3PCacheBufferSetup	pcache1.c	/^void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){$/;"	f
sqlite3PCachePercentDirty	pcache.c	/^int sqlite3PCachePercentDirty(PCache *pCache){$/;"	f
sqlite3PCacheSetDefault	pcache1.c	/^void sqlite3PCacheSetDefault(void){$/;"	f
sqlite3PExpr	expr.c	/^Expr *sqlite3PExpr($/;"	f
sqlite3PExprAddSelect	expr.c	/^void sqlite3PExprAddSelect(Parse *pParse, Expr *pExpr, Select *pSelect){$/;"	f
sqlite3PageFree	pcache1.c	/^void sqlite3PageFree(void *p){$/;"	f
sqlite3PageMalloc	pcache1.c	/^void *sqlite3PageMalloc(int sz){$/;"	f
sqlite3PagerAlignReserve	pager.c	/^void sqlite3PagerAlignReserve(Pager *pDest, Pager *pSrc){$/;"	f
sqlite3PagerBackupPtr	pager.c	/^sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){$/;"	f
sqlite3PagerBegin	pager.c	/^int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){$/;"	f
sqlite3PagerCacheStat	pager.c	/^void sqlite3PagerCacheStat(Pager *pPager, int eStat, int reset, int *pnVal){$/;"	f
sqlite3PagerCheckpoint	pager.c	/^int sqlite3PagerCheckpoint(Pager *pPager, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3PagerClearCache	pager.c	/^void sqlite3PagerClearCache(Pager *pPager){$/;"	f
sqlite3PagerClose	pager.c	/^int sqlite3PagerClose(Pager *pPager){$/;"	f
sqlite3PagerCloseWal	pager.c	/^int sqlite3PagerCloseWal(Pager *pPager){$/;"	f
sqlite3PagerCodec	pager.c	/^void *sqlite3PagerCodec(PgHdr *pPg){$/;"	f
sqlite3PagerCommitPhaseOne	pager.c	/^int sqlite3PagerCommitPhaseOne($/;"	f
sqlite3PagerCommitPhaseTwo	pager.c	/^int sqlite3PagerCommitPhaseTwo(Pager *pPager){$/;"	f
sqlite3PagerDataVersion	pager.c	/^u32 sqlite3PagerDataVersion(Pager *pPager){$/;"	f
sqlite3PagerDontWrite	pager.c	/^void sqlite3PagerDontWrite(PgHdr *pPg){$/;"	f
sqlite3PagerExclusiveLock	pager.c	/^int sqlite3PagerExclusiveLock(Pager *pPager){$/;"	f
sqlite3PagerFile	pager.c	/^sqlite3_file *sqlite3PagerFile(Pager *pPager){$/;"	f
sqlite3PagerFilename	pager.c	/^const char *sqlite3PagerFilename(Pager *pPager, int nullIfMemDb){$/;"	f
sqlite3PagerFlush	pager.c	/^int sqlite3PagerFlush(Pager *pPager){$/;"	f
sqlite3PagerGet	pager.c	/^int sqlite3PagerGet($/;"	f
sqlite3PagerGetCodec	pager.c	/^void *sqlite3PagerGetCodec(Pager *pPager){$/;"	f
sqlite3PagerGetData	pager.c	/^void *sqlite3PagerGetData(DbPage *pPg){$/;"	f
sqlite3PagerGetExtra	pager.c	/^void *sqlite3PagerGetExtra(DbPage *pPg){$/;"	f
sqlite3PagerGetJournalMode	pager.c	/^int sqlite3PagerGetJournalMode(Pager *pPager){$/;"	f
sqlite3PagerIsMemdb	pager.c	/^int sqlite3PagerIsMemdb(Pager *pPager){$/;"	f
sqlite3PagerIsreadonly	pager.c	/^u8 sqlite3PagerIsreadonly(Pager *pPager){$/;"	f
sqlite3PagerIswriteable	pager.c	/^int sqlite3PagerIswriteable(DbPage *pPg){$/;"	f
sqlite3PagerJournalSizeLimit	pager.c	/^i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){$/;"	f
sqlite3PagerJournalname	pager.c	/^const char *sqlite3PagerJournalname(Pager *pPager){$/;"	f
sqlite3PagerJrnlFile	pager.c	/^sqlite3_file *sqlite3PagerJrnlFile(Pager *pPager){$/;"	f
sqlite3PagerLockingMode	pager.c	/^int sqlite3PagerLockingMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerLookup	pager.c	/^DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){$/;"	f
sqlite3PagerMaxPageCount	pager.c	/^int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerMemUsed	pager.c	/^int sqlite3PagerMemUsed(Pager *pPager){$/;"	f
sqlite3PagerMovepage	pager.c	/^int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){$/;"	f
sqlite3PagerOkToChangeJournalMode	pager.c	/^int sqlite3PagerOkToChangeJournalMode(Pager *pPager){$/;"	f
sqlite3PagerOpen	pager.c	/^int sqlite3PagerOpen($/;"	f
sqlite3PagerOpenSavepoint	pager.c	/^int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f
sqlite3PagerOpenWal	pager.c	/^int sqlite3PagerOpenWal($/;"	f
sqlite3PagerPageRefcount	pager.c	/^int sqlite3PagerPageRefcount(DbPage *pPage){$/;"	f
sqlite3PagerPagecount	pager.c	/^void sqlite3PagerPagecount(Pager *pPager, int *pnPage){$/;"	f
sqlite3PagerPagenumber	pager.c	/^Pgno sqlite3PagerPagenumber(DbPage *pPg){$/;"	f
sqlite3PagerReadFileheader	pager.c	/^int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){$/;"	f
sqlite3PagerRef	pager.c	/^void sqlite3PagerRef(DbPage *pPg){$/;"	f
sqlite3PagerRefcount	pager.c	/^int sqlite3PagerRefcount(Pager *pPager){$/;"	f
sqlite3PagerRekey	pager.c	/^void sqlite3PagerRekey(DbPage *pPg, Pgno iNew, u16 flags){$/;"	f
sqlite3PagerRollback	pager.c	/^int sqlite3PagerRollback(Pager *pPager){$/;"	f
sqlite3PagerSavepoint	pager.c	/^int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){$/;"	f
sqlite3PagerSetBusyhandler	pager.c	/^void sqlite3PagerSetBusyhandler($/;"	f
sqlite3PagerSetCachesize	pager.c	/^void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSetCodec	pager.c	/^void sqlite3PagerSetCodec($/;"	f
sqlite3PagerSetFlags	pager.c	/^void sqlite3PagerSetFlags($/;"	f
sqlite3PagerSetJournalMode	pager.c	/^int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerSetMmapLimit	pager.c	/^void sqlite3PagerSetMmapLimit(Pager *pPager, sqlite3_int64 szMmap){$/;"	f
sqlite3PagerSetPagesize	pager.c	/^int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){$/;"	f
sqlite3PagerSetSpillsize	pager.c	/^int sqlite3PagerSetSpillsize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSharedLock	pager.c	/^int sqlite3PagerSharedLock(Pager *pPager){$/;"	f
sqlite3PagerShrink	pager.c	/^void sqlite3PagerShrink(Pager *pPager){$/;"	f
sqlite3PagerSnapshotGet	pager.c	/^int sqlite3PagerSnapshotGet(Pager *pPager, sqlite3_snapshot **ppSnapshot){$/;"	f
sqlite3PagerSnapshotOpen	pager.c	/^int sqlite3PagerSnapshotOpen(Pager *pPager, sqlite3_snapshot *pSnapshot){$/;"	f
sqlite3PagerState	pager.c	/^int sqlite3PagerState(Pager *pPager){$/;"	f
sqlite3PagerStats	pager.c	/^int *sqlite3PagerStats(Pager *pPager){$/;"	f
sqlite3PagerSync	pager.c	/^int sqlite3PagerSync(Pager *pPager, const char *zMaster){$/;"	f
sqlite3PagerTempSpace	pager.c	/^void *sqlite3PagerTempSpace(Pager *pPager){$/;"	f
sqlite3PagerTrace	pager.c	/^int sqlite3PagerTrace=1;  \/* True to enable tracing *\/$/;"	v
sqlite3PagerTruncateImage	pager.c	/^void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){$/;"	f
sqlite3PagerUnref	pager.c	/^void sqlite3PagerUnref(DbPage *pPg){$/;"	f
sqlite3PagerUnrefNotNull	pager.c	/^void sqlite3PagerUnrefNotNull(DbPage *pPg){$/;"	f
sqlite3PagerVfs	pager.c	/^sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){$/;"	f
sqlite3PagerWalCallback	pager.c	/^int sqlite3PagerWalCallback(Pager *pPager){$/;"	f
sqlite3PagerWalFramesize	pager.c	/^int sqlite3PagerWalFramesize(Pager *pPager){$/;"	f
sqlite3PagerWalSupported	pager.c	/^int sqlite3PagerWalSupported(Pager *pPager){$/;"	f
sqlite3PagerWrite	pager.c	/^int sqlite3PagerWrite(PgHdr *pPg){$/;"	f
sqlite3ParseToplevel	sqliteInt.h	3798;"	d
sqlite3ParseToplevel	sqliteInt.h	3808;"	d
sqlite3ParseUri	main.c	/^int sqlite3ParseUri($/;"	f
sqlite3ParserReset	prepare.c	/^void sqlite3ParserReset(Parse *pParse){$/;"	f
sqlite3Pcache1Mutex	pcache1.c	/^sqlite3_mutex *sqlite3Pcache1Mutex(void){$/;"	f
sqlite3PcacheCleanAll	pcache.c	/^void sqlite3PcacheCleanAll(PCache *pCache){$/;"	f
sqlite3PcacheClear	pcache.c	/^void sqlite3PcacheClear(PCache *pCache){$/;"	f
sqlite3PcacheClearSyncFlags	pcache.c	/^void sqlite3PcacheClearSyncFlags(PCache *pCache){$/;"	f
sqlite3PcacheClearWritable	pcache.c	/^void sqlite3PcacheClearWritable(PCache *pCache){$/;"	f
sqlite3PcacheClose	pcache.c	/^void sqlite3PcacheClose(PCache *pCache){$/;"	f
sqlite3PcacheDirtyList	pcache.c	/^PgHdr *sqlite3PcacheDirtyList(PCache *pCache){$/;"	f
sqlite3PcacheDrop	pcache.c	/^void sqlite3PcacheDrop(PgHdr *p){$/;"	f
sqlite3PcacheFetch	pcache.c	/^sqlite3_pcache_page *sqlite3PcacheFetch($/;"	f
sqlite3PcacheFetchFinish	pcache.c	/^PgHdr *sqlite3PcacheFetchFinish($/;"	f
sqlite3PcacheFetchStress	pcache.c	/^int sqlite3PcacheFetchStress($/;"	f
sqlite3PcacheGetCachesize	pcache.c	/^int sqlite3PcacheGetCachesize(PCache *pCache){$/;"	f
sqlite3PcacheInitialize	pcache.c	/^int sqlite3PcacheInitialize(void){$/;"	f
sqlite3PcacheIterateDirty	pcache.c	/^void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){$/;"	f
sqlite3PcacheMakeClean	pcache.c	/^void sqlite3PcacheMakeClean(PgHdr *p){$/;"	f
sqlite3PcacheMakeDirty	pcache.c	/^void sqlite3PcacheMakeDirty(PgHdr *p){$/;"	f
sqlite3PcacheMove	pcache.c	/^void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){$/;"	f
sqlite3PcacheMxDump	pcache.c	/^  int sqlite3PcacheMxDump = 9999;   \/* Max cache entries for pcacheDump() *\/$/;"	v
sqlite3PcacheOpen	pcache.c	/^int sqlite3PcacheOpen($/;"	f
sqlite3PcachePageRefcount	pcache.c	/^int sqlite3PcachePageRefcount(PgHdr *p){$/;"	f
sqlite3PcachePageSanity	pcache.c	/^int sqlite3PcachePageSanity(PgHdr *pPg){$/;"	f
sqlite3PcachePagecount	pcache.c	/^int sqlite3PcachePagecount(PCache *pCache){$/;"	f
sqlite3PcacheRef	pcache.c	/^void sqlite3PcacheRef(PgHdr *p){$/;"	f
sqlite3PcacheRefCount	pcache.c	/^int sqlite3PcacheRefCount(PCache *pCache){$/;"	f
sqlite3PcacheRelease	pcache.c	/^void SQLITE_NOINLINE sqlite3PcacheRelease(PgHdr *p){$/;"	f
sqlite3PcacheReleaseMemory	pcache1.c	/^int sqlite3PcacheReleaseMemory(int nReq){$/;"	f
sqlite3PcacheSetCachesize	pcache.c	/^void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){$/;"	f
sqlite3PcacheSetPageSize	pcache.c	/^int sqlite3PcacheSetPageSize(PCache *pCache, int szPage){$/;"	f
sqlite3PcacheSetSpillsize	pcache.c	/^int sqlite3PcacheSetSpillsize(PCache *p, int mxPage){$/;"	f
sqlite3PcacheShrink	pcache.c	/^void sqlite3PcacheShrink(PCache *pCache){$/;"	f
sqlite3PcacheShutdown	pcache.c	/^void sqlite3PcacheShutdown(void){$/;"	f
sqlite3PcacheSize	pcache.c	/^int sqlite3PcacheSize(void){ return sizeof(PCache); }$/;"	f
sqlite3PcacheStats	pcache1.c	/^void sqlite3PcacheStats($/;"	f
sqlite3PcacheTrace	pcache.c	/^  int sqlite3PcacheTrace = 2;       \/* 0: off  1: simple  2: cache dumps *\/$/;"	v
sqlite3PcacheTruncate	pcache.c	/^void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){$/;"	f
sqlite3PendingByte	global.c	/^int sqlite3PendingByte = 0x40000000;$/;"	v
sqlite3Pragma	pragma.c	/^void sqlite3Pragma($/;"	f
sqlite3Prepare	prepare.c	/^static int sqlite3Prepare($/;"	f	file:
sqlite3Prepare16	prepare.c	/^static int sqlite3Prepare16($/;"	f	file:
sqlite3PrimaryKeyIndex	build.c	/^Index *sqlite3PrimaryKeyIndex(Table *pTab){$/;"	f
sqlite3Prng	random.c	/^} sqlite3Prng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3PrngRestoreState	random.c	/^void sqlite3PrngRestoreState(void){$/;"	f
sqlite3PrngSaveState	random.c	/^void sqlite3PrngSaveState(void){$/;"	f
sqlite3PrngType	random.c	/^static SQLITE_WSD struct sqlite3PrngType {$/;"	s	file:
sqlite3Put4byte	util.c	/^void sqlite3Put4byte(unsigned char *p, u32 v){$/;"	f
sqlite3PutVarint	util.c	/^int sqlite3PutVarint(unsigned char *p, u64 v){$/;"	f
sqlite3ReadSchema	prepare.c	/^int sqlite3ReadSchema(Parse *pParse){$/;"	f
sqlite3Realloc	malloc.c	/^void *sqlite3Realloc(void *pOld, u64 nBytes){$/;"	f
sqlite3RefillIndex	build.c	/^static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){$/;"	f	file:
sqlite3RegisterBuiltinFunctions	func.c	/^void sqlite3RegisterBuiltinFunctions(void){$/;"	f
sqlite3RegisterDateTimeFunctions	date.c	/^void sqlite3RegisterDateTimeFunctions(void){$/;"	f
sqlite3RegisterLikeFunctions	func.c	/^void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){$/;"	f
sqlite3RegisterPerConnectionBuiltinFunctions	func.c	/^void sqlite3RegisterPerConnectionBuiltinFunctions(sqlite3 *db){$/;"	f
sqlite3Reindex	build.c	/^void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ReleaseTempRange	expr.c	/^void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ReleaseTempReg	expr.c	/^void sqlite3ReleaseTempReg(Parse *pParse, int iReg){$/;"	f
sqlite3Reprepare	prepare.c	/^int sqlite3Reprepare(Vdbe *p){$/;"	f
sqlite3ResetAllSchemasOfConnection	build.c	/^void sqlite3ResetAllSchemasOfConnection(sqlite3 *db){$/;"	f
sqlite3ResetOneSchema	build.c	/^void sqlite3ResetOneSchema(sqlite3 *db, int iDb){$/;"	f
sqlite3ResolveExprListNames	resolve.c	/^int sqlite3ResolveExprListNames( $/;"	f
sqlite3ResolveExprNames	resolve.c	/^int sqlite3ResolveExprNames( $/;"	f
sqlite3ResolveOrderGroupBy	resolve.c	/^int sqlite3ResolveOrderGroupBy($/;"	f
sqlite3ResolvePartIdxLabel	delete.c	/^void sqlite3ResolvePartIdxLabel(Parse *pParse, int iLabel){$/;"	f
sqlite3ResolveSelectNames	resolve.c	/^void sqlite3ResolveSelectNames($/;"	f
sqlite3ResolveSelfReference	resolve.c	/^void sqlite3ResolveSelfReference($/;"	f
sqlite3ResultSetOfSelect	select.c	/^Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){$/;"	f
sqlite3RollbackAll	main.c	/^void sqlite3RollbackAll(sqlite3 *db, int tripCode){$/;"	f
sqlite3RollbackTransaction	build.c	/^void sqlite3RollbackTransaction(Parse *pParse){$/;"	f
sqlite3RootPageMoved	build.c	/^void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){$/;"	f
sqlite3RowSetClear	rowset.c	/^void sqlite3RowSetClear(RowSet *p){$/;"	f
sqlite3RowSetInit	rowset.c	/^RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){$/;"	f
sqlite3RowSetInsert	rowset.c	/^void sqlite3RowSetInsert(RowSet *p, i64 rowid){$/;"	f
sqlite3RowSetNext	rowset.c	/^int sqlite3RowSetNext(RowSet *p, i64 *pRowid){$/;"	f
sqlite3RowSetTest	rowset.c	/^int sqlite3RowSetTest(RowSet *pRowSet, int iBatch, sqlite3_int64 iRowid){$/;"	f
sqlite3RowidConstraint	build.c	/^void sqlite3RowidConstraint($/;"	f
sqlite3RunParser	tokenize.c	/^int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){$/;"	f
sqlite3RunVacuum	vacuum.c	/^int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db){$/;"	f
sqlite3SafetyCheckOk	util.c	/^int sqlite3SafetyCheckOk(sqlite3 *db){$/;"	f
sqlite3SafetyCheckSickOrOk	util.c	/^int sqlite3SafetyCheckSickOrOk(sqlite3 *db){$/;"	f
sqlite3SavedPrng	random.c	/^static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3Savepoint	build.c	/^void sqlite3Savepoint(Parse *pParse, int op, Token *pName){$/;"	f
sqlite3SchemaClear	callback.c	/^void sqlite3SchemaClear(void *p){$/;"	f
sqlite3SchemaGet	callback.c	/^Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){$/;"	f
sqlite3SchemaMutexHeld	btmutex.c	/^int sqlite3SchemaMutexHeld(sqlite3 *db, int iDb, Schema *pSchema){$/;"	f
sqlite3SchemaMutexHeld	btree.h	358;"	d
sqlite3SchemaToIndex	prepare.c	/^int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){$/;"	f
sqlite3ScratchFree	malloc.c	/^void sqlite3ScratchFree(void *p){$/;"	f
sqlite3ScratchMalloc	malloc.c	/^void *sqlite3ScratchMalloc(int n){$/;"	f
sqlite3SectorSize	pager.c	/^int sqlite3SectorSize(sqlite3_file *pFile){$/;"	f
sqlite3Select	select.c	/^int sqlite3Select($/;"	f
sqlite3SelectAddColumnTypeAndCollation	select.c	/^void sqlite3SelectAddColumnTypeAndCollation($/;"	f
sqlite3SelectAddTypeInfo	select.c	/^static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectDelete	select.c	/^void sqlite3SelectDelete(sqlite3 *db, Select *p){$/;"	f
sqlite3SelectDestInit	select.c	/^void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){$/;"	f
sqlite3SelectDup	expr.c	/^Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){$/;"	f
sqlite3SelectExpand	select.c	/^static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectExprHeight	expr.c	/^int sqlite3SelectExprHeight(Select *p){$/;"	f
sqlite3SelectExprHeight	sqliteInt.h	4175;"	d
sqlite3SelectNew	select.c	/^Select *sqlite3SelectNew($/;"	f
sqlite3SelectPrep	select.c	/^void sqlite3SelectPrep($/;"	f
sqlite3SelectSetName	select.c	/^void sqlite3SelectSetName(Select *p, const char *zName){$/;"	f
sqlite3SelectSetName	sqliteInt.h	3762;"	d
sqlite3SelectTrace	select.c	/^\/***\/ int sqlite3SelectTrace = 0;$/;"	v
sqlite3SelectWrongNumTermsError	select.c	/^void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p){$/;"	f
sqlite3SetHasNullFlag	expr.c	/^static void sqlite3SetHasNullFlag(Vdbe *v, int iCur, int regHasNull){$/;"	f	file:
sqlite3SetString	malloc.c	/^void sqlite3SetString(char **pz, sqlite3 *db, const char *zNew){$/;"	f
sqlite3SharedCacheList	btree.c	/^BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v
sqlite3SharedCacheList	btree.c	/^static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v	file:
sqlite3SkipAccumulatorLoad	func.c	/^static void sqlite3SkipAccumulatorLoad(sqlite3_context *context){$/;"	f	file:
sqlite3SmallTypeSizes	vdbeaux.c	/^static const u8 sqlite3SmallTypeSizes[] = {$/;"	v	file:
sqlite3SrcListAppend	build.c	/^SrcList *sqlite3SrcListAppend($/;"	f
sqlite3SrcListAppendFromTerm	build.c	/^SrcList *sqlite3SrcListAppendFromTerm($/;"	f
sqlite3SrcListAssignCursors	build.c	/^void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){$/;"	f
sqlite3SrcListDelete	build.c	/^void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){$/;"	f
sqlite3SrcListDup	expr.c	/^SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){$/;"	f
sqlite3SrcListEnlarge	build.c	/^SrcList *sqlite3SrcListEnlarge($/;"	f
sqlite3SrcListFuncArgs	build.c	/^void sqlite3SrcListFuncArgs(Parse *pParse, SrcList *p, ExprList *pList){$/;"	f
sqlite3SrcListIndexedBy	build.c	/^void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){$/;"	f
sqlite3SrcListLookup	delete.c	/^Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3SrcListShiftJoinType	build.c	/^void sqlite3SrcListShiftJoinType(SrcList *p){$/;"	f
sqlite3StackAllocRaw	sqliteInt.h	3443;"	d
sqlite3StackAllocRaw	sqliteInt.h	3447;"	d
sqlite3StackAllocZero	sqliteInt.h	3444;"	d
sqlite3StackAllocZero	sqliteInt.h	3448;"	d
sqlite3StackDepth	test1.c	/^u64 sqlite3StackDepth(void){$/;"	f
sqlite3StackFree	sqliteInt.h	3445;"	d
sqlite3StackFree	sqliteInt.h	3449;"	d
sqlite3StartTable	build.c	/^void sqlite3StartTable($/;"	f
sqlite3Stat	status.c	/^} sqlite3Stat = { {0,}, {0,} };$/;"	v	typeref:struct:sqlite3StatType	file:
sqlite3Stat4Column	vdbemem.c	/^int sqlite3Stat4Column($/;"	f
sqlite3Stat4ProbeFree	vdbemem.c	/^void sqlite3Stat4ProbeFree(UnpackedRecord *pRec){$/;"	f
sqlite3Stat4ProbeSetValue	vdbemem.c	/^int sqlite3Stat4ProbeSetValue($/;"	f
sqlite3Stat4ValueFromExpr	vdbemem.c	/^int sqlite3Stat4ValueFromExpr($/;"	f
sqlite3StatType	status.c	/^static SQLITE_WSD struct sqlite3StatType {$/;"	s	file:
sqlite3StatType	status.c	/^typedef struct sqlite3StatType sqlite3StatType;$/;"	t	typeref:struct:sqlite3StatType	file:
sqlite3StatValueType	status.c	/^typedef sqlite3_int64 sqlite3StatValueType;$/;"	t	file:
sqlite3StatValueType	status.c	/^typedef u32 sqlite3StatValueType;$/;"	t	file:
sqlite3StatusDown	status.c	/^void sqlite3StatusDown(int op, int N){$/;"	f
sqlite3StatusHighwater	status.c	/^void sqlite3StatusHighwater(int op, int X){$/;"	f
sqlite3StatusUp	status.c	/^void sqlite3StatusUp(int op, int N){$/;"	f
sqlite3StatusValue	status.c	/^sqlite3_int64 sqlite3StatusValue(int op){$/;"	f
sqlite3Step	vdbeapi.c	/^static int sqlite3Step(Vdbe *p){$/;"	f	file:
sqlite3StmtCurrentTime	vdbeapi.c	/^sqlite3_int64 sqlite3StmtCurrentTime(sqlite3_context *p){$/;"	f
sqlite3StrAccumAppend	printf.c	/^void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){$/;"	f
sqlite3StrAccumAppendAll	printf.c	/^void sqlite3StrAccumAppendAll(StrAccum *p, const char *z){$/;"	f
sqlite3StrAccumEnlarge	printf.c	/^static int sqlite3StrAccumEnlarge(StrAccum *p, int N){$/;"	f	file:
sqlite3StrAccumFinish	printf.c	/^char *sqlite3StrAccumFinish(StrAccum *p){$/;"	f
sqlite3StrAccumInit	printf.c	/^void sqlite3StrAccumInit(StrAccum *p, sqlite3 *db, char *zBase, int n, int mx){$/;"	f
sqlite3StrAccumReset	printf.c	/^void sqlite3StrAccumReset(StrAccum *p){$/;"	f
sqlite3StrBINARY	global.c	/^const char sqlite3StrBINARY[] = "BINARY";$/;"	v
sqlite3StrICmp	util.c	/^int sqlite3StrICmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3StrNICmp	sqliteInt.h	3407;"	d
sqlite3StringToId	build.c	/^static void sqlite3StringToId(Expr *p){$/;"	f	file:
sqlite3Strlen30	util.c	/^int sqlite3Strlen30(const char *z){$/;"	f
sqlite3SubInt64	util.c	/^int sqlite3SubInt64(i64 *pA, i64 iB){$/;"	f
sqlite3SystemError	util.c	/^void sqlite3SystemError(sqlite3 *db, int rc){$/;"	f
sqlite3TableAffinity	insert.c	/^void sqlite3TableAffinity(Vdbe *v, Table *pTab, int iReg){$/;"	f
sqlite3TableLock	build.c	/^void sqlite3TableLock($/;"	f
sqlite3TableLock	sqliteInt.h	4029;"	d
sqlite3TempInMemory	main.c	/^int sqlite3TempInMemory(const sqlite3 *db){$/;"	f
sqlite3TestBinToHex	test_hexio.c	/^void sqlite3TestBinToHex(unsigned char *zBuf, int N){$/;"	f
sqlite3TestErrCode	test1.c	/^int sqlite3TestErrCode(Tcl_Interp *interp, sqlite3 *db, int rc){$/;"	f
sqlite3TestHexToBin	test_hexio.c	/^int sqlite3TestHexToBin(const unsigned char *zIn, int N, unsigned char *aOut){$/;"	f
sqlite3TestMakePointerStr	test1.c	/^int sqlite3TestMakePointerStr(Tcl_Interp *interp, char *zPtr, void *p){$/;"	f
sqlite3TestTextToPtr	test1.c	/^void *sqlite3TestTextToPtr(const char *z){$/;"	f
sqlite3ThreadCreate	threads.c	/^int sqlite3ThreadCreate($/;"	f
sqlite3ThreadJoin	threads.c	/^int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){$/;"	f
sqlite3ThreadProc	threads.c	/^static unsigned __stdcall sqlite3ThreadProc($/;"	f	file:
sqlite3TokenInit	util.c	/^void sqlite3TokenInit(Token *p, char *z){$/;"	f
sqlite3Tolower	sqliteInt.h	3385;"	d
sqlite3Tolower	sqliteInt.h	3394;"	d
sqlite3Toupper	sqliteInt.h	3379;"	d
sqlite3Toupper	sqliteInt.h	3388;"	d
sqlite3TransferBindings	vdbeapi.c	/^int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3TreeViewExpr	treeview.c	/^void sqlite3TreeViewExpr(TreeView *pView, const Expr *pExpr, u8 moreToFollow){$/;"	f
sqlite3TreeViewExprList	treeview.c	/^void sqlite3TreeViewExprList($/;"	f
sqlite3TreeViewItem	treeview.c	/^static void sqlite3TreeViewItem(TreeView *p, const char *zLabel,u8 moreFollows){$/;"	f	file:
sqlite3TreeViewLine	treeview.c	/^static void sqlite3TreeViewLine(TreeView *p, const char *zFormat, ...){$/;"	f	file:
sqlite3TreeViewPop	treeview.c	/^static void sqlite3TreeViewPop(TreeView *p){$/;"	f	file:
sqlite3TreeViewPush	treeview.c	/^static TreeView *sqlite3TreeViewPush(TreeView *p, u8 moreToFollow){$/;"	f	file:
sqlite3TreeViewSelect	treeview.c	/^void sqlite3TreeViewSelect(TreeView *pView, const Select *p, u8 moreToFollow){$/;"	f
sqlite3TreeViewWith	treeview.c	/^void sqlite3TreeViewWith(TreeView *pView, const With *pWith, u8 moreToFollow){$/;"	f
sqlite3TriggerColmask	sqliteInt.h	3810;"	d
sqlite3TriggerColmask	trigger.c	/^u32 sqlite3TriggerColmask($/;"	f
sqlite3TriggerDeleteStep	trigger.c	/^TriggerStep *sqlite3TriggerDeleteStep($/;"	f
sqlite3TriggerInsertStep	trigger.c	/^TriggerStep *sqlite3TriggerInsertStep($/;"	f
sqlite3TriggerList	sqliteInt.h	3807;"	d
sqlite3TriggerList	trigger.c	/^Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){$/;"	f
sqlite3TriggerSelectStep	trigger.c	/^TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){$/;"	f
sqlite3TriggerUpdateStep	trigger.c	/^TriggerStep *sqlite3TriggerUpdateStep($/;"	f
sqlite3TriggersExist	sqliteInt.h	3801;"	d
sqlite3TriggersExist	trigger.c	/^Trigger *sqlite3TriggersExist($/;"	f
sqlite3TwoPartName	build.c	/^int sqlite3TwoPartName($/;"	f
sqlite3UniqueConstraint	build.c	/^void sqlite3UniqueConstraint($/;"	f
sqlite3UnlinkAndDeleteIndex	build.c	/^void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){$/;"	f
sqlite3UnlinkAndDeleteTable	build.c	/^void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	sqliteInt.h	3804;"	d
sqlite3UnlinkAndDeleteTrigger	trigger.c	/^void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){$/;"	f
sqlite3Update	update.c	/^void sqlite3Update($/;"	f
sqlite3UpperToLower	global.c	/^const unsigned char sqlite3UpperToLower[] = {$/;"	v
sqlite3UserAuthTable	build.c	/^int sqlite3UserAuthTable(const char *zTable){$/;"	f
sqlite3Utf16ByteLen	utf.c	/^int sqlite3Utf16ByteLen(const void *zIn, int nChar){$/;"	f
sqlite3Utf16to8	utf.c	/^char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){$/;"	f
sqlite3Utf8CharLen	utf.c	/^int sqlite3Utf8CharLen(const char *zIn, int nByte){$/;"	f
sqlite3Utf8Read	func.c	584;"	d	file:
sqlite3Utf8Read	utf.c	/^u32 sqlite3Utf8Read($/;"	f
sqlite3Utf8To8	utf.c	/^int sqlite3Utf8To8(unsigned char *zIn){$/;"	f
sqlite3Utf8Trans1	utf.c	/^static const unsigned char sqlite3Utf8Trans1[] = {$/;"	v	file:
sqlite3UtfSelfTest	utf.c	/^void sqlite3UtfSelfTest(void){$/;"	f
sqlite3VMPrintf	printf.c	/^char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){$/;"	f
sqlite3VXPrintf	printf.c	/^void sqlite3VXPrintf($/;"	f
sqlite3Vacuum	vacuum.c	/^void sqlite3Vacuum(Parse *pParse){$/;"	f
sqlite3ValueApplyAffinity	vdbe.c	/^void sqlite3ValueApplyAffinity($/;"	f
sqlite3ValueBytes	vdbemem.c	/^int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){$/;"	f
sqlite3ValueFree	vdbemem.c	/^void sqlite3ValueFree(sqlite3_value *v){$/;"	f
sqlite3ValueFromExpr	vdbemem.c	/^int sqlite3ValueFromExpr($/;"	f
sqlite3ValueNew	vdbemem.c	/^sqlite3_value *sqlite3ValueNew(sqlite3 *db){$/;"	f
sqlite3ValueSetNull	vdbemem.c	/^void sqlite3ValueSetNull(sqlite3_value *p){$/;"	f
sqlite3ValueSetStr	vdbemem.c	/^void sqlite3ValueSetStr($/;"	f
sqlite3ValueText	vdbemem.c	/^const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){$/;"	f
sqlite3VarintLen	util.c	/^int sqlite3VarintLen(u64 v){$/;"	f
sqlite3VdbeAddOp0	vdbeaux.c	/^int sqlite3VdbeAddOp0(Vdbe *p, int op){$/;"	f
sqlite3VdbeAddOp1	vdbeaux.c	/^int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){$/;"	f
sqlite3VdbeAddOp2	vdbeaux.c	/^int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){$/;"	f
sqlite3VdbeAddOp3	vdbeaux.c	/^int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f
sqlite3VdbeAddOp4	vdbeaux.c	/^int sqlite3VdbeAddOp4($/;"	f
sqlite3VdbeAddOp4Dup8	vdbeaux.c	/^int sqlite3VdbeAddOp4Dup8($/;"	f
sqlite3VdbeAddOp4Int	vdbeaux.c	/^int sqlite3VdbeAddOp4Int($/;"	f
sqlite3VdbeAddOpList	vdbeaux.c	/^VdbeOp *sqlite3VdbeAddOpList($/;"	f
sqlite3VdbeAddParseSchemaOp	vdbeaux.c	/^void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere){$/;"	f
sqlite3VdbeAllocUnpackedRecord	vdbeaux.c	/^UnpackedRecord *sqlite3VdbeAllocUnpackedRecord($/;"	f
sqlite3VdbeAssertMayAbort	vdbeaux.c	/^int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){$/;"	f
sqlite3VdbeChangeEncoding	vdbemem.c	/^int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){$/;"	f
sqlite3VdbeChangeOpcode	vdbeaux.c	/^void sqlite3VdbeChangeOpcode(Vdbe *p, u32 addr, u8 iNewOpcode){$/;"	f
sqlite3VdbeChangeP1	vdbeaux.c	/^void sqlite3VdbeChangeP1(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP2	vdbeaux.c	/^void sqlite3VdbeChangeP2(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP3	vdbeaux.c	/^void sqlite3VdbeChangeP3(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP4	vdbeaux.c	/^void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){$/;"	f
sqlite3VdbeChangeP5	vdbeaux.c	/^void sqlite3VdbeChangeP5(Vdbe *p, u8 p5){$/;"	f
sqlite3VdbeChangeToNoop	vdbeaux.c	/^int sqlite3VdbeChangeToNoop(Vdbe *p, int addr){$/;"	f
sqlite3VdbeCheckFk	vdbeInt.h	543;"	d
sqlite3VdbeCheckFk	vdbeaux.c	/^int sqlite3VdbeCheckFk(Vdbe *p, int deferred){$/;"	f
sqlite3VdbeCheckMemInvariants	vdbemem.c	/^int sqlite3VdbeCheckMemInvariants(Mem *p){$/;"	f
sqlite3VdbeClearObject	vdbeaux.c	/^void sqlite3VdbeClearObject(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VdbeCloseStatement	vdbeaux.c	/^int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){$/;"	f
sqlite3VdbeComment	vdbeaux.c	/^void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeCountChanges	vdbeaux.c	/^void sqlite3VdbeCountChanges(Vdbe *v){$/;"	f
sqlite3VdbeCreate	vdbeaux.c	/^Vdbe *sqlite3VdbeCreate(Parse *pParse){$/;"	f
sqlite3VdbeCurrentAddr	vdbeaux.c	/^int sqlite3VdbeCurrentAddr(Vdbe *p){$/;"	f
sqlite3VdbeCursorMoveto	vdbeaux.c	/^int sqlite3VdbeCursorMoveto(VdbeCursor **pp, int *piCol){$/;"	f
sqlite3VdbeCursorRestore	vdbeaux.c	/^int sqlite3VdbeCursorRestore(VdbeCursor *p){$/;"	f
sqlite3VdbeDb	vdbeaux.c	/^sqlite3 *sqlite3VdbeDb(Vdbe *v){$/;"	f
sqlite3VdbeDelete	vdbeaux.c	/^void sqlite3VdbeDelete(Vdbe *p){$/;"	f
sqlite3VdbeDeleteAuxData	vdbeaux.c	/^void sqlite3VdbeDeleteAuxData(sqlite3 *db, AuxData **pp, int iOp, int mask){$/;"	f
sqlite3VdbeDeletePriorOpcode	vdbeaux.c	/^int sqlite3VdbeDeletePriorOpcode(Vdbe *p, u8 op){$/;"	f
sqlite3VdbeEndCoroutine	vdbeaux.c	/^void sqlite3VdbeEndCoroutine(Vdbe *v, int regYield){$/;"	f
sqlite3VdbeEnter	vdbeInt.h	526;"	d
sqlite3VdbeEnter	vdbeaux.c	/^void sqlite3VdbeEnter(Vdbe *p){$/;"	f
sqlite3VdbeError	vdbeaux.c	/^void sqlite3VdbeError(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeExec	vdbe.c	/^int sqlite3VdbeExec($/;"	f
sqlite3VdbeExpandSql	vdbetrace.c	/^char *sqlite3VdbeExpandSql($/;"	f
sqlite3VdbeFinalize	vdbeaux.c	/^int sqlite3VdbeFinalize(Vdbe *p){$/;"	f
sqlite3VdbeFindCompare	vdbeaux.c	/^RecordCompare sqlite3VdbeFindCompare(UnpackedRecord *p){$/;"	f
sqlite3VdbeFrameDelete	vdbeaux.c	/^void sqlite3VdbeFrameDelete(VdbeFrame *p){$/;"	f
sqlite3VdbeFrameRestore	vdbeaux.c	/^int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){$/;"	f
sqlite3VdbeFreeCursor	vdbeaux.c	/^void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){$/;"	f
sqlite3VdbeGetBoundValue	vdbeaux.c	/^sqlite3_value *sqlite3VdbeGetBoundValue(Vdbe *v, int iVar, u8 aff){$/;"	f
sqlite3VdbeGetOp	vdbeaux.c	/^VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){$/;"	f
sqlite3VdbeGoto	vdbeaux.c	/^int sqlite3VdbeGoto(Vdbe *p, int iDest){$/;"	f
sqlite3VdbeHalt	vdbeaux.c	/^int sqlite3VdbeHalt(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	sqliteInt.h	4207;"	d
sqlite3VdbeIOTraceSql	vdbeaux.c	/^void sqlite3VdbeIOTraceSql(Vdbe *p){$/;"	f
sqlite3VdbeIdxKeyCompare	vdbeaux.c	/^int sqlite3VdbeIdxKeyCompare($/;"	f
sqlite3VdbeIdxRowid	vdbeaux.c	/^int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){$/;"	f
sqlite3VdbeIntValue	vdbemem.c	/^i64 sqlite3VdbeIntValue(Mem *pMem){$/;"	f
sqlite3VdbeIntegerAffinity	vdbemem.c	/^void sqlite3VdbeIntegerAffinity(Mem *pMem){$/;"	f
sqlite3VdbeJumpHere	vdbeaux.c	/^void sqlite3VdbeJumpHere(Vdbe *p, int addr){$/;"	f
sqlite3VdbeLeave	vdbeInt.h	532;"	d
sqlite3VdbeLeave	vdbeaux.c	/^void sqlite3VdbeLeave(Vdbe *p){$/;"	f
sqlite3VdbeLinkSubProgram	vdbeaux.c	/^void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){$/;"	f
sqlite3VdbeList	vdbeaux.c	/^int sqlite3VdbeList($/;"	f
sqlite3VdbeLoadString	vdbeaux.c	/^int sqlite3VdbeLoadString(Vdbe *p, int iDest, const char *zStr){$/;"	f
sqlite3VdbeMakeLabel	vdbeaux.c	/^int sqlite3VdbeMakeLabel(Vdbe *v){$/;"	f
sqlite3VdbeMakeReady	vdbeaux.c	/^void sqlite3VdbeMakeReady($/;"	f
sqlite3VdbeMemAboutToChange	vdbemem.c	/^void sqlite3VdbeMemAboutToChange(Vdbe *pVdbe, Mem *pMem){$/;"	f
sqlite3VdbeMemCast	vdbemem.c	/^void sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){$/;"	f
sqlite3VdbeMemClearAndResize	vdbemem.c	/^int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){$/;"	f
sqlite3VdbeMemCopy	vdbemem.c	/^int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){$/;"	f
sqlite3VdbeMemExpandBlob	vdbeInt.h	557;"	d
sqlite3VdbeMemExpandBlob	vdbemem.c	/^int sqlite3VdbeMemExpandBlob(Mem *pMem){$/;"	f
sqlite3VdbeMemFinalize	vdbemem.c	/^int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){$/;"	f
sqlite3VdbeMemFromBtree	vdbemem.c	/^int sqlite3VdbeMemFromBtree($/;"	f
sqlite3VdbeMemGrow	vdbemem.c	/^SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){$/;"	f
sqlite3VdbeMemHandleBom	utf.c	/^int sqlite3VdbeMemHandleBom(Mem *pMem){$/;"	f
sqlite3VdbeMemInit	vdbemem.c	/^void sqlite3VdbeMemInit(Mem *pMem, sqlite3 *db, u16 flags){$/;"	f
sqlite3VdbeMemIntegerify	vdbemem.c	/^int sqlite3VdbeMemIntegerify(Mem *pMem){$/;"	f
sqlite3VdbeMemMakeWriteable	vdbemem.c	/^int sqlite3VdbeMemMakeWriteable(Mem *pMem){$/;"	f
sqlite3VdbeMemMove	vdbemem.c	/^void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){$/;"	f
sqlite3VdbeMemNulTerminate	vdbemem.c	/^int sqlite3VdbeMemNulTerminate(Mem *pMem){$/;"	f
sqlite3VdbeMemNumerify	vdbemem.c	/^int sqlite3VdbeMemNumerify(Mem *pMem){$/;"	f
sqlite3VdbeMemPrettyPrint	vdbe.c	/^void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){$/;"	f
sqlite3VdbeMemRealify	vdbemem.c	/^int sqlite3VdbeMemRealify(Mem *pMem){$/;"	f
sqlite3VdbeMemRelease	vdbemem.c	/^void sqlite3VdbeMemRelease(Mem *p){$/;"	f
sqlite3VdbeMemSetDouble	vdbeInt.h	483;"	d
sqlite3VdbeMemSetDouble	vdbemem.c	/^void sqlite3VdbeMemSetDouble(Mem *pMem, double val){$/;"	f
sqlite3VdbeMemSetInt64	vdbemem.c	/^void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){$/;"	f
sqlite3VdbeMemSetNull	vdbemem.c	/^void sqlite3VdbeMemSetNull(Mem *pMem){$/;"	f
sqlite3VdbeMemSetRowSet	vdbemem.c	/^void sqlite3VdbeMemSetRowSet(Mem *pMem){$/;"	f
sqlite3VdbeMemSetStr	vdbemem.c	/^int sqlite3VdbeMemSetStr($/;"	f
sqlite3VdbeMemSetZeroBlob	vdbemem.c	/^void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){$/;"	f
sqlite3VdbeMemShallowCopy	vdbemem.c	/^void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){$/;"	f
sqlite3VdbeMemStringify	vdbemem.c	/^int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){$/;"	f
sqlite3VdbeMemTooBig	vdbemem.c	/^int sqlite3VdbeMemTooBig(Mem *p){$/;"	f
sqlite3VdbeMemTranslate	utf.c	/^SQLITE_NOINLINE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){$/;"	f
sqlite3VdbeMultiLoad	vdbeaux.c	/^void sqlite3VdbeMultiLoad(Vdbe *p, int iDest, const char *zTypes, ...){$/;"	f
sqlite3VdbeNoopComment	vdbeaux.c	/^void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeOneByteSerialTypeLen	vdbeaux.c	/^u8 sqlite3VdbeOneByteSerialTypeLen(u8 serial_type){$/;"	f
sqlite3VdbeParameterIndex	vdbeapi.c	/^int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){$/;"	f
sqlite3VdbePreUpdateHook	vdbeaux.c	/^void sqlite3VdbePreUpdateHook($/;"	f
sqlite3VdbePrintOp	vdbeaux.c	/^void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){$/;"	f
sqlite3VdbePrintSql	vdbeaux.c	/^void sqlite3VdbePrintSql(Vdbe *p){$/;"	f
sqlite3VdbeRealValue	vdbemem.c	/^double sqlite3VdbeRealValue(Mem *pMem){$/;"	f
sqlite3VdbeRecordCompare	vdbeaux.c	/^int sqlite3VdbeRecordCompare($/;"	f
sqlite3VdbeRecordCompareWithSkip	vdbeaux.c	/^int sqlite3VdbeRecordCompareWithSkip($/;"	f
sqlite3VdbeRecordUnpack	vdbeaux.c	/^void sqlite3VdbeRecordUnpack($/;"	f
sqlite3VdbeReset	vdbeaux.c	/^int sqlite3VdbeReset(Vdbe *p){$/;"	f
sqlite3VdbeResetStepResult	vdbeaux.c	/^void sqlite3VdbeResetStepResult(Vdbe *p){$/;"	f
sqlite3VdbeResolveLabel	vdbeaux.c	/^void sqlite3VdbeResolveLabel(Vdbe *v, int x){$/;"	f
sqlite3VdbeReusable	vdbeaux.c	/^void sqlite3VdbeReusable(Vdbe *p){$/;"	f
sqlite3VdbeRewind	vdbeaux.c	/^void sqlite3VdbeRewind(Vdbe *p){$/;"	f
sqlite3VdbeRunOnlyOnce	vdbeaux.c	/^void sqlite3VdbeRunOnlyOnce(Vdbe *p){$/;"	f
sqlite3VdbeScanStatus	vdbe.h	309;"	d
sqlite3VdbeScanStatus	vdbeaux.c	/^void sqlite3VdbeScanStatus($/;"	f
sqlite3VdbeSerialGet	vdbeaux.c	/^u32 sqlite3VdbeSerialGet($/;"	f
sqlite3VdbeSerialPut	vdbeaux.c	/^u32 sqlite3VdbeSerialPut(u8 *buf, Mem *pMem, u32 serial_type){$/;"	f
sqlite3VdbeSerialType	vdbeaux.c	/^u32 sqlite3VdbeSerialType(Mem *pMem, int file_format, u32 *pLen){$/;"	f
sqlite3VdbeSerialTypeLen	vdbeaux.c	/^u32 sqlite3VdbeSerialTypeLen(u32 serial_type){$/;"	f
sqlite3VdbeSetChanges	vdbeaux.c	/^void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){$/;"	f
sqlite3VdbeSetColName	vdbeaux.c	/^int sqlite3VdbeSetColName($/;"	f
sqlite3VdbeSetLineNumber	vdbeaux.c	/^void sqlite3VdbeSetLineNumber(Vdbe *v, int iLine){$/;"	f
sqlite3VdbeSetNumCols	vdbeaux.c	/^void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){$/;"	f
sqlite3VdbeSetP4KeyInfo	vdbeaux.c	/^void sqlite3VdbeSetP4KeyInfo(Parse *pParse, Index *pIdx){$/;"	f
sqlite3VdbeSetSql	vdbeaux.c	/^void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){$/;"	f
sqlite3VdbeSetVarmask	vdbeaux.c	/^void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){$/;"	f
sqlite3VdbeSorterClose	vdbesort.c	/^void sqlite3VdbeSorterClose(sqlite3 *db, VdbeCursor *pCsr){$/;"	f
sqlite3VdbeSorterCompare	vdbesort.c	/^int sqlite3VdbeSorterCompare($/;"	f
sqlite3VdbeSorterInit	vdbesort.c	/^int sqlite3VdbeSorterInit($/;"	f
sqlite3VdbeSorterNext	vdbesort.c	/^int sqlite3VdbeSorterNext(sqlite3 *db, const VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterReset	vdbesort.c	/^void sqlite3VdbeSorterReset(sqlite3 *db, VdbeSorter *pSorter){$/;"	f
sqlite3VdbeSorterRewind	vdbesort.c	/^int sqlite3VdbeSorterRewind(const VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterRowkey	vdbesort.c	/^int sqlite3VdbeSorterRowkey(const VdbeCursor *pCsr, Mem *pOut){$/;"	f
sqlite3VdbeSorterWrite	vdbesort.c	/^int sqlite3VdbeSorterWrite($/;"	f
sqlite3VdbeSwap	vdbeaux.c	/^void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){$/;"	f
sqlite3VdbeTakeOpArray	vdbeaux.c	/^VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){$/;"	f
sqlite3VdbeTransferError	vdbeaux.c	/^int sqlite3VdbeTransferError(Vdbe *p){$/;"	f
sqlite3VdbeUsesBtree	vdbeaux.c	/^void sqlite3VdbeUsesBtree(Vdbe *p, int i){$/;"	f
sqlite3VdbeVerifyNoMallocRequired	vdbe.h	189;"	d
sqlite3VdbeVerifyNoMallocRequired	vdbeaux.c	/^void sqlite3VdbeVerifyNoMallocRequired(Vdbe *p, int N){$/;"	f
sqlite3ViewGetColumnNames	build.c	/^int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){$/;"	f
sqlite3ViewGetColumnNames	sqliteInt.h	3611;"	d
sqlite3VtabArgExtend	vtab.c	/^void sqlite3VtabArgExtend(Parse *pParse, Token *p){$/;"	f
sqlite3VtabArgInit	vtab.c	/^void sqlite3VtabArgInit(Parse *pParse){$/;"	f
sqlite3VtabBegin	vtab.c	/^int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){$/;"	f
sqlite3VtabBeginParse	vtab.c	/^void sqlite3VtabBeginParse($/;"	f
sqlite3VtabCallConnect	vtab.c	/^int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabCallCreate	vtab.c	/^int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){$/;"	f
sqlite3VtabCallDestroy	vtab.c	/^int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){$/;"	f
sqlite3VtabClear	sqliteInt.h	4037;"	d
sqlite3VtabClear	vtab.c	/^void sqlite3VtabClear(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabCommit	sqliteInt.h	4040;"	d
sqlite3VtabCommit	vtab.c	/^int sqlite3VtabCommit(sqlite3 *db){$/;"	f
sqlite3VtabDisconnect	vtab.c	/^void sqlite3VtabDisconnect(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabEponymousTableClear	vtab.c	/^void sqlite3VtabEponymousTableClear(sqlite3 *db, Module *pMod){$/;"	f
sqlite3VtabEponymousTableInit	vtab.c	/^int sqlite3VtabEponymousTableInit(Parse *pParse, Module *pMod){$/;"	f
sqlite3VtabFinishParse	vtab.c	/^void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){$/;"	f
sqlite3VtabImportErrmsg	vdbeaux.c	/^void sqlite3VtabImportErrmsg(Vdbe *p, sqlite3_vtab *pVtab){$/;"	f
sqlite3VtabInSync	sqliteInt.h	4041;"	d
sqlite3VtabInSync	sqliteInt.h	4059;"	d
sqlite3VtabLock	sqliteInt.h	4042;"	d
sqlite3VtabLock	vtab.c	/^void sqlite3VtabLock(VTable *pVTab){$/;"	f
sqlite3VtabMakeWritable	vtab.c	/^void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabOverloadFunction	vtab.c	/^FuncDef *sqlite3VtabOverloadFunction($/;"	f
sqlite3VtabRollback	sqliteInt.h	4039;"	d
sqlite3VtabRollback	vtab.c	/^int sqlite3VtabRollback(sqlite3 *db){$/;"	f
sqlite3VtabSavepoint	sqliteInt.h	4045;"	d
sqlite3VtabSavepoint	vtab.c	/^int sqlite3VtabSavepoint(sqlite3 *db, int op, int iSavepoint){$/;"	f
sqlite3VtabSync	sqliteInt.h	4038;"	d
sqlite3VtabSync	vtab.c	/^int sqlite3VtabSync(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VtabUnlock	sqliteInt.h	4043;"	d
sqlite3VtabUnlock	vtab.c	/^void sqlite3VtabUnlock(VTable *pVTab){$/;"	f
sqlite3VtabUnlockList	sqliteInt.h	4044;"	d
sqlite3VtabUnlockList	vtab.c	/^void sqlite3VtabUnlockList(sqlite3 *db){$/;"	f
sqlite3WalBeginReadTransaction	wal.c	/^int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){$/;"	f
sqlite3WalBeginReadTransaction	wal.h	32;"	d
sqlite3WalBeginWriteTransaction	wal.c	/^int sqlite3WalBeginWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalBeginWriteTransaction	wal.h	35;"	d
sqlite3WalCallback	wal.c	/^int sqlite3WalCallback(Wal *pWal){$/;"	f
sqlite3WalCallback	wal.h	42;"	d
sqlite3WalCheckpoint	wal.c	/^int sqlite3WalCheckpoint($/;"	f
sqlite3WalCheckpoint	wal.h	41;"	d
sqlite3WalClose	wal.c	/^int sqlite3WalClose($/;"	f
sqlite3WalClose	wal.h	31;"	d
sqlite3WalDbsize	wal.c	/^Pgno sqlite3WalDbsize(Wal *pWal){$/;"	f
sqlite3WalDbsize	wal.h	34;"	d
sqlite3WalDefaultHook	main.c	/^int sqlite3WalDefaultHook($/;"	f
sqlite3WalEndReadTransaction	wal.c	/^void sqlite3WalEndReadTransaction(Wal *pWal){$/;"	f
sqlite3WalEndReadTransaction	wal.h	33;"	d
sqlite3WalEndWriteTransaction	wal.c	/^int sqlite3WalEndWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalEndWriteTransaction	wal.h	36;"	d
sqlite3WalExclusiveMode	wal.c	/^int sqlite3WalExclusiveMode(Wal *pWal, int op){$/;"	f
sqlite3WalExclusiveMode	wal.h	43;"	d
sqlite3WalFile	wal.c	/^sqlite3_file *sqlite3WalFile(Wal *pWal){$/;"	f
sqlite3WalFile	wal.h	47;"	d
sqlite3WalFindFrame	wal.c	/^int sqlite3WalFindFrame($/;"	f
sqlite3WalFindFrame	wal.h	46;"	d
sqlite3WalFrames	wal.c	/^int sqlite3WalFrames($/;"	f
sqlite3WalFrames	wal.h	40;"	d
sqlite3WalFramesize	wal.c	/^int sqlite3WalFramesize(Wal *pWal){$/;"	f
sqlite3WalFramesize	wal.h	45;"	d
sqlite3WalHeapMemory	wal.c	/^int sqlite3WalHeapMemory(Wal *pWal){$/;"	f
sqlite3WalHeapMemory	wal.h	44;"	d
sqlite3WalLimit	wal.c	/^void sqlite3WalLimit(Wal *pWal, i64 iLimit){$/;"	f
sqlite3WalLimit	wal.h	30;"	d
sqlite3WalOpen	wal.c	/^int sqlite3WalOpen($/;"	f
sqlite3WalOpen	wal.h	29;"	d
sqlite3WalReadFrame	wal.c	/^int sqlite3WalReadFrame($/;"	f
sqlite3WalSavepoint	wal.c	/^void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepoint	wal.h	38;"	d
sqlite3WalSavepointUndo	wal.c	/^int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepointUndo	wal.h	39;"	d
sqlite3WalSnapshotGet	wal.c	/^int sqlite3WalSnapshotGet(Wal *pWal, sqlite3_snapshot **ppSnapshot){$/;"	f
sqlite3WalSnapshotOpen	wal.c	/^void sqlite3WalSnapshotOpen(Wal *pWal, sqlite3_snapshot *pSnapshot){$/;"	f
sqlite3WalTrace	wal.c	/^int sqlite3WalTrace = 1;$/;"	v
sqlite3WalUndo	wal.c	/^int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){$/;"	f
sqlite3WalUndo	wal.h	37;"	d
sqlite3WalkExpr	walker.c	/^int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){$/;"	f
sqlite3WalkExprList	walker.c	/^int sqlite3WalkExprList(Walker *pWalker, ExprList *p){$/;"	f
sqlite3WalkSelect	walker.c	/^int sqlite3WalkSelect(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectExpr	walker.c	/^int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectFrom	walker.c	/^int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){$/;"	f
sqlite3WhereAddScanStatus	whereInt.h	473;"	d
sqlite3WhereAddScanStatus	wherecode.c	/^void sqlite3WhereAddScanStatus($/;"	f
sqlite3WhereBegin	where.c	/^WhereInfo *sqlite3WhereBegin($/;"	f
sqlite3WhereBreakLabel	where.c	/^int sqlite3WhereBreakLabel(WhereInfo *pWInfo){$/;"	f
sqlite3WhereClauseClear	whereexpr.c	/^void sqlite3WhereClauseClear(WhereClause *pWC){$/;"	f
sqlite3WhereClauseInit	whereexpr.c	/^void sqlite3WhereClauseInit($/;"	f
sqlite3WhereClausePrint	where.c	/^void sqlite3WhereClausePrint(WhereClause *pWC){$/;"	f
sqlite3WhereCodeOneLoopStart	wherecode.c	/^Bitmask sqlite3WhereCodeOneLoopStart($/;"	f
sqlite3WhereContinueLabel	where.c	/^int sqlite3WhereContinueLabel(WhereInfo *pWInfo){$/;"	f
sqlite3WhereEnd	where.c	/^void sqlite3WhereEnd(WhereInfo *pWInfo){$/;"	f
sqlite3WhereExplainOneScan	whereInt.h	463;"	d
sqlite3WhereExplainOneScan	wherecode.c	/^int sqlite3WhereExplainOneScan($/;"	f
sqlite3WhereExprAnalyze	whereexpr.c	/^void sqlite3WhereExprAnalyze($/;"	f
sqlite3WhereExprListUsage	whereexpr.c	/^Bitmask sqlite3WhereExprListUsage(WhereMaskSet *pMaskSet, ExprList *pList){$/;"	f
sqlite3WhereExprUsage	whereexpr.c	/^Bitmask sqlite3WhereExprUsage(WhereMaskSet *pMaskSet, Expr *p){$/;"	f
sqlite3WhereFindTerm	where.c	/^WhereTerm *sqlite3WhereFindTerm($/;"	f
sqlite3WhereGetMask	where.c	/^Bitmask sqlite3WhereGetMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f
sqlite3WhereIsDistinct	where.c	/^int sqlite3WhereIsDistinct(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsOrdered	where.c	/^int sqlite3WhereIsOrdered(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsSorted	where.c	/^int sqlite3WhereIsSorted(WhereInfo *pWInfo){$/;"	f
sqlite3WhereOkOnePass	where.c	/^int sqlite3WhereOkOnePass(WhereInfo *pWInfo, int *aiCur){$/;"	f
sqlite3WhereOrderedInnerLoop	where.c	/^int sqlite3WhereOrderedInnerLoop(WhereInfo *pWInfo){$/;"	f
sqlite3WhereOutputRowCount	where.c	/^LogEst sqlite3WhereOutputRowCount(WhereInfo *pWInfo){$/;"	f
sqlite3WhereSplit	whereexpr.c	/^void sqlite3WhereSplit(WhereClause *pWC, Expr *pExpr, u8 op){$/;"	f
sqlite3WhereTabFuncArgs	whereexpr.c	/^void sqlite3WhereTabFuncArgs($/;"	f
sqlite3WhereTrace	where.c	/^\/***\/ int sqlite3WhereTrace = 0;$/;"	v
sqlite3WhereTrace	whereInt.h	/^\/***\/ int sqlite3WhereTrace;$/;"	v
sqlite3Win32Wait	os_win.c	/^DWORD sqlite3Win32Wait(HANDLE hObject){$/;"	f
sqlite3WithAdd	build.c	/^With *sqlite3WithAdd($/;"	f
sqlite3WithDelete	build.c	/^void sqlite3WithDelete(sqlite3 *db, With *pWith){$/;"	f
sqlite3WithDelete	sqliteInt.h	4093;"	d
sqlite3WithPush	select.c	/^void sqlite3WithPush(Parse *pParse, With *pWith, u8 bFree){$/;"	f
sqlite3WithPush	sqliteInt.h	4092;"	d
sqlite3XPrintf	printf.c	/^void sqlite3XPrintf(StrAccum *p, const char *zFormat, ...){$/;"	f
sqlite3_aggregate_context	sqlite3ext.h	309;"	d
sqlite3_aggregate_context	vdbeapi.c	/^void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){$/;"	f
sqlite3_aggregate_count	sqlite3ext.h	311;"	d
sqlite3_aggregate_count	vdbeapi.c	/^int sqlite3_aggregate_count(sqlite3_context *p){$/;"	f
sqlite3_api_routines	sqlite3ext.h	/^struct sqlite3_api_routines {$/;"	s
sqlite3_auto_extension	loadext.c	/^int sqlite3_auto_extension($/;"	f
sqlite3_auto_extension	sqlite3ext.h	514;"	d
sqlite3_backup	backup.c	/^struct sqlite3_backup {$/;"	s	file:
sqlite3_backup_finish	backup.c	/^int sqlite3_backup_finish(sqlite3_backup *p){$/;"	f
sqlite3_backup_finish	sqlite3ext.h	475;"	d
sqlite3_backup_init	backup.c	/^sqlite3_backup *sqlite3_backup_init($/;"	f
sqlite3_backup_init	sqlite3ext.h	476;"	d
sqlite3_backup_pagecount	backup.c	/^int sqlite3_backup_pagecount(sqlite3_backup *p){$/;"	f
sqlite3_backup_pagecount	sqlite3ext.h	477;"	d
sqlite3_backup_remaining	backup.c	/^int sqlite3_backup_remaining(sqlite3_backup *p){$/;"	f
sqlite3_backup_remaining	sqlite3ext.h	478;"	d
sqlite3_backup_step	backup.c	/^int sqlite3_backup_step(sqlite3_backup *p, int nPage){$/;"	f
sqlite3_backup_step	sqlite3ext.h	479;"	d
sqlite3_bind_blob	sqlite3ext.h	313;"	d
sqlite3_bind_blob	vdbeapi.c	/^int sqlite3_bind_blob($/;"	f
sqlite3_bind_blob64	sqlite3ext.h	515;"	d
sqlite3_bind_blob64	vdbeapi.c	/^int sqlite3_bind_blob64($/;"	f
sqlite3_bind_double	sqlite3ext.h	314;"	d
sqlite3_bind_double	vdbeapi.c	/^int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){$/;"	f
sqlite3_bind_int	sqlite3ext.h	315;"	d
sqlite3_bind_int	vdbeapi.c	/^int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){$/;"	f
sqlite3_bind_int64	sqlite3ext.h	316;"	d
sqlite3_bind_int64	vdbeapi.c	/^int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){$/;"	f
sqlite3_bind_null	sqlite3ext.h	317;"	d
sqlite3_bind_null	vdbeapi.c	/^int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_parameter_count	sqlite3ext.h	318;"	d
sqlite3_bind_parameter_count	vdbeapi.c	/^int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_bind_parameter_index	sqlite3ext.h	319;"	d
sqlite3_bind_parameter_index	vdbeapi.c	/^int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){$/;"	f
sqlite3_bind_parameter_name	sqlite3ext.h	320;"	d
sqlite3_bind_parameter_name	vdbeapi.c	/^const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_text	sqlite3ext.h	321;"	d
sqlite3_bind_text	vdbeapi.c	/^int sqlite3_bind_text( $/;"	f
sqlite3_bind_text16	loadext.c	43;"	d	file:
sqlite3_bind_text16	sqlite3ext.h	322;"	d
sqlite3_bind_text16	vdbeapi.c	/^int sqlite3_bind_text16($/;"	f
sqlite3_bind_text64	sqlite3ext.h	516;"	d
sqlite3_bind_text64	vdbeapi.c	/^int sqlite3_bind_text64( $/;"	f
sqlite3_bind_value	sqlite3ext.h	323;"	d
sqlite3_bind_value	vdbeapi.c	/^int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){$/;"	f
sqlite3_bind_zeroblob	loadext.c	104;"	d	file:
sqlite3_bind_zeroblob	sqlite3ext.h	440;"	d
sqlite3_bind_zeroblob	vdbeapi.c	/^int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){$/;"	f
sqlite3_bind_zeroblob64	sqlite3ext.h	530;"	d
sqlite3_bind_zeroblob64	vdbeapi.c	/^int sqlite3_bind_zeroblob64(sqlite3_stmt *pStmt, int i, sqlite3_uint64 n){$/;"	f
sqlite3_blob_bytes	loadext.c	105;"	d	file:
sqlite3_blob_bytes	sqlite3ext.h	441;"	d
sqlite3_blob_bytes	vdbeblob.c	/^int sqlite3_blob_bytes(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_close	loadext.c	106;"	d	file:
sqlite3_blob_close	sqlite3ext.h	442;"	d
sqlite3_blob_close	vdbeblob.c	/^int sqlite3_blob_close(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_open	loadext.c	107;"	d	file:
sqlite3_blob_open	sqlite3ext.h	443;"	d
sqlite3_blob_open	vdbeblob.c	/^int sqlite3_blob_open($/;"	f
sqlite3_blob_read	loadext.c	108;"	d	file:
sqlite3_blob_read	sqlite3ext.h	444;"	d
sqlite3_blob_read	vdbeblob.c	/^int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){$/;"	f
sqlite3_blob_reopen	loadext.c	110;"	d	file:
sqlite3_blob_reopen	sqlite3ext.h	496;"	d
sqlite3_blob_reopen	vdbeblob.c	/^int sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){$/;"	f
sqlite3_blob_write	loadext.c	109;"	d	file:
sqlite3_blob_write	sqlite3ext.h	445;"	d
sqlite3_blob_write	vdbeblob.c	/^int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){$/;"	f
sqlite3_blocking_prepare_v2	test_thread.c	/^int sqlite3_blocking_prepare_v2($/;"	f
sqlite3_blocking_step	test_thread.c	/^int sqlite3_blocking_step(sqlite3_stmt *pStmt){$/;"	f
sqlite3_busy_handler	main.c	/^int sqlite3_busy_handler($/;"	f
sqlite3_busy_handler	sqlite3ext.h	324;"	d
sqlite3_busy_timeout	main.c	/^int sqlite3_busy_timeout(sqlite3 *db, int ms){$/;"	f
sqlite3_busy_timeout	sqlite3ext.h	325;"	d
sqlite3_cancel_auto_extension	loadext.c	/^int sqlite3_cancel_auto_extension($/;"	f
sqlite3_cancel_auto_extension	sqlite3ext.h	517;"	d
sqlite3_changes	main.c	/^int sqlite3_changes(sqlite3 *db){$/;"	f
sqlite3_changes	sqlite3ext.h	326;"	d
sqlite3_clear_bindings	sqlite3ext.h	439;"	d
sqlite3_clear_bindings	vdbeapi.c	/^int sqlite3_clear_bindings(sqlite3_stmt *pStmt){$/;"	f
sqlite3_client_close	test_server.c	/^int sqlite3_client_close(sqlite3 *pDb){$/;"	f
sqlite3_client_finalize	test_server.c	/^int sqlite3_client_finalize(sqlite3_stmt *pStmt){$/;"	f
sqlite3_client_open	test_server.c	/^int sqlite3_client_open(const char *zDatabaseName, sqlite3 **ppDb){$/;"	f
sqlite3_client_prepare	test_server.c	/^int sqlite3_client_prepare($/;"	f
sqlite3_client_reset	test_server.c	/^int sqlite3_client_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_client_step	test_server.c	/^int sqlite3_client_step(sqlite3_stmt *pStmt){$/;"	f
sqlite3_close	main.c	/^int sqlite3_close(sqlite3 *db){ return sqlite3Close(db,0); }$/;"	f
sqlite3_close	sqlite3ext.h	327;"	d
sqlite3_close_v2	main.c	/^int sqlite3_close_v2(sqlite3 *db){ return sqlite3Close(db,1); }$/;"	f
sqlite3_close_v2	sqlite3ext.h	500;"	d
sqlite3_collation_needed	main.c	/^int sqlite3_collation_needed($/;"	f
sqlite3_collation_needed	sqlite3ext.h	328;"	d
sqlite3_collation_needed16	loadext.c	44;"	d	file:
sqlite3_collation_needed16	main.c	/^int sqlite3_collation_needed16($/;"	f
sqlite3_collation_needed16	sqlite3ext.h	329;"	d
sqlite3_column_blob	sqlite3ext.h	330;"	d
sqlite3_column_blob	vdbeapi.c	/^const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes	sqlite3ext.h	331;"	d
sqlite3_column_bytes	vdbeapi.c	/^int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes16	sqlite3ext.h	332;"	d
sqlite3_column_bytes16	vdbeapi.c	/^int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_count	sqlite3ext.h	333;"	d
sqlite3_column_count	vdbeapi.c	/^int sqlite3_column_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_column_database_name	loadext.c	30;"	d	file:
sqlite3_column_database_name	sqlite3ext.h	334;"	d
sqlite3_column_database_name	vdbeapi.c	/^const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name16	loadext.c	31;"	d	file:
sqlite3_column_database_name16	loadext.c	62;"	d	file:
sqlite3_column_database_name16	sqlite3ext.h	335;"	d
sqlite3_column_database_name16	vdbeapi.c	/^const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype	loadext.c	74;"	d	file:
sqlite3_column_decltype	sqlite3ext.h	336;"	d
sqlite3_column_decltype	vdbeapi.c	/^const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype16	loadext.c	45;"	d	file:
sqlite3_column_decltype16	loadext.c	73;"	d	file:
sqlite3_column_decltype16	sqlite3ext.h	337;"	d
sqlite3_column_decltype16	vdbeapi.c	/^const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_double	sqlite3ext.h	338;"	d
sqlite3_column_double	vdbeapi.c	/^double sqlite3_column_double(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int	sqlite3ext.h	339;"	d
sqlite3_column_int	vdbeapi.c	/^int sqlite3_column_int(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int64	sqlite3ext.h	340;"	d
sqlite3_column_int64	vdbeapi.c	/^sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_name	sqlite3ext.h	341;"	d
sqlite3_column_name	vdbeapi.c	/^const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name16	loadext.c	46;"	d	file:
sqlite3_column_name16	sqlite3ext.h	342;"	d
sqlite3_column_name16	vdbeapi.c	/^const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name	loadext.c	34;"	d	file:
sqlite3_column_origin_name	sqlite3ext.h	343;"	d
sqlite3_column_origin_name	vdbeapi.c	/^const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name16	loadext.c	35;"	d	file:
sqlite3_column_origin_name16	loadext.c	64;"	d	file:
sqlite3_column_origin_name16	sqlite3ext.h	344;"	d
sqlite3_column_origin_name16	vdbeapi.c	/^const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name	loadext.c	32;"	d	file:
sqlite3_column_table_name	sqlite3ext.h	345;"	d
sqlite3_column_table_name	vdbeapi.c	/^const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name16	loadext.c	33;"	d	file:
sqlite3_column_table_name16	loadext.c	63;"	d	file:
sqlite3_column_table_name16	sqlite3ext.h	346;"	d
sqlite3_column_table_name16	vdbeapi.c	/^const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_text	sqlite3ext.h	347;"	d
sqlite3_column_text	vdbeapi.c	/^const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text16	loadext.c	47;"	d	file:
sqlite3_column_text16	sqlite3ext.h	348;"	d
sqlite3_column_text16	vdbeapi.c	/^const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_type	sqlite3ext.h	349;"	d
sqlite3_column_type	vdbeapi.c	/^int sqlite3_column_type(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_value	sqlite3ext.h	350;"	d
sqlite3_column_value	vdbeapi.c	/^sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_commit_hook	main.c	/^void *sqlite3_commit_hook($/;"	f
sqlite3_commit_hook	sqlite3ext.h	351;"	d
sqlite3_compileoption_get	ctime.c	/^const char *sqlite3_compileoption_get(int N){$/;"	f
sqlite3_compileoption_get	sqlite3ext.h	480;"	d
sqlite3_compileoption_used	ctime.c	/^int sqlite3_compileoption_used(const char *zOptName){$/;"	f
sqlite3_compileoption_used	sqlite3ext.h	481;"	d
sqlite3_complete	complete.c	/^int sqlite3_complete(const char *zSql){$/;"	f
sqlite3_complete	loadext.c	68;"	d	file:
sqlite3_complete	sqlite3ext.h	352;"	d
sqlite3_complete16	complete.c	/^int sqlite3_complete16(const void *zSql){$/;"	f
sqlite3_complete16	loadext.c	48;"	d	file:
sqlite3_complete16	loadext.c	69;"	d	file:
sqlite3_complete16	sqlite3ext.h	353;"	d
sqlite3_config	main.c	/^int sqlite3_config(int op, ...){$/;"	f
sqlite3_context	vdbeInt.h	/^struct sqlite3_context {$/;"	s
sqlite3_context_db_handle	sqlite3ext.h	469;"	d
sqlite3_context_db_handle	vdbeapi.c	/^sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){$/;"	f
sqlite3_create_collation	main.c	/^int sqlite3_create_collation($/;"	f
sqlite3_create_collation	sqlite3ext.h	354;"	d
sqlite3_create_collation16	loadext.c	49;"	d	file:
sqlite3_create_collation16	main.c	/^int sqlite3_create_collation16($/;"	f
sqlite3_create_collation16	sqlite3ext.h	355;"	d
sqlite3_create_collation_v2	main.c	/^int sqlite3_create_collation_v2($/;"	f
sqlite3_create_collation_v2	sqlite3ext.h	446;"	d
sqlite3_create_function	main.c	/^int sqlite3_create_function($/;"	f
sqlite3_create_function	sqlite3ext.h	356;"	d
sqlite3_create_function16	loadext.c	50;"	d	file:
sqlite3_create_function16	main.c	/^int sqlite3_create_function16($/;"	f
sqlite3_create_function16	sqlite3ext.h	357;"	d
sqlite3_create_function_v2	main.c	/^int sqlite3_create_function_v2($/;"	f
sqlite3_create_function_v2	sqlite3ext.h	482;"	d
sqlite3_create_module	loadext.c	82;"	d	file:
sqlite3_create_module	sqlite3ext.h	358;"	d
sqlite3_create_module	vtab.c	/^int sqlite3_create_module($/;"	f
sqlite3_create_module_v2	loadext.c	83;"	d	file:
sqlite3_create_module_v2	sqlite3ext.h	359;"	d
sqlite3_create_module_v2	vtab.c	/^int sqlite3_create_module_v2($/;"	f
sqlite3_current_time	os_unix.c	/^int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_current_time	os_win.c	/^int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_data_count	sqlite3ext.h	360;"	d
sqlite3_data_count	vdbeapi.c	/^int sqlite3_data_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_data_directory	main.c	/^char *sqlite3_data_directory = 0;$/;"	v
sqlite3_db_cacheflush	main.c	/^int sqlite3_db_cacheflush(sqlite3 *db){$/;"	f
sqlite3_db_cacheflush	sqlite3ext.h	537;"	d
sqlite3_db_config	main.c	/^int sqlite3_db_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_db_config	sqlite3ext.h	483;"	d
sqlite3_db_filename	main.c	/^const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_filename	sqlite3ext.h	501;"	d
sqlite3_db_handle	sqlite3ext.h	361;"	d
sqlite3_db_handle	vdbeapi.c	/^sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){$/;"	f
sqlite3_db_mutex	main.c	/^sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){$/;"	f
sqlite3_db_mutex	sqlite3ext.h	484;"	d
sqlite3_db_readonly	main.c	/^int sqlite3_db_readonly(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_readonly	sqlite3ext.h	502;"	d
sqlite3_db_release_memory	main.c	/^int sqlite3_db_release_memory(sqlite3 *db){$/;"	f
sqlite3_db_release_memory	sqlite3ext.h	503;"	d
sqlite3_db_status	sqlite3ext.h	485;"	d
sqlite3_db_status	status.c	/^int sqlite3_db_status($/;"	f
sqlite3_debug_mutex	mutex_noop.c	/^typedef struct sqlite3_debug_mutex {$/;"	s	file:
sqlite3_debug_mutex	mutex_noop.c	/^} sqlite3_debug_mutex;$/;"	t	typeref:struct:sqlite3_debug_mutex	file:
sqlite3_declare_vtab	loadext.c	84;"	d	file:
sqlite3_declare_vtab	sqlite3ext.h	362;"	d
sqlite3_declare_vtab	vtab.c	/^int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){$/;"	f
sqlite3_demovfs	test_demovfs.c	/^sqlite3_vfs *sqlite3_demovfs(void){$/;"	f
sqlite3_diskfull	os.c	/^int sqlite3_diskfull = 0;$/;"	v
sqlite3_diskfull_pending	os.c	/^int sqlite3_diskfull_pending = 0;$/;"	v
sqlite3_enable_load_extension	loadext.c	/^int sqlite3_enable_load_extension(sqlite3 *db, int onoff){$/;"	f
sqlite3_enable_shared_cache	btree.c	/^int sqlite3_enable_shared_cache(int enable){$/;"	f
sqlite3_enable_shared_cache	loadext.c	90;"	d	file:
sqlite3_enable_shared_cache	sqlite3ext.h	363;"	d
sqlite3_errcode	main.c	/^int sqlite3_errcode(sqlite3 *db){$/;"	f
sqlite3_errcode	sqlite3ext.h	364;"	d
sqlite3_errmsg	main.c	/^const char *sqlite3_errmsg(sqlite3 *db){$/;"	f
sqlite3_errmsg	sqlite3ext.h	365;"	d
sqlite3_errmsg16	loadext.c	51;"	d	file:
sqlite3_errmsg16	main.c	/^const void *sqlite3_errmsg16(sqlite3 *db){$/;"	f
sqlite3_errmsg16	sqlite3ext.h	366;"	d
sqlite3_errstr	main.c	/^const char *sqlite3_errstr(int rc){$/;"	f
sqlite3_errstr	sqlite3ext.h	504;"	d
sqlite3_exec	legacy.c	/^int sqlite3_exec($/;"	f
sqlite3_exec	sqlite3ext.h	367;"	d
sqlite3_expanded_sql	sqlite3ext.h	542;"	d
sqlite3_expanded_sql	vdbeapi.c	/^char *sqlite3_expanded_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_expired	sqlite3ext.h	369;"	d
sqlite3_expired	vdbeapi.c	/^int sqlite3_expired(sqlite3_stmt *pStmt){$/;"	f
sqlite3_extended_errcode	main.c	/^int sqlite3_extended_errcode(sqlite3 *db){$/;"	f
sqlite3_extended_errcode	sqlite3ext.h	486;"	d
sqlite3_extended_result_codes	main.c	/^int sqlite3_extended_result_codes(sqlite3 *db, int onoff){$/;"	f
sqlite3_extended_result_codes	sqlite3ext.h	470;"	d
sqlite3_file_control	main.c	/^int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){$/;"	f
sqlite3_file_control	sqlite3ext.h	447;"	d
sqlite3_finalize	sqlite3ext.h	371;"	d
sqlite3_finalize	vdbeapi.c	/^int sqlite3_finalize(sqlite3_stmt *pStmt){$/;"	f
sqlite3_found_count	vdbe.c	/^int sqlite3_found_count = 0;$/;"	v
sqlite3_free	malloc.c	/^void sqlite3_free(void *p){$/;"	f
sqlite3_free	sqlite3ext.h	372;"	d
sqlite3_free_table	loadext.c	99;"	d	file:
sqlite3_free_table	sqlite3ext.h	373;"	d
sqlite3_free_table	table.c	/^void sqlite3_free_table($/;"	f
sqlite3_fullsync_count	os_unix.c	/^int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_fullsync_count	os_win.c	/^int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_get_autocommit	main.c	/^int sqlite3_get_autocommit(sqlite3 *db){$/;"	f
sqlite3_get_autocommit	sqlite3ext.h	374;"	d
sqlite3_get_auxdata	sqlite3ext.h	375;"	d
sqlite3_get_auxdata	vdbeapi.c	/^void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){$/;"	f
sqlite3_get_table	loadext.c	100;"	d	file:
sqlite3_get_table	sqlite3ext.h	376;"	d
sqlite3_get_table	table.c	/^int sqlite3_get_table($/;"	f
sqlite3_get_table_cb	table.c	/^static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){$/;"	f	file:
sqlite3_global_recover	main.c	/^int sqlite3_global_recover(void){$/;"	f
sqlite3_global_recover	sqlite3ext.h	378;"	d
sqlite3_hostid_num	os_unix.c	/^int sqlite3_hostid_num = 0;$/;"	v
sqlite3_init_sqllog	test_sqllog.c	/^void sqlite3_init_sqllog(void){$/;"	f
sqlite3_initialize	main.c	/^int sqlite3_initialize(void){$/;"	f
sqlite3_intarray	test_intarray.c	/^struct sqlite3_intarray {$/;"	s	file:
sqlite3_intarray	test_intarray.h	/^typedef struct sqlite3_intarray sqlite3_intarray;$/;"	t	typeref:struct:sqlite3_intarray
sqlite3_intarray_bind	test_intarray.c	/^SQLITE_API int sqlite3_intarray_bind($/;"	f
sqlite3_intarray_create	test_intarray.c	/^SQLITE_API int sqlite3_intarray_create($/;"	f
sqlite3_interrupt	main.c	/^void sqlite3_interrupt(sqlite3 *db){$/;"	f
sqlite3_interrupt	sqlite3ext.h	380;"	d
sqlite3_interrupt_count	vdbe.c	/^int sqlite3_interrupt_count = 0;$/;"	v
sqlite3_io_error_benign	os.c	/^int sqlite3_io_error_benign = 0;         \/* True if errors are benign *\/$/;"	v
sqlite3_io_error_hardhit	os.c	/^int sqlite3_io_error_hardhit = 0;        \/* Number of non-benign errors *\/$/;"	v
sqlite3_io_error_hit	os.c	/^int sqlite3_io_error_hit = 0;            \/* Total number of I\/O Errors *\/$/;"	v
sqlite3_io_error_pending	os.c	/^int sqlite3_io_error_pending = 0;        \/* Count down to first I\/O error *\/$/;"	v
sqlite3_io_error_persist	os.c	/^int sqlite3_io_error_persist = 0;        \/* True if I\/O errors persist *\/$/;"	v
sqlite3_last_insert_rowid	main.c	/^sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){$/;"	f
sqlite3_last_insert_rowid	sqlite3ext.h	381;"	d
sqlite3_libversion	main.c	/^const char *sqlite3_libversion(void){ return sqlite3_version; }$/;"	f
sqlite3_libversion	sqlite3ext.h	382;"	d
sqlite3_libversion_number	main.c	/^int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }$/;"	f
sqlite3_libversion_number	sqlite3ext.h	383;"	d
sqlite3_like_count	func.c	/^int sqlite3_like_count = 0;$/;"	v
sqlite3_limit	main.c	/^int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){$/;"	f
sqlite3_limit	sqlite3ext.h	471;"	d
sqlite3_load_extension	loadext.c	/^int sqlite3_load_extension($/;"	f
sqlite3_load_extension	sqlite3ext.h	518;"	d
sqlite3_loadext_entry	sqlite3ext.h	/^typedef int (*sqlite3_loadext_entry)($/;"	t
sqlite3_log	printf.c	/^void sqlite3_log(int iErrCode, const char *zFormat, ...){$/;"	f
sqlite3_log	sqlite3ext.h	487;"	d
sqlite3_malloc	malloc.c	/^void *sqlite3_malloc(int n){$/;"	f
sqlite3_malloc	sqlite3ext.h	384;"	d
sqlite3_malloc64	malloc.c	/^void *sqlite3_malloc64(sqlite3_uint64 n){$/;"	f
sqlite3_malloc64	sqlite3ext.h	519;"	d
sqlite3_max_blobsize	vdbe.c	/^int sqlite3_max_blobsize = 0;$/;"	v
sqlite3_memdebug_title_count	test_malloc.c	/^static int sqlite3_memdebug_title_count = 0;$/;"	v	file:
sqlite3_memdebug_vfs_oom_test	os.c	/^int sqlite3_memdebug_vfs_oom_test = 1;$/;"	v
sqlite3_memory_alarm	malloc.c	/^int sqlite3_memory_alarm($/;"	f
sqlite3_memory_highwater	malloc.c	/^sqlite3_int64 sqlite3_memory_highwater(int resetFlag){$/;"	f
sqlite3_memory_highwater	sqlite3ext.h	448;"	d
sqlite3_memory_used	malloc.c	/^sqlite3_int64 sqlite3_memory_used(void){$/;"	f
sqlite3_memory_used	sqlite3ext.h	449;"	d
sqlite3_mprintf	printf.c	/^char *sqlite3_mprintf(const char *zFormat, ...){$/;"	f
sqlite3_mprintf	sqlite3ext.h	385;"	d
sqlite3_mprintf_double	test1.c	/^static int SQLITE_TCLAPI sqlite3_mprintf_double($/;"	f	file:
sqlite3_mprintf_hexdouble	test1.c	/^static int SQLITE_TCLAPI sqlite3_mprintf_hexdouble($/;"	f	file:
sqlite3_mprintf_int	test1.c	/^static int SQLITE_TCLAPI sqlite3_mprintf_int($/;"	f	file:
sqlite3_mprintf_int64	test1.c	/^static int SQLITE_TCLAPI sqlite3_mprintf_int64($/;"	f	file:
sqlite3_mprintf_long	test1.c	/^static int SQLITE_TCLAPI sqlite3_mprintf_long($/;"	f	file:
sqlite3_mprintf_scaled	test1.c	/^static int SQLITE_TCLAPI sqlite3_mprintf_scaled($/;"	f	file:
sqlite3_mprintf_str	test1.c	/^static int SQLITE_TCLAPI sqlite3_mprintf_str($/;"	f	file:
sqlite3_mprintf_stronly	test1.c	/^static int SQLITE_TCLAPI sqlite3_mprintf_stronly($/;"	f	file:
sqlite3_msize	malloc.c	/^sqlite3_uint64 sqlite3_msize(void *p){$/;"	f
sqlite3_msize	sqlite3ext.h	520;"	d
sqlite3_multiplex_initialize	test_multiplex.c	/^int sqlite3_multiplex_initialize(const char *zOrigVfsName, int makeDefault){$/;"	f
sqlite3_multiplex_shutdown	test_multiplex.c	/^int sqlite3_multiplex_shutdown(int eForce){$/;"	f
sqlite3_mutex	mutex_unix.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	mutex_w32.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	test_mutex.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex_alloc	mutex.c	/^sqlite3_mutex *sqlite3_mutex_alloc(int id){$/;"	f
sqlite3_mutex_alloc	mutex.h	57;"	d
sqlite3_mutex_alloc	sqlite3ext.h	450;"	d
sqlite3_mutex_alloc	test_multiplex.c	75;"	d	file:
sqlite3_mutex_alloc	test_quota.c	38;"	d	file:
sqlite3_mutex_enter	mutex.c	/^void sqlite3_mutex_enter(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_enter	mutex.h	59;"	d
sqlite3_mutex_enter	sqlite3ext.h	451;"	d
sqlite3_mutex_enter	test_multiplex.c	77;"	d	file:
sqlite3_mutex_enter	test_quota.c	40;"	d	file:
sqlite3_mutex_free	mutex.c	/^void sqlite3_mutex_free(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_free	mutex.h	58;"	d
sqlite3_mutex_free	sqlite3ext.h	452;"	d
sqlite3_mutex_free	test_multiplex.c	76;"	d	file:
sqlite3_mutex_free	test_quota.c	39;"	d	file:
sqlite3_mutex_held	mutex.c	/^int sqlite3_mutex_held(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_held	mutex.h	62;"	d
sqlite3_mutex_held	test_multiplex.c	80;"	d	file:
sqlite3_mutex_held	test_quota.c	43;"	d	file:
sqlite3_mutex_leave	mutex.c	/^void sqlite3_mutex_leave(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_leave	mutex.h	61;"	d
sqlite3_mutex_leave	sqlite3ext.h	453;"	d
sqlite3_mutex_leave	test_multiplex.c	79;"	d	file:
sqlite3_mutex_leave	test_quota.c	42;"	d	file:
sqlite3_mutex_notheld	mutex.c	/^int sqlite3_mutex_notheld(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_notheld	mutex.h	63;"	d
sqlite3_mutex_notheld	test_multiplex.c	81;"	d	file:
sqlite3_mutex_notheld	test_quota.c	44;"	d	file:
sqlite3_mutex_try	mutex.c	/^int sqlite3_mutex_try(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_try	mutex.h	60;"	d
sqlite3_mutex_try	sqlite3ext.h	454;"	d
sqlite3_mutex_try	test_multiplex.c	78;"	d	file:
sqlite3_mutex_try	test_quota.c	41;"	d	file:
sqlite3_next_stmt	sqlite3ext.h	472;"	d
sqlite3_next_stmt	vdbeapi.c	/^sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){$/;"	f
sqlite3_open	main.c	/^int sqlite3_open($/;"	f
sqlite3_open	sqlite3ext.h	386;"	d
sqlite3_open16	loadext.c	52;"	d	file:
sqlite3_open16	main.c	/^int sqlite3_open16($/;"	f
sqlite3_open16	sqlite3ext.h	387;"	d
sqlite3_open_file_count	os.c	/^int sqlite3_open_file_count = 0;$/;"	v
sqlite3_open_v2	main.c	/^int sqlite3_open_v2($/;"	f
sqlite3_open_v2	sqlite3ext.h	455;"	d
sqlite3_opentemp_count	pager.c	/^int sqlite3_opentemp_count = 0;$/;"	v
sqlite3_os_end	os_unix.c	/^int sqlite3_os_end(void){ $/;"	f
sqlite3_os_end	os_win.c	/^int sqlite3_os_end(void){$/;"	f
sqlite3_os_init	os_unix.c	/^int sqlite3_os_init(void){ $/;"	f
sqlite3_os_init	os_win.c	/^int sqlite3_os_init(void){$/;"	f
sqlite3_os_type	os_win.c	/^LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v
sqlite3_os_type	os_win.c	/^static LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v	file:
sqlite3_overload_function	main.c	/^int sqlite3_overload_function($/;"	f
sqlite3_overload_function	sqlite3ext.h	436;"	d
sqlite3_pager_readdb_count	pager.c	/^int sqlite3_pager_readdb_count = 0;    \/* Number of full pages read from DB *\/$/;"	v
sqlite3_pager_writedb_count	pager.c	/^int sqlite3_pager_writedb_count = 0;   \/* Number of full pages written to DB *\/$/;"	v
sqlite3_pager_writej_count	pager.c	/^int sqlite3_pager_writej_count = 0;    \/* Number of pages written to journal *\/$/;"	v
sqlite3_prepare	prepare.c	/^int sqlite3_prepare($/;"	f
sqlite3_prepare	sqlite3ext.h	388;"	d
sqlite3_prepare16	loadext.c	53;"	d	file:
sqlite3_prepare16	prepare.c	/^int sqlite3_prepare16($/;"	f
sqlite3_prepare16	sqlite3ext.h	389;"	d
sqlite3_prepare16_v2	loadext.c	54;"	d	file:
sqlite3_prepare16_v2	prepare.c	/^int sqlite3_prepare16_v2($/;"	f
sqlite3_prepare16_v2	sqlite3ext.h	391;"	d
sqlite3_prepare16_v2	sqlite3ext.h	438;"	d
sqlite3_prepare_v2	prepare.c	/^int sqlite3_prepare_v2($/;"	f
sqlite3_prepare_v2	sqlite3ext.h	390;"	d
sqlite3_prepare_v2	sqlite3ext.h	437;"	d
sqlite3_preupdate_count	vdbeapi.c	/^int sqlite3_preupdate_count(sqlite3 *db){$/;"	f
sqlite3_preupdate_depth	vdbeapi.c	/^int sqlite3_preupdate_depth(sqlite3 *db){$/;"	f
sqlite3_preupdate_hook	main.c	/^void *sqlite3_preupdate_hook($/;"	f
sqlite3_preupdate_new	vdbeapi.c	/^int sqlite3_preupdate_new(sqlite3 *db, int iIdx, sqlite3_value **ppValue){$/;"	f
sqlite3_preupdate_old	vdbeapi.c	/^int sqlite3_preupdate_old(sqlite3 *db, int iIdx, sqlite3_value **ppValue){$/;"	f
sqlite3_profile	loadext.c	94;"	d	file:
sqlite3_profile	main.c	/^void *sqlite3_profile($/;"	f
sqlite3_profile	sqlite3ext.h	392;"	d
sqlite3_progress_handler	loadext.c	78;"	d	file:
sqlite3_progress_handler	main.c	/^void sqlite3_progress_handler($/;"	f
sqlite3_progress_handler	sqlite3ext.h	393;"	d
sqlite3_quota_fclose	test_quota.c	/^int sqlite3_quota_fclose(quota_FILE *p){$/;"	f
sqlite3_quota_ferror	test_quota.c	/^int sqlite3_quota_ferror(quota_FILE *p){$/;"	f
sqlite3_quota_fflush	test_quota.c	/^int sqlite3_quota_fflush(quota_FILE *p, int doFsync){$/;"	f
sqlite3_quota_file	test_quota.c	/^int sqlite3_quota_file(const char *zFilename){$/;"	f
sqlite3_quota_file_available	test_quota.c	/^long sqlite3_quota_file_available(quota_FILE *p){$/;"	f
sqlite3_quota_file_mtime	test_quota.c	/^int sqlite3_quota_file_mtime(quota_FILE *p, time_t *pTime){$/;"	f
sqlite3_quota_file_size	test_quota.c	/^sqlite3_int64 sqlite3_quota_file_size(quota_FILE *p){$/;"	f
sqlite3_quota_file_truesize	test_quota.c	/^sqlite3_int64 sqlite3_quota_file_truesize(quota_FILE *p){$/;"	f
sqlite3_quota_fopen	test_quota.c	/^quota_FILE *sqlite3_quota_fopen(const char *zFilename, const char *zMode){$/;"	f
sqlite3_quota_fread	test_quota.c	/^size_t sqlite3_quota_fread($/;"	f
sqlite3_quota_fseek	test_quota.c	/^int sqlite3_quota_fseek(quota_FILE *p, long offset, int whence){$/;"	f
sqlite3_quota_ftell	test_quota.c	/^long sqlite3_quota_ftell(quota_FILE *p){$/;"	f
sqlite3_quota_ftruncate	test_quota.c	/^int sqlite3_quota_ftruncate(quota_FILE *p, sqlite3_int64 szNew){$/;"	f
sqlite3_quota_fwrite	test_quota.c	/^size_t sqlite3_quota_fwrite($/;"	f
sqlite3_quota_initialize	test_quota.c	/^int sqlite3_quota_initialize(const char *zOrigVfsName, int makeDefault){$/;"	f
sqlite3_quota_remove	test_quota.c	/^int sqlite3_quota_remove(const char *zFilename){$/;"	f
sqlite3_quota_rewind	test_quota.c	/^void sqlite3_quota_rewind(quota_FILE *p){$/;"	f
sqlite3_quota_set	test_quota.c	/^int sqlite3_quota_set($/;"	f
sqlite3_quota_shutdown	test_quota.c	/^int sqlite3_quota_shutdown(void){$/;"	f
sqlite3_randomness	random.c	/^void sqlite3_randomness(int N, void *pBuf){$/;"	f
sqlite3_randomness	sqlite3ext.h	468;"	d
sqlite3_realloc	malloc.c	/^void *sqlite3_realloc(void *pOld, int n){$/;"	f
sqlite3_realloc	sqlite3ext.h	394;"	d
sqlite3_realloc64	malloc.c	/^void *sqlite3_realloc64(void *pOld, sqlite3_uint64 n){$/;"	f
sqlite3_realloc64	sqlite3ext.h	521;"	d
sqlite3_release_memory	malloc.c	/^int sqlite3_release_memory(int n){$/;"	f
sqlite3_release_memory	sqlite3ext.h	456;"	d
sqlite3_reset	sqlite3ext.h	395;"	d
sqlite3_reset	vdbeapi.c	/^int sqlite3_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_reset_auto_extension	loadext.c	/^void sqlite3_reset_auto_extension(void){$/;"	f
sqlite3_reset_auto_extension	sqlite3ext.h	522;"	d
sqlite3_result_blob	sqlite3ext.h	396;"	d
sqlite3_result_blob	vdbeapi.c	/^void sqlite3_result_blob($/;"	f
sqlite3_result_blob64	sqlite3ext.h	523;"	d
sqlite3_result_blob64	vdbeapi.c	/^void sqlite3_result_blob64($/;"	f
sqlite3_result_double	sqlite3ext.h	397;"	d
sqlite3_result_double	vdbeapi.c	/^void sqlite3_result_double(sqlite3_context *pCtx, double rVal){$/;"	f
sqlite3_result_error	sqlite3ext.h	398;"	d
sqlite3_result_error	vdbeapi.c	/^void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){$/;"	f
sqlite3_result_error16	loadext.c	55;"	d	file:
sqlite3_result_error16	sqlite3ext.h	399;"	d
sqlite3_result_error16	vdbeapi.c	/^void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){$/;"	f
sqlite3_result_error_code	sqlite3ext.h	466;"	d
sqlite3_result_error_code	vdbeapi.c	/^void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){$/;"	f
sqlite3_result_error_nomem	sqlite3ext.h	457;"	d
sqlite3_result_error_nomem	vdbeapi.c	/^void sqlite3_result_error_nomem(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_toobig	sqlite3ext.h	458;"	d
sqlite3_result_error_toobig	vdbeapi.c	/^void sqlite3_result_error_toobig(sqlite3_context *pCtx){$/;"	f
sqlite3_result_int	sqlite3ext.h	400;"	d
sqlite3_result_int	vdbeapi.c	/^void sqlite3_result_int(sqlite3_context *pCtx, int iVal){$/;"	f
sqlite3_result_int64	sqlite3ext.h	401;"	d
sqlite3_result_int64	vdbeapi.c	/^void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){$/;"	f
sqlite3_result_null	sqlite3ext.h	402;"	d
sqlite3_result_null	vdbeapi.c	/^void sqlite3_result_null(sqlite3_context *pCtx){$/;"	f
sqlite3_result_subtype	sqlite3ext.h	533;"	d
sqlite3_result_subtype	vdbeapi.c	/^void sqlite3_result_subtype(sqlite3_context *pCtx, unsigned int eSubtype){$/;"	f
sqlite3_result_text	sqlite3ext.h	403;"	d
sqlite3_result_text	vdbeapi.c	/^void sqlite3_result_text($/;"	f
sqlite3_result_text16	loadext.c	56;"	d	file:
sqlite3_result_text16	sqlite3ext.h	404;"	d
sqlite3_result_text16	vdbeapi.c	/^void sqlite3_result_text16($/;"	f
sqlite3_result_text16be	loadext.c	57;"	d	file:
sqlite3_result_text16be	sqlite3ext.h	405;"	d
sqlite3_result_text16be	vdbeapi.c	/^void sqlite3_result_text16be($/;"	f
sqlite3_result_text16le	loadext.c	58;"	d	file:
sqlite3_result_text16le	sqlite3ext.h	406;"	d
sqlite3_result_text16le	vdbeapi.c	/^void sqlite3_result_text16le($/;"	f
sqlite3_result_text64	sqlite3ext.h	524;"	d
sqlite3_result_text64	vdbeapi.c	/^void sqlite3_result_text64($/;"	f
sqlite3_result_value	sqlite3ext.h	407;"	d
sqlite3_result_value	vdbeapi.c	/^void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){$/;"	f
sqlite3_result_zeroblob	sqlite3ext.h	465;"	d
sqlite3_result_zeroblob	vdbeapi.c	/^void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){$/;"	f
sqlite3_result_zeroblob64	sqlite3ext.h	529;"	d
sqlite3_result_zeroblob64	vdbeapi.c	/^int sqlite3_result_zeroblob64(sqlite3_context *pCtx, u64 n){$/;"	f
sqlite3_rollback_hook	main.c	/^void *sqlite3_rollback_hook($/;"	f
sqlite3_rollback_hook	sqlite3ext.h	408;"	d
sqlite3_search_count	vdbe.c	/^int sqlite3_search_count = 0;$/;"	v
sqlite3_server	test_server.c	/^void *sqlite3_server(void *NotUsed){$/;"	f
sqlite3_server_start	test_server.c	/^void sqlite3_server_start(void){$/;"	f
sqlite3_server_start2	test_server.c	/^void sqlite3_server_start2(int *pnDecr){$/;"	f
sqlite3_server_stop	test_server.c	/^void sqlite3_server_stop(void){$/;"	f
sqlite3_set_authorizer	auth.c	/^int sqlite3_set_authorizer($/;"	f
sqlite3_set_authorizer	loadext.c	39;"	d	file:
sqlite3_set_authorizer	sqlite3ext.h	409;"	d
sqlite3_set_auxdata	sqlite3ext.h	410;"	d
sqlite3_set_auxdata	vdbeapi.c	/^void sqlite3_set_auxdata($/;"	f
sqlite3_shutdown	main.c	/^int sqlite3_shutdown(void){$/;"	f
sqlite3_sleep	main.c	/^int sqlite3_sleep(int ms){$/;"	f
sqlite3_sleep	sqlite3ext.h	459;"	d
sqlite3_snapshot_cmp	wal.c	/^int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2){$/;"	f
sqlite3_snapshot_free	main.c	/^void sqlite3_snapshot_free(sqlite3_snapshot *pSnapshot){$/;"	f
sqlite3_snapshot_get	main.c	/^int sqlite3_snapshot_get($/;"	f
sqlite3_snapshot_open	main.c	/^int sqlite3_snapshot_open($/;"	f
sqlite3_snprintf	printf.c	/^char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){$/;"	f
sqlite3_snprintf	sqlite3ext.h	411;"	d
sqlite3_snprintf_str	test1.c	/^static int SQLITE_TCLAPI sqlite3_snprintf_str($/;"	f	file:
sqlite3_soft_heap_limit	malloc.c	/^void sqlite3_soft_heap_limit(int n){$/;"	f
sqlite3_soft_heap_limit	sqlite3ext.h	460;"	d
sqlite3_soft_heap_limit64	malloc.c	/^sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){$/;"	f
sqlite3_soft_heap_limit64	sqlite3ext.h	488;"	d
sqlite3_sort_count	vdbe.c	/^int sqlite3_sort_count = 0;$/;"	v
sqlite3_sourceid	main.c	/^const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }$/;"	f
sqlite3_sourceid	sqlite3ext.h	489;"	d
sqlite3_sql	sqlite3ext.h	473;"	d
sqlite3_sql	vdbeapi.c	/^const char *sqlite3_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stack_baseline	test1.c	/^static u8 *sqlite3_stack_baseline = 0;$/;"	v	file:
sqlite3_status	sqlite3ext.h	474;"	d
sqlite3_status	status.c	/^int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){$/;"	f
sqlite3_status64	sqlite3ext.h	535;"	d
sqlite3_status64	status.c	/^int sqlite3_status64($/;"	f
sqlite3_step	sqlite3ext.h	412;"	d
sqlite3_step	vdbeapi.c	/^int sqlite3_step(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_busy	sqlite3ext.h	505;"	d
sqlite3_stmt_busy	vdbeapi.c	/^int sqlite3_stmt_busy(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_readonly	sqlite3ext.h	506;"	d
sqlite3_stmt_readonly	vdbeapi.c	/^int sqlite3_stmt_readonly(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_scanstatus	vdbeapi.c	/^int sqlite3_stmt_scanstatus($/;"	f
sqlite3_stmt_scanstatus_reset	vdbeapi.c	/^void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_status	sqlite3ext.h	490;"	d
sqlite3_stmt_status	vdbeapi.c	/^int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){$/;"	f
sqlite3_strglob	func.c	/^int sqlite3_strglob(const char *zGlobPattern, const char *zString){$/;"	f
sqlite3_strglob	sqlite3ext.h	525;"	d
sqlite3_stricmp	sqlite3ext.h	507;"	d
sqlite3_stricmp	util.c	/^int sqlite3_stricmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3_strlike	func.c	/^int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){$/;"	f
sqlite3_strlike	sqlite3ext.h	536;"	d
sqlite3_strnicmp	sqlite3ext.h	491;"	d
sqlite3_strnicmp	util.c	/^int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){$/;"	f
sqlite3_sync_count	os_unix.c	/^int sqlite3_sync_count = 0;$/;"	v
sqlite3_sync_count	os_win.c	/^int sqlite3_sync_count = 0;$/;"	v
sqlite3_system_errno	main.c	/^int sqlite3_system_errno(sqlite3 *db){$/;"	f
sqlite3_system_errno	sqlite3ext.h	539;"	d
sqlite3_table_column_metadata	main.c	/^int sqlite3_table_column_metadata($/;"	f
sqlite3_table_column_metadata	sqlite3ext.h	413;"	d
sqlite3_temp_directory	main.c	/^char *sqlite3_temp_directory = 0;$/;"	v
sqlite3_test_control	main.c	/^int sqlite3_test_control(int op, ...){$/;"	f
sqlite3_test_control	sqlite3ext.h	467;"	d
sqlite3_thread_cleanup	main.c	/^void sqlite3_thread_cleanup(void){$/;"	f
sqlite3_thread_cleanup	sqlite3ext.h	414;"	d
sqlite3_threadsafe	main.c	/^int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }$/;"	f
sqlite3_threadsafe	sqlite3ext.h	464;"	d
sqlite3_total_changes	main.c	/^int sqlite3_total_changes(sqlite3 *db){$/;"	f
sqlite3_total_changes	sqlite3ext.h	415;"	d
sqlite3_trace	loadext.c	95;"	d	file:
sqlite3_trace	main.c	/^void *sqlite3_trace(sqlite3 *db, void(*xTrace)(void*,const char*), void *pArg){$/;"	f
sqlite3_trace	sqlite3ext.h	416;"	d
sqlite3_trace_v2	loadext.c	114;"	d	file:
sqlite3_trace_v2	main.c	/^int sqlite3_trace_v2($/;"	f
sqlite3_trace_v2	sqlite3ext.h	541;"	d
sqlite3_transfer_bindings	sqlite3ext.h	418;"	d
sqlite3_transfer_bindings	vdbeapi.c	/^int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3_unlock_notify	notify.c	/^int sqlite3_unlock_notify($/;"	f
sqlite3_unlock_notify	sqlite3ext.h	492;"	d
sqlite3_update_hook	main.c	/^void *sqlite3_update_hook($/;"	f
sqlite3_update_hook	sqlite3ext.h	420;"	d
sqlite3_uri_boolean	main.c	/^int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){$/;"	f
sqlite3_uri_boolean	sqlite3ext.h	508;"	d
sqlite3_uri_int64	main.c	/^sqlite3_int64 sqlite3_uri_int64($/;"	f
sqlite3_uri_int64	sqlite3ext.h	509;"	d
sqlite3_uri_parameter	main.c	/^const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){$/;"	f
sqlite3_uri_parameter	sqlite3ext.h	510;"	d
sqlite3_uri_vsnprintf	sqlite3ext.h	511;"	d
sqlite3_user_data	sqlite3ext.h	421;"	d
sqlite3_user_data	vdbeapi.c	/^void *sqlite3_user_data(sqlite3_context *p){$/;"	f
sqlite3_userauth	sqliteInt.h	/^struct sqlite3_userauth {$/;"	s
sqlite3_userauth	sqliteInt.h	/^typedef struct sqlite3_userauth sqlite3_userauth;$/;"	t	typeref:struct:sqlite3_userauth
sqlite3_value_blob	sqlite3ext.h	422;"	d
sqlite3_value_blob	vdbeapi.c	/^const void *sqlite3_value_blob(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes	sqlite3ext.h	423;"	d
sqlite3_value_bytes	vdbeapi.c	/^int sqlite3_value_bytes(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes16	sqlite3ext.h	424;"	d
sqlite3_value_bytes16	vdbeapi.c	/^int sqlite3_value_bytes16(sqlite3_value *pVal){$/;"	f
sqlite3_value_double	sqlite3ext.h	425;"	d
sqlite3_value_double	vdbeapi.c	/^double sqlite3_value_double(sqlite3_value *pVal){$/;"	f
sqlite3_value_dup	sqlite3ext.h	527;"	d
sqlite3_value_dup	vdbeapi.c	/^sqlite3_value *sqlite3_value_dup(const sqlite3_value *pOrig){$/;"	f
sqlite3_value_free	sqlite3ext.h	528;"	d
sqlite3_value_free	vdbeapi.c	/^void sqlite3_value_free(sqlite3_value *pOld){$/;"	f
sqlite3_value_int	sqlite3ext.h	426;"	d
sqlite3_value_int	vdbeapi.c	/^int sqlite3_value_int(sqlite3_value *pVal){$/;"	f
sqlite3_value_int64	sqlite3ext.h	427;"	d
sqlite3_value_int64	vdbeapi.c	/^sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){$/;"	f
sqlite3_value_numeric_type	sqlite3ext.h	428;"	d
sqlite3_value_numeric_type	vdbe.c	/^int sqlite3_value_numeric_type(sqlite3_value *pVal){$/;"	f
sqlite3_value_subtype	sqlite3ext.h	532;"	d
sqlite3_value_subtype	vdbeapi.c	/^unsigned int sqlite3_value_subtype(sqlite3_value *pVal){$/;"	f
sqlite3_value_text	sqlite3ext.h	429;"	d
sqlite3_value_text	vdbeapi.c	/^const unsigned char *sqlite3_value_text(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16	loadext.c	59;"	d	file:
sqlite3_value_text16	sqlite3ext.h	430;"	d
sqlite3_value_text16	vdbeapi.c	/^const void *sqlite3_value_text16(sqlite3_value* pVal){$/;"	f
sqlite3_value_text16be	loadext.c	60;"	d	file:
sqlite3_value_text16be	sqlite3ext.h	431;"	d
sqlite3_value_text16be	vdbeapi.c	/^const void *sqlite3_value_text16be(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16le	loadext.c	61;"	d	file:
sqlite3_value_text16le	sqlite3ext.h	432;"	d
sqlite3_value_text16le	vdbeapi.c	/^const void *sqlite3_value_text16le(sqlite3_value *pVal){$/;"	f
sqlite3_value_type	sqlite3ext.h	433;"	d
sqlite3_value_type	vdbeapi.c	/^int sqlite3_value_type(sqlite3_value* pVal){$/;"	f
sqlite3_version	main.c	/^const char sqlite3_version[] = SQLITE_VERSION;$/;"	v
sqlite3_vfs_find	os.c	/^sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){$/;"	f
sqlite3_vfs_find	sqlite3ext.h	461;"	d
sqlite3_vfs_register	os.c	/^int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){$/;"	f
sqlite3_vfs_register	sqlite3ext.h	462;"	d
sqlite3_vfs_unregister	os.c	/^int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){$/;"	f
sqlite3_vfs_unregister	sqlite3ext.h	463;"	d
sqlite3_vfslog_annotate	test_osinst.c	/^int sqlite3_vfslog_annotate(const char *zVfs, const char *zMsg){$/;"	f
sqlite3_vfslog_finalize	test_osinst.c	/^int sqlite3_vfslog_finalize(const char *zVfs){$/;"	f
sqlite3_vfslog_new	test_osinst.c	/^int sqlite3_vfslog_new($/;"	f
sqlite3_vfslog_register	test_osinst.c	/^int sqlite3_vfslog_register(sqlite3 *db){$/;"	f
sqlite3_vmprintf	printf.c	/^char *sqlite3_vmprintf(const char *zFormat, va_list ap){$/;"	f
sqlite3_vmprintf	sqlite3ext.h	434;"	d
sqlite3_vsnprintf	printf.c	/^char *sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){$/;"	f
sqlite3_vsnprintf	sqlite3ext.h	435;"	d
sqlite3_vtab_config	loadext.c	85;"	d	file:
sqlite3_vtab_config	sqlite3ext.h	497;"	d
sqlite3_vtab_config	vtab.c	/^int sqlite3_vtab_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_vtab_on_conflict	loadext.c	86;"	d	file:
sqlite3_vtab_on_conflict	sqlite3ext.h	498;"	d
sqlite3_vtab_on_conflict	vtab.c	/^int sqlite3_vtab_on_conflict(sqlite3 *db){$/;"	f
sqlite3_wal_autocheckpoint	main.c	/^int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){$/;"	f
sqlite3_wal_autocheckpoint	sqlite3ext.h	493;"	d
sqlite3_wal_checkpoint	main.c	/^int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){$/;"	f
sqlite3_wal_checkpoint	sqlite3ext.h	494;"	d
sqlite3_wal_checkpoint_v2	main.c	/^int sqlite3_wal_checkpoint_v2($/;"	f
sqlite3_wal_checkpoint_v2	sqlite3ext.h	512;"	d
sqlite3_wal_hook	main.c	/^void *sqlite3_wal_hook($/;"	f
sqlite3_wal_hook	sqlite3ext.h	495;"	d
sqlite3_win32_compact_heap	os_win.c	/^int sqlite3_win32_compact_heap(LPUINT pnLargest){$/;"	f
sqlite3_win32_is_nt	os_win.c	/^int sqlite3_win32_is_nt(void){$/;"	f
sqlite3_win32_mbcs_to_utf8	os_win.c	/^char *sqlite3_win32_mbcs_to_utf8(const char *zText){$/;"	f
sqlite3_win32_mbcs_to_utf8_v2	os_win.c	/^char *sqlite3_win32_mbcs_to_utf8_v2(const char *zText, int useAnsi){$/;"	f
sqlite3_win32_reset_heap	os_win.c	/^int sqlite3_win32_reset_heap(){$/;"	f
sqlite3_win32_set_directory	os_win.c	/^int sqlite3_win32_set_directory(DWORD type, LPCWSTR zValue){$/;"	f
sqlite3_win32_sleep	os_win.c	/^void sqlite3_win32_sleep(DWORD milliseconds){$/;"	f
sqlite3_win32_unicode_to_utf8	os_win.c	/^char *sqlite3_win32_unicode_to_utf8(LPCWSTR zWideText){$/;"	f
sqlite3_win32_utf8_to_mbcs	os_win.c	/^char *sqlite3_win32_utf8_to_mbcs(const char *zText){$/;"	f
sqlite3_win32_utf8_to_mbcs_v2	os_win.c	/^char *sqlite3_win32_utf8_to_mbcs_v2(const char *zText, int useAnsi){$/;"	f
sqlite3_win32_utf8_to_unicode	os_win.c	/^LPWSTR sqlite3_win32_utf8_to_unicode(const char *zText){$/;"	f
sqlite3_win32_write_debug	os_win.c	/^void sqlite3_win32_write_debug(const char *zBuf, int nBuf){$/;"	f
sqlite3_wsd_find	test_wsd.c	/^void *sqlite3_wsd_find(void *K, int L){$/;"	f
sqlite3_wsd_init	test_wsd.c	/^int sqlite3_wsd_init(int N, int J){$/;"	f
sqlite3_xauth	sqliteInt.h	/^  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,$/;"	t
sqlite3_xferopt_count	insert.c	/^int sqlite3_xferopt_count;$/;"	v
sqlite3demo_superlock	test_superlock.c	/^int sqlite3demo_superlock($/;"	f
sqlite3demo_superunlock	test_superlock.c	/^void sqlite3demo_superunlock(void *pLock){$/;"	f
sqlite3one	sqliteInt.h	/^  const int sqlite3one = 1;$/;"	v
sqlite3one	utf.c	/^const int sqlite3one = 1;$/;"	v
sqliteAuthBadReturnCode	auth.c	/^static void sqliteAuthBadReturnCode(Parse *pParse){$/;"	f	file:
sqliteDefaultBusyCallback	main.c	/^static int sqliteDefaultBusyCallback($/;"	f	file:
sqliteErrorFromPosixError	os_unix.c	/^static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {$/;"	f	file:
sqliteHashData	hash.h	87;"	d
sqliteHashFirst	hash.h	85;"	d
sqliteHashNext	hash.h	86;"	d
sqliteProcessJoin	select.c	/^static int sqliteProcessJoin(Parse *pParse, Select *p){$/;"	f	file:
sqliteViewResetAll	build.c	/^static void sqliteViewResetAll(sqlite3 *db, int idx){$/;"	f	file:
sqliteViewResetAll	build.c	2264;"	d	file:
sqlite_abort	test1.c	/^static int SQLITE_TCLAPI sqlite_abort($/;"	f	file:
sqlite_set_magic	test1.c	/^static int SQLITE_TCLAPI sqlite_set_magic($/;"	f	file:
sqlite_static_bind_nbyte	test1.c	/^static int sqlite_static_bind_nbyte = 0;$/;"	v	file:
sqlite_static_bind_value	test1.c	/^static char *sqlite_static_bind_value = 0;$/;"	v	file:
sqlite_test_close	test1.c	/^static int SQLITE_TCLAPI sqlite_test_close($/;"	f	file:
sqlite_test_close_v2	test1.c	/^static int SQLITE_TCLAPI sqlite_test_close_v2($/;"	f	file:
sqllogCopydb	test_sqllog.c	/^static void sqllogCopydb(struct SLConn *p, const char *zSearch, int bLog){$/;"	f	file:
sqllogFindAttached	test_sqllog.c	/^static int sqllogFindAttached($/;"	f	file:
sqllogFindFile	test_sqllog.c	/^static char *sqllogFindFile(const char *zFile){$/;"	f	file:
sqllogOpenlog	test_sqllog.c	/^static void sqllogOpenlog(struct SLConn *p){$/;"	f	file:
sqllogTokenize	test_sqllog.c	/^static void sqllogTokenize(const char *z, const char **pz, int *pn){$/;"	f	file:
sqllogTraceDb	test_sqllog.c	/^static int sqllogTraceDb(sqlite3 *db){$/;"	f	file:
sqllog_isspace	test_sqllog.c	/^static int sqllog_isspace(char c){$/;"	f	file:
sqllogglobal	test_sqllog.c	/^} sqllogglobal;$/;"	v	typeref:struct:SLGlobal	file:
sqlthread_id	test_thread.c	/^static int SQLITE_TCLAPI sqlthread_id($/;"	f	file:
sqlthread_open	test_thread.c	/^static int SQLITE_TCLAPI sqlthread_open($/;"	f	file:
sqlthread_parent	test_thread.c	/^static int SQLITE_TCLAPI sqlthread_parent($/;"	f	file:
sqlthread_proc	test_thread.c	/^static Tcl_ObjCmdProc sqlthread_proc;$/;"	v	file:
sqlthread_proc	test_thread.c	/^static int SQLITE_TCLAPI sqlthread_proc($/;"	f	file:
sqlthread_spawn	test_thread.c	/^static int SQLITE_TCLAPI sqlthread_spawn($/;"	f	file:
sqrFunc	test_autoext.c	/^static void sqrFunc($/;"	f	file:
sqr_init	test_autoext.c	/^static int sqr_init($/;"	f	file:
startEndFlag	os_unix.c	/^  unsigned char startEndFlag;       \/* 1=rel to end of fork, 0=rel to start *\/$/;"	m	struct:ByteRangeLockPB2	file:
startTime	vdbeInt.h	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe
start_ioerr_simulation	test_journal.c	/^static void start_ioerr_simulation(int iSave, int iSave2){$/;"	f	file:
stat4Destructor	analyze.c	/^static void stat4Destructor(void *pOld){$/;"	f	file:
stat4ValueFromExpr	vdbemem.c	/^static int stat4ValueFromExpr($/;"	f	file:
statBestIndex	dbstat.c	/^static int statBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
statClearPage	dbstat.c	/^static void statClearPage(StatPage *p){$/;"	f	file:
statClose	dbstat.c	/^static int statClose(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
statColumn	dbstat.c	/^static int statColumn($/;"	f	file:
statConnect	dbstat.c	/^static int statConnect($/;"	f	file:
statDecodePage	dbstat.c	/^static int statDecodePage(Btree *pBt, StatPage *p){$/;"	f	file:
statDisconnect	dbstat.c	/^static int statDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
statEof	dbstat.c	/^static int statEof(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
statFilter	dbstat.c	/^static int statFilter($/;"	f	file:
statGet	analyze.c	/^static void statGet($/;"	f	file:
statGetFuncdef	analyze.c	/^static const FuncDef statGetFuncdef = {$/;"	v	file:
statInit	analyze.c	/^static void statInit($/;"	f	file:
statInitFuncdef	analyze.c	/^static const FuncDef statInitFuncdef = {$/;"	v	file:
statMutex	status.c	/^static const char statMutex[] = {$/;"	v	file:
statNext	dbstat.c	/^static int statNext(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
statOpen	dbstat.c	/^static int statOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
statPush	analyze.c	/^static void statPush($/;"	f	file:
statPushFuncdef	analyze.c	/^static const FuncDef statPushFuncdef = {$/;"	v	file:
statResetCsr	dbstat.c	/^static void statResetCsr(StatCursor *pCsr){$/;"	f	file:
statRowid	dbstat.c	/^static int statRowid(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
statSizeAndOffset	dbstat.c	/^static void statSizeAndOffset(StatCursor *pCsr){$/;"	f	file:
statsOn	shell.c	/^  int statsOn;           \/* True to display memory stats before each finalize *\/$/;"	m	struct:ShellState	file:
status	sqlite3ext.h	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines
status64	sqlite3ext.h	/^  int (*status64)(int,sqlite3_int64*,sqlite3_int64*,int);$/;"	m	struct:sqlite3_api_routines
statusFunc	test_loadext.c	/^static void statusFunc($/;"	f	file:
stdin_is_interactive	shell.c	/^static int stdin_is_interactive = 1;$/;"	v	file:
stdout_is_console	shell.c	/^static int stdout_is_console = 1;$/;"	v	file:
step	sqlite3ext.h	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
step_list	sqliteInt.h	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger
stmtLast	tclsqlite.c	/^  SqlPreparedStmt *stmtLast; \/* Last statement in the list *\/$/;"	m	struct:SqliteDb	file:
stmtList	tclsqlite.c	/^  SqlPreparedStmt *stmtList; \/* List of prepared statements*\/$/;"	m	struct:SqliteDb	file:
stmt_busy	sqlite3ext.h	/^  int (*stmt_busy)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
stmt_readonly	sqlite3ext.h	/^  int (*stmt_readonly)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
stmt_status	sqlite3ext.h	/^  int (*stmt_status)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines
stop_ioerr_simulation	test_journal.c	/^static void stop_ioerr_simulation(int *piSave, int *piSave2){$/;"	f	file:
stop_thread	test4.c	/^static void stop_thread(Thread *p){$/;"	f	file:
stop_thread	test7.c	/^static void stop_thread(Thread *p){$/;"	f	file:
storeLastErrno	os_unix.c	/^static void storeLastErrno(unixFile *pFile, int error){$/;"	f	file:
str	vdbeInt.h	/^  StrAccum str;      \/* The string being accumulated *\/$/;"	m	struct:Explain
strHash	hash.c	/^static unsigned int strHash(const char *z){$/;"	f	file:
str_in_array	shell.c	/^static int str_in_array(const char *zStr, const char **azArray){$/;"	f	file:
strappend	test_vfstrace.c	/^static void strappend(char *z, int *pI, const char *zAppend){$/;"	f	file:
strftimeFunc	date.c	/^static void strftimeFunc($/;"	f	file:
strglob	sqlite3ext.h	/^  int (*strglob)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines
stricmp	sqlite3ext.h	/^  int (*stricmp)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines
string_concat	test8.c	/^static void string_concat(char **pzStr, char *zAppend, int doFree, int *pRc){$/;"	f	file:
strlen30	shell.c	/^static int strlen30(const char *z){$/;"	f	file:
strlen30	tclsqlite.c	/^static int strlen30(const char *z){$/;"	f	file:
strlike	sqlite3ext.h	/^  int (*strlike)(const char*,const char*,unsigned int);$/;"	m	struct:sqlite3_api_routines
strnicmp	sqlite3ext.h	/^  int (*strnicmp)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines
subjInMemory	pager.c	/^  u8 subjInMemory;            \/* True to use in-memory sub-journals *\/$/;"	m	struct:Pager	file:
subjRequiresPage	pager.c	/^static int subjRequiresPage(PgHdr *pPg){$/;"	f	file:
subjournalPage	pager.c	/^static int subjournalPage(PgHdr *pPg){$/;"	f	file:
subjournalPageIfRequired	pager.c	/^static int subjournalPageIfRequired(PgHdr *pPg){$/;"	f	file:
substExpr	select.c	/^static Expr *substExpr($/;"	f	file:
substExprList	select.c	/^static void substExprList($/;"	f	file:
substSelect	select.c	/^static void substSelect($/;"	f	file:
substrFunc	func.c	/^static void substrFunc($/;"	f	file:
sumFinalize	func.c	/^static void sumFinalize(sqlite3_context *context){$/;"	f	file:
sumStep	func.c	/^static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
superlockBusyHandler	test_superlock.c	/^static int superlockBusyHandler(void *pCtx, int UNUSED){$/;"	f	file:
superlockIsWal	test_superlock.c	/^static int superlockIsWal(Superlock *pLock){$/;"	f	file:
superlockShmLock	test_superlock.c	/^static int superlockShmLock($/;"	f	file:
superlockWalLock	test_superlock.c	/^static int superlockWalLock($/;"	f	file:
superlock_busy	test_superlock.c	/^static int superlock_busy(void *pCtx, int nBusy){$/;"	f	file:
superlock_cmd	test_superlock.c	/^static int SQLITE_TCLAPI superlock_cmd($/;"	f	file:
superunlock_cmd	test_superlock.c	/^static int SQLITE_TCLAPI superunlock_cmd($/;"	f	file:
superunlock_del	test_superlock.c	/^static void SQLITE_TCLAPI superunlock_del(ClientData cd){$/;"	f	file:
suppressErr	sqliteInt.h	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3
swapMixedEndianFloat	vdbeaux.c	3252;"	d	file:
swapMixedEndianFloat	vdbeaux.c	3254;"	d	file:
switchLockProxyPath	os_unix.c	/^static int switchLockProxyPath(unixFile *pFile, const char *path) {$/;"	f	file:
syncFlags	pager.c	/^  u8 syncFlags;               \/* SYNC_NORMAL or SYNC_FULL otherwise *\/$/;"	m	struct:Pager	file:
syncFlags	wal.c	/^  int syncFlags;               \/* Flags for the fsync *\/$/;"	m	struct:WalWriter	file:
syncFlags	wal.c	/^  u8 syncFlags;              \/* Flags to use to sync header writes *\/$/;"	m	struct:Wal	file:
syncHeader	wal.c	/^  u8 syncHeader;             \/* Fsync the WAL header if true *\/$/;"	m	struct:Wal	file:
syncJournal	pager.c	/^static int syncJournal(Pager *pPager, int newHdr){$/;"	f	file:
synthCollSeq	callback.c	/^static int synthCollSeq(sqlite3 *db, CollSeq *pColl){$/;"	f	file:
system_errno	sqlite3ext.h	/^  int (*system_errno)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
sz	sqliteInt.h	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside
szAlloc	pcache1.c	/^  int szAlloc;                        \/* Total size of one pcache line *\/$/;"	m	struct:PCache1	file:
szAtom	mem5.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	file:
szCache	pcache.c	/^  int szCache;                        \/* Configured cache size *\/$/;"	m	struct:PCache	file:
szCell	btree.c	/^  u16 *szCell;            \/* Local size of all cells in apCell[] *\/$/;"	m	struct:CellArray	file:
szChunk	os_unix.c	/^  int szChunk;                        \/* Configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:unixFile	file:
szChunk	os_win.c	/^  int szChunk;            \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:winFile	file:
szChunk	test_multiplex.c	/^  unsigned int szChunk;            \/* Chunk size used for this group *\/$/;"	m	struct:multiplexGroup	file:
szEst	sqliteInt.h	/^  u8 szEst;        \/* Estimated size of value in this column. sizeof(INT)==1 *\/$/;"	m	struct:Column
szExtra	pcache.c	/^  int szExtra;                        \/* Size of extra space for each page *\/$/;"	m	struct:PCache	file:
szExtra	pcache1.c	/^  int szExtra;                        \/* sizeof(MemPage)+sizeof(PgHdr) *\/$/;"	m	struct:PCache1	file:
szExtra	test_pcache.c	/^  int szExtra;              \/* Size of extra data that accompanies each page *\/$/;"	m	struct:testpcache	file:
szFirstBlock	wal.c	/^  int szFirstBlock;          \/* Size of first block written to WAL file *\/$/;"	m	struct:Wal	file:
szIdxRow	sqliteInt.h	/^  LogEst szIdxRow;         \/* Estimated average row size in bytes *\/$/;"	m	struct:Index
szLookaside	sqliteInt.h	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config
szMalloc	vdbeInt.h	/^  int szMalloc;       \/* Size of the zMalloc allocation *\/$/;"	m	struct:Mem
szMaster	mem3.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	file:
szMmap	pager.c	/^  sqlite3_int64 szMmap;       \/* Desired maximum mmap size *\/$/;"	m	struct:Pager	file:
szMmap	sqliteInt.h	/^  i64 szMmap;                   \/* Default mmap_size setting *\/$/;"	m	struct:sqlite3
szMmap	sqliteInt.h	/^  sqlite3_int64 szMmap;             \/* mmap() space per open file *\/$/;"	m	struct:Sqlite3Config
szOpAlloc	sqliteInt.h	/^  int szOpAlloc;       \/* Bytes of memory space allocated for Vdbe.aOp[] *\/$/;"	m	struct:Parse
szPMA	vdbesort.c	/^  int szPMA;                      \/* Size of pList as PMA in bytes *\/$/;"	m	struct:SorterList	file:
szPage	dbstat.c	/^  int szPage;                     \/* Value of 'pgSize' column *\/$/;"	m	struct:StatCursor	file:
szPage	pcache.c	/^  int szPage;                         \/* Size of every page in this cache *\/$/;"	m	struct:PCache	file:
szPage	pcache1.c	/^  int szPage;                         \/* Size of database content section *\/$/;"	m	struct:PCache1	file:
szPage	sqliteInt.h	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config
szPage	test_pcache.c	/^  int szPage;               \/* Size of each page.  Multiple of 8. *\/$/;"	m	struct:testpcache	file:
szPage	wal.c	/^  int szPage;                  \/* Size of one page *\/$/;"	m	struct:WalWriter	file:
szPage	wal.c	/^  u16 szPage;                     \/* Database page size in bytes. 1==64K *\/$/;"	m	struct:WalIndexHdr	file:
szPage	wal.c	/^  u32 szPage;                \/* Database page size *\/$/;"	m	struct:Wal	file:
szPma	sqliteInt.h	/^  u32 szPma;                        \/* Maximum Sorter PMA size *\/$/;"	m	struct:Sqlite3Config
szRegion	os_unix.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
szRegion	os_win.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:winShmNode	file:
szRow	vdbeInt.h	/^  u32 szRow;            \/* Byte available in aRow *\/$/;"	m	struct:VdbeCursor
szScratch	sqliteInt.h	/^  int szScratch;                    \/* Size of each scratch buffer *\/$/;"	m	struct:Sqlite3Config
szSlot	pcache1.c	/^  int szSlot;                    \/* Size of each free slot *\/$/;"	m	struct:PCacheGlobal	file:
szSpill	pcache.c	/^  int szSpill;                        \/* Size before spilling occurs *\/$/;"	m	struct:PCache	file:
szTabRow	sqliteInt.h	/^  LogEst szTabRow;     \/* Estimated size of each table row in bytes *\/$/;"	m	struct:Table
t1CountCtx	test1.c	/^struct t1CountCtx {$/;"	s	file:
t1CountCtx	test1.c	/^typedef struct t1CountCtx t1CountCtx;$/;"	t	typeref:struct:t1CountCtx	file:
t1CountFinalize	test1.c	/^static void t1CountFinalize(sqlite3_context *context){$/;"	f	file:
t1CountStep	test1.c	/^static void t1CountStep($/;"	f	file:
t1ErrorName	test1.c	132;"	d	file:
t1_ifnullFunc	test1.c	/^static void t1_ifnullFunc($/;"	f	file:
tFinal	test_func.c	/^static void tFinal(sqlite3_context *a){}$/;"	f	file:
tRowcnt	sqliteInt.h	/^ typedef u32 tRowcnt;    \/* 32-bit is the default *\/$/;"	t
tRowcnt	sqliteInt.h	/^ typedef u64 tRowcnt;    \/* 64-bit only if requested at compile-time *\/$/;"	t
tStep	test_func.c	/^static void tStep(sqlite3_context *a, int b, sqlite3_value **c){}$/;"	f	file:
tabFlags	sqliteInt.h	/^  u8 tabFlags;         \/* Mask of TF_* values *\/$/;"	m	struct:Table
tabTnct	select.c	/^  int tabTnct;    \/* Ephemeral table used for DISTINCT processing *\/$/;"	m	struct:DistinctCtx	file:
table	sqliteInt.h	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger
tableAndColumnIndex	select.c	/^static int tableAndColumnIndex($/;"	f	file:
tableOfTrigger	trigger.c	/^static Table *tableOfTrigger(Trigger *pTrigger){$/;"	f	file:
table_column_metadata	sqlite3ext.h	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,$/;"	m	struct:sqlite3_api_routines
targetSrcList	trigger.c	/^static SrcList *targetSrcList($/;"	f	file:
tblHash	sqliteInt.h	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema
tclBestIndex	test_bestindex.c	/^static int tclBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
tclCallbackDestructor	test_quota.c	/^static void tclCallbackDestructor(void *pObj){$/;"	f	file:
tclClose	test_bestindex.c	/^static int tclClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
tclCollateNeeded	tclsqlite.c	/^static void tclCollateNeeded($/;"	f	file:
tclColumn	test_bestindex.c	/^static int tclColumn($/;"	f	file:
tclConnect	test_bestindex.c	/^static int tclConnect($/;"	f	file:
tclDequote	test_bestindex.c	/^static void tclDequote(char *z){$/;"	f	file:
tclDisconnect	test_bestindex.c	/^static int tclDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
tclEof	test_bestindex.c	/^static int tclEof(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
tclFilter	test_bestindex.c	/^static int tclFilter($/;"	f	file:
tclLoadStaticExtensionCmd	test1.c	/^static int SQLITE_TCLAPI tclLoadStaticExtensionCmd($/;"	f	file:
tclModule	test_bestindex.c	/^static sqlite3_module tclModule = {$/;"	v	file:
tclNext	test_bestindex.c	/^static int tclNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
tclOpen	test_bestindex.c	/^static int tclOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
tclQuotaCallback	test_quota.c	/^static void tclQuotaCallback($/;"	f	file:
tclRowid	test_bestindex.c	/^static int tclRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){$/;"	f	file:
tclScriptEvent	test_thread.c	/^static int SQLITE_TCLAPI tclScriptEvent(Tcl_Event *evPtr, int flags){$/;"	f	file:
tclScriptThread	test_thread.c	/^static Tcl_ThreadCreateType tclScriptThread(ClientData pSqlThread){$/;"	f	file:
tclSqlCollate	tclsqlite.c	/^static int tclSqlCollate($/;"	f	file:
tclSqlFunc	tclsqlite.c	/^static void tclSqlFunc(sqlite3_context *context, int argc, sqlite3_value**argv){$/;"	f	file:
tclWriterThread	test_async.c	/^static Tcl_ThreadCreateType tclWriterThread(ClientData pIsStarted){$/;"	f	file:
tcl_client_argc	test7.c	/^static int SQLITE_TCLAPI tcl_client_argc($/;"	f	file:
tcl_client_argv	test7.c	/^static int SQLITE_TCLAPI tcl_client_argv($/;"	f	file:
tcl_client_colname	test7.c	/^static int SQLITE_TCLAPI tcl_client_colname($/;"	f	file:
tcl_client_compile	test7.c	/^static int SQLITE_TCLAPI tcl_client_compile($/;"	f	file:
tcl_client_create	test7.c	/^static int SQLITE_TCLAPI tcl_client_create($/;"	f	file:
tcl_client_error	test7.c	/^static int SQLITE_TCLAPI tcl_client_error($/;"	f	file:
tcl_client_finalize	test7.c	/^static int SQLITE_TCLAPI tcl_client_finalize($/;"	f	file:
tcl_client_halt	test7.c	/^static int SQLITE_TCLAPI tcl_client_halt($/;"	f	file:
tcl_client_reset	test7.c	/^static int SQLITE_TCLAPI tcl_client_reset($/;"	f	file:
tcl_client_result	test7.c	/^static int SQLITE_TCLAPI tcl_client_result($/;"	f	file:
tcl_client_step	test7.c	/^static int SQLITE_TCLAPI tcl_client_step($/;"	f	file:
tcl_client_swap	test7.c	/^static int SQLITE_TCLAPI tcl_client_swap($/;"	f	file:
tcl_client_wait	test7.c	/^static int SQLITE_TCLAPI tcl_client_wait($/;"	f	file:
tcl_cursor	test_bestindex.c	/^struct tcl_cursor {$/;"	s	file:
tcl_cursor	test_bestindex.c	/^typedef struct tcl_cursor tcl_cursor;$/;"	t	typeref:struct:tcl_cursor	file:
tcl_thread_argc	test4.c	/^static int SQLITE_TCLAPI tcl_thread_argc($/;"	f	file:
tcl_thread_argv	test4.c	/^static int SQLITE_TCLAPI tcl_thread_argv($/;"	f	file:
tcl_thread_colname	test4.c	/^static int SQLITE_TCLAPI tcl_thread_colname($/;"	f	file:
tcl_thread_compile	test4.c	/^static int SQLITE_TCLAPI tcl_thread_compile($/;"	f	file:
tcl_thread_create	test4.c	/^static int SQLITE_TCLAPI tcl_thread_create($/;"	f	file:
tcl_thread_db_get	test4.c	/^static int SQLITE_TCLAPI tcl_thread_db_get($/;"	f	file:
tcl_thread_db_put	test4.c	/^static int SQLITE_TCLAPI tcl_thread_db_put($/;"	f	file:
tcl_thread_error	test4.c	/^static int SQLITE_TCLAPI tcl_thread_error($/;"	f	file:
tcl_thread_finalize	test4.c	/^static int SQLITE_TCLAPI tcl_thread_finalize($/;"	f	file:
tcl_thread_halt	test4.c	/^static int SQLITE_TCLAPI tcl_thread_halt($/;"	f	file:
tcl_thread_result	test4.c	/^static int SQLITE_TCLAPI tcl_thread_result($/;"	f	file:
tcl_thread_step	test4.c	/^static int SQLITE_TCLAPI tcl_thread_step($/;"	f	file:
tcl_thread_stmt_get	test4.c	/^static int SQLITE_TCLAPI tcl_thread_stmt_get($/;"	f	file:
tcl_thread_swap	test4.c	/^static int SQLITE_TCLAPI tcl_thread_swap($/;"	f	file:
tcl_thread_wait	test4.c	/^static int SQLITE_TCLAPI tcl_thread_wait($/;"	f	file:
tcl_variable_type	test1.c	/^static int SQLITE_TCLAPI tcl_variable_type($/;"	f	file:
tcl_vtab	test_bestindex.c	/^struct tcl_vtab {$/;"	s	file:
tcl_vtab	test_bestindex.c	/^typedef struct tcl_vtab tcl_vtab;$/;"	t	typeref:struct:tcl_vtab	file:
tclsh_main_loop	tclsqlite.c	/^static const char *tclsh_main_loop(void){$/;"	f	file:
tclvarAddToIdxstr	test_tclvar.c	/^static int tclvarAddToIdxstr(char *zStr, char x){$/;"	f	file:
tclvarBestIndex	test_tclvar.c	/^static int tclvarBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
tclvarClose	test_tclvar.c	/^static int tclvarClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
tclvarColumn	test_tclvar.c	/^static int tclvarColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
tclvarConnect	test_tclvar.c	/^static int tclvarConnect($/;"	f	file:
tclvarDisconnect	test_tclvar.c	/^static int tclvarDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
tclvarEof	test_tclvar.c	/^static int tclvarEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
tclvarFilter	test_tclvar.c	/^static int tclvarFilter($/;"	f	file:
tclvarModule	test_tclvar.c	/^static sqlite3_module tclvarModule = {$/;"	v	file:
tclvarNext	test_tclvar.c	/^static int tclvarNext(sqlite3_vtab_cursor *cur){$/;"	f	file:
tclvarOpen	test_tclvar.c	/^static int tclvarOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
tclvarRowid	test_tclvar.c	/^static int tclvarRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){$/;"	f	file:
tclvarSetOmit	test_tclvar.c	/^static int tclvarSetOmit(Tcl_Interp *interp){$/;"	f	file:
tclvar_cursor	test_tclvar.c	/^struct tclvar_cursor {$/;"	s	file:
tclvar_cursor	test_tclvar.c	/^typedef struct tclvar_cursor tclvar_cursor;$/;"	t	typeref:struct:tclvar_cursor	file:
tclvar_vtab	test_tclvar.c	/^struct tclvar_vtab {$/;"	s	file:
tclvar_vtab	test_tclvar.c	/^typedef struct tclvar_vtab tclvar_vtab;$/;"	t	typeref:struct:tclvar_vtab	file:
tcons	parse.y	/^tcons ::= CHECK LP expr(E) RP onconf.$/;"	l
tcons	parse.y	/^tcons ::= CONSTRAINT nm(X).      {pParse->constraintName = X;}$/;"	l
tcons	parse.y	/^tcons ::= FOREIGN KEY LP eidlist(FA) RP$/;"	l
tcons	parse.y	/^tcons ::= PRIMARY KEY LP sortlist(X) autoinc(I) RP onconf(R).$/;"	l
tcons	parse.y	/^tcons ::= UNIQUE LP sortlist(X) RP onconf(R).$/;"	l
tconscomma	parse.y	/^tconscomma ::= .$/;"	l
tconscomma	parse.y	/^tconscomma ::= COMMA.            {pParse->constraintName.n = 0;}$/;"	l
tempFile	pager.c	/^  u8 tempFile;                \/* zFilename is a temporary or immutable file *\/$/;"	m	struct:Pager	file:
tempReg	sqliteInt.h	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache
temp_store	sqliteInt.h	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3
termCanDriveIndex	where.c	/^static int termCanDriveIndex($/;"	f	file:
termIsEquivalence	whereexpr.c	/^static int termIsEquivalence(Parse *pParse, Expr *pExpr){$/;"	f	file:
testAsyncControl	test_async.c	/^static int SQLITE_TCLAPI testAsyncControl($/;"	f	file:
testAsyncInit	test_async.c	/^static int SQLITE_TCLAPI testAsyncInit($/;"	f	file:
testAsyncShutdown	test_async.c	/^static int SQLITE_TCLAPI testAsyncShutdown($/;"	f	file:
testAsyncStart	test_async.c	/^static int SQLITE_TCLAPI testAsyncStart($/;"	f	file:
testAsyncWait	test_async.c	/^static int SQLITE_TCLAPI testAsyncWait($/;"	f	file:
testBitvecBuiltinTest	test2.c	/^static int SQLITE_TCLAPI testBitvecBuiltinTest($/;"	f	file:
testContextMalloc	test_func.c	/^static void *testContextMalloc(sqlite3_context *context, int nByte){$/;"	f	file:
testCreateCollationCmp	test1.c	/^static int testCreateCollationCmp($/;"	f	file:
testCreateCollationDel	test1.c	/^static void testCreateCollationDel(void *pCtx){$/;"	f	file:
testFunc	test1.c	/^static void testFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
testHexChar	test_func.c	/^static int testHexChar(char c){$/;"	f	file:
testHexToBin	test_func.c	/^static void testHexToBin(const char *zIn, char *zOut){$/;"	f	file:
testHexToInt	test1.c	/^static int testHexToInt(int h){$/;"	f	file:
testHexToUtf16be	test_func.c	/^static void testHexToUtf16be($/;"	f	file:
testHexToUtf16le	test_func.c	/^static void testHexToUtf16le($/;"	f	file:
testHexToUtf8	test_func.c	/^static void testHexToUtf8($/;"	f	file:
testPendingByte	test2.c	/^static int SQLITE_TCLAPI testPendingByte($/;"	f	file:
testSqllog	test_sqllog.c	/^static void testSqllog(void *pCtx, sqlite3 *db, const char *zSql, int eType){$/;"	f	file:
testSqllogStmt	test_sqllog.c	/^static void testSqllogStmt(struct SLConn *p, const char *zSql){$/;"	f	file:
test_addop_breakpoint	vdbeaux.c	/^static void test_addop_breakpoint(void){$/;"	f	file:
test_agg_errmsg16_final	test_func.c	/^static void test_agg_errmsg16_final(sqlite3_context *ctx){$/;"	f	file:
test_agg_errmsg16_step	test_func.c	/^static void test_agg_errmsg16_step(sqlite3_context *a, int b,sqlite3_value **c){$/;"	f	file:
test_alloc_mutex	test_mutex.c	/^static int SQLITE_TCLAPI test_alloc_mutex($/;"	f	file:
test_alt_pcache	test_malloc.c	/^static int SQLITE_TCLAPI test_alt_pcache($/;"	f	file:
test_auxdata	test_func.c	/^static void test_auxdata($/;"	f	file:
test_bad_behavior	test1.c	/^static int SQLITE_TCLAPI test_bad_behavior($/;"	f	file:
test_bind	test1.c	/^static int SQLITE_TCLAPI test_bind($/;"	f	file:
test_bind_blob	test1.c	/^static int SQLITE_TCLAPI test_bind_blob($/;"	f	file:
test_bind_double	test1.c	/^static int SQLITE_TCLAPI test_bind_double($/;"	f	file:
test_bind_int	test1.c	/^static int SQLITE_TCLAPI test_bind_int($/;"	f	file:
test_bind_int64	test1.c	/^static int SQLITE_TCLAPI test_bind_int64($/;"	f	file:
test_bind_null	test1.c	/^static int SQLITE_TCLAPI test_bind_null($/;"	f	file:
test_bind_parameter_count	test1.c	/^static int SQLITE_TCLAPI test_bind_parameter_count($/;"	f	file:
test_bind_parameter_index	test1.c	/^static int SQLITE_TCLAPI test_bind_parameter_index($/;"	f	file:
test_bind_parameter_name	test1.c	/^static int SQLITE_TCLAPI test_bind_parameter_name($/;"	f	file:
test_bind_text	test1.c	/^static int SQLITE_TCLAPI test_bind_text($/;"	f	file:
test_bind_text16	test1.c	/^static int SQLITE_TCLAPI test_bind_text16($/;"	f	file:
test_bind_zeroblob	test1.c	/^static int SQLITE_TCLAPI test_bind_zeroblob($/;"	f	file:
test_bind_zeroblob64	test1.c	/^static int SQLITE_TCLAPI test_bind_zeroblob64($/;"	f	file:
test_blob_bytes	test_blob.c	/^static int SQLITE_TCLAPI test_blob_bytes($/;"	f	file:
test_blob_close	test_blob.c	/^static int SQLITE_TCLAPI test_blob_close($/;"	f	file:
test_blob_open	test_blob.c	/^static int SQLITE_TCLAPI test_blob_open($/;"	f	file:
test_blob_read	test_blob.c	/^static int SQLITE_TCLAPI test_blob_read($/;"	f	file:
test_blob_reopen	test1.c	/^static int SQLITE_TCLAPI test_blob_reopen($/;"	f	file:
test_blob_write	test_blob.c	/^static int SQLITE_TCLAPI test_blob_write($/;"	f	file:
test_breakpoint	shell.c	/^static void test_breakpoint(void){$/;"	f	file:
test_breakpoint	test1.c	/^static int SQLITE_TCLAPI test_breakpoint($/;"	f	file:
test_busy_timeout	test1.c	/^static int SQLITE_TCLAPI test_busy_timeout($/;"	f	file:
test_changes	test1.c	/^static int SQLITE_TCLAPI test_changes($/;"	f	file:
test_clear_bindings	test1.c	/^static int SQLITE_TCLAPI test_clear_bindings($/;"	f	file:
test_clear_mutex_counters	test_mutex.c	/^static int SQLITE_TCLAPI test_clear_mutex_counters($/;"	f	file:
test_collate	test1.c	/^static int SQLITE_TCLAPI test_collate($/;"	f	file:
test_collate_func	test1.c	/^static int test_collate_func($/;"	f	file:
test_collate_needed	test1.c	/^static int SQLITE_TCLAPI test_collate_needed($/;"	f	file:
test_collate_needed_cb	test1.c	/^static void test_collate_needed_cb($/;"	f	file:
test_column_blob	test1.c	/^static int SQLITE_TCLAPI test_column_blob($/;"	f	file:
test_column_count	test1.c	/^static int SQLITE_TCLAPI test_column_count($/;"	f	file:
test_column_double	test1.c	/^static int SQLITE_TCLAPI test_column_double($/;"	f	file:
test_column_int64	test1.c	/^static int SQLITE_TCLAPI test_column_int64($/;"	f	file:
test_column_type	test1.c	/^static int SQLITE_TCLAPI test_column_type($/;"	f	file:
test_complete16	test1.c	/^static int SQLITE_TCLAPI test_complete16($/;"	f	file:
test_config	test_mutex.c	/^static int SQLITE_TCLAPI test_config($/;"	f	file:
test_config_cis	test_malloc.c	/^static int SQLITE_TCLAPI test_config_cis($/;"	f	file:
test_config_error	test_malloc.c	/^static int SQLITE_TCLAPI test_config_error($/;"	f	file:
test_config_heap	test_malloc.c	/^static int SQLITE_TCLAPI test_config_heap($/;"	f	file:
test_config_heap_size	test_malloc.c	/^static int SQLITE_TCLAPI test_config_heap_size($/;"	f	file:
test_config_lookaside	test_malloc.c	/^static int SQLITE_TCLAPI test_config_lookaside($/;"	f	file:
test_config_memstatus	test_malloc.c	/^static int SQLITE_TCLAPI test_config_memstatus($/;"	f	file:
test_config_pagecache	test_malloc.c	/^static int SQLITE_TCLAPI test_config_pagecache($/;"	f	file:
test_config_pmasz	test_malloc.c	/^static int SQLITE_TCLAPI test_config_pmasz($/;"	f	file:
test_config_scratch	test_malloc.c	/^static int SQLITE_TCLAPI test_config_scratch($/;"	f	file:
test_config_sqllog	test1.c	/^static int SQLITE_TCLAPI test_config_sqllog($/;"	f	file:
test_config_uri	test_malloc.c	/^static int SQLITE_TCLAPI test_config_uri($/;"	f	file:
test_control	sqlite3ext.h	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines
test_create_aggregate	test1.c	/^static int SQLITE_TCLAPI test_create_aggregate($/;"	f	file:
test_create_collation_v2	test1.c	/^static int SQLITE_TCLAPI test_create_collation_v2($/;"	f	file:
test_create_function	test1.c	/^static int SQLITE_TCLAPI test_create_function($/;"	f	file:
test_create_function_v2	test1.c	/^static int SQLITE_TCLAPI test_create_function_v2($/;"	f	file:
test_data_count	test1.c	/^static int SQLITE_TCLAPI test_data_count($/;"	f	file:
test_db_cacheflush	test1.c	/^static int SQLITE_TCLAPI test_db_cacheflush($/;"	f	file:
test_db_config_lookaside	test_malloc.c	/^static int SQLITE_TCLAPI test_db_config_lookaside($/;"	f	file:
test_db_filename	test1.c	/^static int SQLITE_TCLAPI test_db_filename($/;"	f	file:
test_db_readonly	test1.c	/^static int SQLITE_TCLAPI test_db_readonly($/;"	f	file:
test_db_release_memory	test1.c	/^static int SQLITE_TCLAPI test_db_release_memory($/;"	f	file:
test_db_status	test_malloc.c	/^static int SQLITE_TCLAPI test_db_status($/;"	f	file:
test_decode	test_func.c	/^static void test_decode($/;"	f	file:
test_destructor	test_func.c	/^static void test_destructor($/;"	f	file:
test_destructor16	test_func.c	/^static void test_destructor16($/;"	f	file:
test_destructor_count	test_func.c	/^static void test_destructor_count($/;"	f	file:
test_destructor_count_var	test_func.c	/^static int test_destructor_count_var = 0;$/;"	v	file:
test_doublearray_addr	test1.c	/^static int SQLITE_TCLAPI test_doublearray_addr($/;"	f	file:
test_dump_memsys3	test_malloc.c	/^static int SQLITE_TCLAPI test_dump_memsys3($/;"	f	file:
test_enable_load	test1.c	/^static int SQLITE_TCLAPI test_enable_load($/;"	f	file:
test_enable_shared	test1.c	/^static int SQLITE_TCLAPI test_enable_shared($/;"	f	file:
test_enter_db_mutex	test_mutex.c	/^static int SQLITE_TCLAPI test_enter_db_mutex($/;"	f	file:
test_enter_static_mutex	test_mutex.c	/^static int SQLITE_TCLAPI test_enter_static_mutex($/;"	f	file:
test_errcode	test1.c	/^static int SQLITE_TCLAPI test_errcode($/;"	f	file:
test_errmsg	test1.c	/^static int SQLITE_TCLAPI test_errmsg($/;"	f	file:
test_errmsg16	test1.c	/^static int SQLITE_TCLAPI test_errmsg16($/;"	f	file:
test_error	test_func.c	/^static void test_error($/;"	f	file:
test_errstr	test1.c	/^static int SQLITE_TCLAPI test_errstr($/;"	f	file:
test_eval	test_func.c	/^static void test_eval($/;"	f	file:
test_ex_errcode	test1.c	/^static int SQLITE_TCLAPI test_ex_errcode($/;"	f	file:
test_ex_sql	test1.c	/^static int SQLITE_TCLAPI test_ex_sql($/;"	f	file:
test_exec	test1.c	/^static int SQLITE_TCLAPI test_exec($/;"	f	file:
test_exec_hex	test1.c	/^static int SQLITE_TCLAPI test_exec_hex($/;"	f	file:
test_exec_nr	test1.c	/^static int SQLITE_TCLAPI test_exec_nr($/;"	f	file:
test_exec_printf	test1.c	/^static int SQLITE_TCLAPI test_exec_printf($/;"	f	file:
test_expired	test1.c	/^static int SQLITE_TCLAPI test_expired($/;"	f	file:
test_extended_result_codes	test1.c	/^static int SQLITE_TCLAPI test_extended_result_codes($/;"	f	file:
test_extract	test_func.c	/^static void test_extract($/;"	f	file:
test_finalize	test1.c	/^static int SQLITE_TCLAPI test_finalize($/;"	f	file:
test_free	test_malloc.c	/^static int SQLITE_TCLAPI test_free($/;"	f	file:
test_function	test1.c	/^static int SQLITE_TCLAPI test_function($/;"	f	file:
test_function_utf16be	test1.c	/^static void test_function_utf16be($/;"	f	file:
test_function_utf16le	test1.c	/^static void test_function_utf16le($/;"	f	file:
test_function_utf8	test1.c	/^static void test_function_utf8($/;"	f	file:
test_get_table_printf	test1.c	/^static int SQLITE_TCLAPI test_get_table_printf($/;"	f	file:
test_getrusage	test1.c	/^static int SQLITE_TCLAPI test_getrusage($/;"	f	file:
test_getsubtype	test_func.c	/^static void test_getsubtype($/;"	f	file:
test_global_recover	test1.c	/^static int SQLITE_TCLAPI test_global_recover($/;"	f	file:
test_initialize	test_mutex.c	/^static int SQLITE_TCLAPI test_initialize($/;"	f	file:
test_install_malloc_faultsim	test_malloc.c	/^static int SQLITE_TCLAPI test_install_malloc_faultsim($/;"	f	file:
test_install_memsys3	test_malloc.c	/^static int SQLITE_TCLAPI test_install_memsys3($/;"	f	file:
test_install_mutex_counters	test_mutex.c	/^static int SQLITE_TCLAPI test_install_mutex_counters($/;"	f	file:
test_int64array_addr	test1.c	/^static int SQLITE_TCLAPI test_int64array_addr($/;"	f	file:
test_intarray_addr	test1.c	/^static int SQLITE_TCLAPI test_intarray_addr($/;"	f	file:
test_intarray_bind	test_intarray.c	/^static int SQLITE_TCLAPI test_intarray_bind($/;"	f	file:
test_intarray_create	test_intarray.c	/^static int SQLITE_TCLAPI test_intarray_create($/;"	f	file:
test_interrupt	test1.c	/^static int SQLITE_TCLAPI test_interrupt($/;"	f	file:
test_io_trace	test1.c	/^static int SQLITE_TCLAPI test_io_trace($/;"	f	file:
test_isolation	test_func.c	/^static void test_isolation($/;"	f	file:
test_key	test1.c	/^static int SQLITE_TCLAPI test_key($/;"	f	file:
test_last_rowid	test1.c	/^static int SQLITE_TCLAPI test_last_rowid($/;"	f	file:
test_leave_db_mutex	test_mutex.c	/^static int SQLITE_TCLAPI test_leave_db_mutex($/;"	f	file:
test_leave_static_mutex	test_mutex.c	/^static int SQLITE_TCLAPI test_leave_static_mutex($/;"	f	file:
test_libversion_number	test1.c	/^static int SQLITE_TCLAPI test_libversion_number($/;"	f	file:
test_limit	test1.c	/^static int SQLITE_TCLAPI test_limit($/;"	f	file:
test_load_extension	test1.c	/^static int SQLITE_TCLAPI test_load_extension($/;"	f	file:
test_malloc	test_malloc.c	/^static int SQLITE_TCLAPI test_malloc($/;"	f	file:
test_memdebug_backtrace	test_malloc.c	/^static int SQLITE_TCLAPI test_memdebug_backtrace($/;"	f	file:
test_memdebug_callback	test_malloc.c	/^static void test_memdebug_callback(int nByte, int nFrame, void **aFrame){$/;"	f	file:
test_memdebug_dump	test_malloc.c	/^static int SQLITE_TCLAPI test_memdebug_dump($/;"	f	file:
test_memdebug_fail	test_malloc.c	/^static int SQLITE_TCLAPI test_memdebug_fail($/;"	f	file:
test_memdebug_log	test_malloc.c	/^static int SQLITE_TCLAPI test_memdebug_log($/;"	f	file:
test_memdebug_log_clear	test_malloc.c	/^static void test_memdebug_log_clear(void){$/;"	f	file:
test_memdebug_malloc_count	test_malloc.c	/^static int SQLITE_TCLAPI test_memdebug_malloc_count($/;"	f	file:
test_memdebug_pending	test_malloc.c	/^static int SQLITE_TCLAPI test_memdebug_pending($/;"	f	file:
test_memdebug_settitle	test_malloc.c	/^static int SQLITE_TCLAPI test_memdebug_settitle($/;"	f	file:
test_memget	test_malloc.c	/^static int SQLITE_TCLAPI test_memget($/;"	f	file:
test_memory_highwater	test_malloc.c	/^static int SQLITE_TCLAPI test_memory_highwater($/;"	f	file:
test_memory_used	test_malloc.c	/^static int SQLITE_TCLAPI test_memory_used($/;"	f	file:
test_memset	test_malloc.c	/^static int SQLITE_TCLAPI test_memset($/;"	f	file:
test_mprintf_n	test1.c	/^static int SQLITE_TCLAPI test_mprintf_n($/;"	f	file:
test_mprintf_z	test1.c	/^static int SQLITE_TCLAPI test_mprintf_z($/;"	f	file:
test_multiplex_control	test_multiplex.c	/^static int SQLITE_TCLAPI test_multiplex_control($/;"	f	file:
test_multiplex_dump	test_multiplex.c	/^static int SQLITE_TCLAPI test_multiplex_dump($/;"	f	file:
test_multiplex_initialize	test_multiplex.c	/^static int SQLITE_TCLAPI test_multiplex_initialize($/;"	f	file:
test_multiplex_shutdown	test_multiplex.c	/^static int SQLITE_TCLAPI test_multiplex_shutdown($/;"	f	file:
test_mutex_globals	test_mutex.c	/^static struct test_mutex_globals {$/;"	s	file:
test_next_stmt	test1.c	/^static int SQLITE_TCLAPI test_next_stmt($/;"	f	file:
test_open	test1.c	/^static int SQLITE_TCLAPI test_open($/;"	f	file:
test_open16	test1.c	/^static int SQLITE_TCLAPI test_open16($/;"	f	file:
test_open_v2	test1.c	/^static int SQLITE_TCLAPI test_open_v2($/;"	f	file:
test_pager_refcounts	test1.c	/^static int SQLITE_TCLAPI test_pager_refcounts($/;"	f	file:
test_pagesize	test2.c	/^static int test_pagesize = 1024;$/;"	v	file:
test_pcache_stats	test1.c	/^static int SQLITE_TCLAPI test_pcache_stats($/;"	f	file:
test_prepare	test1.c	/^static int SQLITE_TCLAPI test_prepare($/;"	f	file:
test_prepare16	test1.c	/^static int SQLITE_TCLAPI test_prepare16($/;"	f	file:
test_prepare16_v2	test1.c	/^static int SQLITE_TCLAPI test_prepare16_v2($/;"	f	file:
test_prepare_tkt3134	test1.c	/^static int SQLITE_TCLAPI test_prepare_tkt3134($/;"	f	file:
test_prepare_v2	test1.c	/^static int SQLITE_TCLAPI test_prepare_v2($/;"	f	file:
test_print_eqp	test1.c	/^static int SQLITE_TCLAPI test_print_eqp($/;"	f	file:
test_printf	test1.c	/^static int SQLITE_TCLAPI test_printf($/;"	f	file:
test_quota_dump	test_quota.c	/^static int SQLITE_TCLAPI test_quota_dump($/;"	f	file:
test_quota_fclose	test_quota.c	/^static int SQLITE_TCLAPI test_quota_fclose($/;"	f	file:
test_quota_ferror	test_quota.c	/^static int SQLITE_TCLAPI test_quota_ferror($/;"	f	file:
test_quota_fflush	test_quota.c	/^static int SQLITE_TCLAPI test_quota_fflush($/;"	f	file:
test_quota_file	test_quota.c	/^static int SQLITE_TCLAPI test_quota_file($/;"	f	file:
test_quota_file_available	test_quota.c	/^static int SQLITE_TCLAPI test_quota_file_available($/;"	f	file:
test_quota_file_mtime	test_quota.c	/^static int SQLITE_TCLAPI test_quota_file_mtime($/;"	f	file:
test_quota_file_size	test_quota.c	/^static int SQLITE_TCLAPI test_quota_file_size($/;"	f	file:
test_quota_file_truesize	test_quota.c	/^static int SQLITE_TCLAPI test_quota_file_truesize($/;"	f	file:
test_quota_fopen	test_quota.c	/^static int SQLITE_TCLAPI test_quota_fopen($/;"	f	file:
test_quota_fread	test_quota.c	/^static int SQLITE_TCLAPI test_quota_fread($/;"	f	file:
test_quota_fseek	test_quota.c	/^static int SQLITE_TCLAPI test_quota_fseek($/;"	f	file:
test_quota_ftell	test_quota.c	/^static int SQLITE_TCLAPI test_quota_ftell($/;"	f	file:
test_quota_ftruncate	test_quota.c	/^static int SQLITE_TCLAPI test_quota_ftruncate($/;"	f	file:
test_quota_fwrite	test_quota.c	/^static int SQLITE_TCLAPI test_quota_fwrite($/;"	f	file:
test_quota_glob	test_quota.c	/^static int SQLITE_TCLAPI test_quota_glob($/;"	f	file:
test_quota_initialize	test_quota.c	/^static int SQLITE_TCLAPI test_quota_initialize($/;"	f	file:
test_quota_remove	test_quota.c	/^static int SQLITE_TCLAPI test_quota_remove($/;"	f	file:
test_quota_rewind	test_quota.c	/^static int SQLITE_TCLAPI test_quota_rewind($/;"	f	file:
test_quota_set	test_quota.c	/^static int SQLITE_TCLAPI test_quota_set($/;"	f	file:
test_quota_shutdown	test_quota.c	/^static int SQLITE_TCLAPI test_quota_shutdown($/;"	f	file:
test_read_mutex_counters	test_mutex.c	/^static int SQLITE_TCLAPI test_read_mutex_counters($/;"	f	file:
test_realloc	test_malloc.c	/^static int SQLITE_TCLAPI test_realloc($/;"	f	file:
test_register_dbstat_vtab	test1.c	/^static int SQLITE_TCLAPI test_register_dbstat_vtab($/;"	f	file:
test_register_func	test1.c	/^static int SQLITE_TCLAPI test_register_func($/;"	f	file:
test_rekey	test1.c	/^static int SQLITE_TCLAPI test_rekey($/;"	f	file:
test_release_memory	test1.c	/^static int SQLITE_TCLAPI test_release_memory($/;"	f	file:
test_reset	test1.c	/^static int SQLITE_TCLAPI test_reset($/;"	f	file:
test_setsubtype	test_func.c	/^static void test_setsubtype($/;"	f	file:
test_shutdown	test_mutex.c	/^static int SQLITE_TCLAPI test_shutdown($/;"	f	file:
test_sleep	test1.c	/^static int SQLITE_TCLAPI test_sleep($/;"	f	file:
test_snapshot_cmp	test1.c	/^static int SQLITE_TCLAPI test_snapshot_cmp($/;"	f	file:
test_snapshot_free	test1.c	/^static int SQLITE_TCLAPI test_snapshot_free($/;"	f	file:
test_snapshot_get	test1.c	/^static int SQLITE_TCLAPI test_snapshot_get($/;"	f	file:
test_snapshot_open	test1.c	/^static int SQLITE_TCLAPI test_snapshot_open($/;"	f	file:
test_snprintf_int	test1.c	/^static int SQLITE_TCLAPI test_snprintf_int($/;"	f	file:
test_soft_heap_limit	test1.c	/^static int SQLITE_TCLAPI test_soft_heap_limit($/;"	f	file:
test_sql	test1.c	/^static int SQLITE_TCLAPI test_sql($/;"	f	file:
test_sqlite3_db_config	test1.c	/^static int SQLITE_TCLAPI test_sqlite3_db_config($/;"	f	file:
test_sqlite3_log	test1.c	/^static int SQLITE_TCLAPI test_sqlite3_log($/;"	f	file:
test_stack_used	test1.c	/^static int SQLITE_TCLAPI test_stack_used($/;"	f	file:
test_status	test_malloc.c	/^static int SQLITE_TCLAPI test_status($/;"	f	file:
test_step	test1.c	/^static int SQLITE_TCLAPI test_step($/;"	f	file:
test_stmt_busy	test1.c	/^static int SQLITE_TCLAPI test_stmt_busy($/;"	f	file:
test_stmt_int	test1.c	/^static int SQLITE_TCLAPI test_stmt_int($/;"	f	file:
test_stmt_readonly	test1.c	/^static int SQLITE_TCLAPI test_stmt_readonly($/;"	f	file:
test_stmt_scanstatus	test1.c	/^static int SQLITE_TCLAPI test_stmt_scanstatus($/;"	f	file:
test_stmt_scanstatus_reset	test1.c	/^static int SQLITE_TCLAPI test_stmt_scanstatus_reset($/;"	f	file:
test_stmt_status	test1.c	/^static int SQLITE_TCLAPI test_stmt_status($/;"	f	file:
test_stmt_utf16	test1.c	/^static int SQLITE_TCLAPI test_stmt_utf16($/;"	f	file:
test_stmt_utf8	test1.c	/^static int SQLITE_TCLAPI test_stmt_utf8($/;"	f	file:
test_syscall	test_syscall.c	/^static int SQLITE_TCLAPI test_syscall($/;"	f	file:
test_syscall_defaultvfs	test_syscall.c	/^static int SQLITE_TCLAPI test_syscall_defaultvfs($/;"	f	file:
test_syscall_errno	test_syscall.c	/^static int SQLITE_TCLAPI test_syscall_errno($/;"	f	file:
test_syscall_exists	test_syscall.c	/^static int SQLITE_TCLAPI test_syscall_exists($/;"	f	file:
test_syscall_fault	test_syscall.c	/^static int SQLITE_TCLAPI test_syscall_fault($/;"	f	file:
test_syscall_install	test_syscall.c	/^static int SQLITE_TCLAPI test_syscall_install($/;"	f	file:
test_syscall_list	test_syscall.c	/^static int SQLITE_TCLAPI test_syscall_list($/;"	f	file:
test_syscall_pagesize	test_syscall.c	/^static int SQLITE_TCLAPI test_syscall_pagesize($/;"	f	file:
test_syscall_reset	test_syscall.c	/^static int SQLITE_TCLAPI test_syscall_reset($/;"	f	file:
test_syscall_uninstall	test_syscall.c	/^static int SQLITE_TCLAPI test_syscall_uninstall($/;"	f	file:
test_system_errno	test1.c	/^static int SQLITE_TCLAPI test_system_errno($/;"	f	file:
test_table_column_metadata	test1.c	/^static int SQLITE_TCLAPI test_table_column_metadata($/;"	f	file:
test_test_control	test1.c	/^static int SQLITE_TCLAPI test_test_control($/;"	f	file:
test_textarray_addr	test1.c	/^static int SQLITE_TCLAPI test_textarray_addr($/;"	f	file:
test_thread_cleanup	test1.c	/^static int SQLITE_TCLAPI test_thread_cleanup($/;"	f	file:
test_transfer_bind	test1.c	/^static int SQLITE_TCLAPI test_transfer_bind($/;"	f	file:
test_translate	test5.c	/^static int SQLITE_TCLAPI test_translate($/;"	f	file:
test_translate_selftest	test5.c	/^static int SQLITE_TCLAPI test_translate_selftest($/;"	f	file:
test_unlock_notify	test1.c	/^static int SQLITE_TCLAPI test_unlock_notify($/;"	f	file:
test_unlock_notify_cb	test1.c	/^static void test_unlock_notify_cb(void **aArg, int nArg){$/;"	f	file:
test_user_add	test1.c	/^static int SQLITE_TCLAPI test_user_add($/;"	f	file:
test_user_authenticate	test1.c	/^static int SQLITE_TCLAPI test_user_authenticate($/;"	f	file:
test_user_change	test1.c	/^static int SQLITE_TCLAPI test_user_change($/;"	f	file:
test_user_delete	test1.c	/^static int SQLITE_TCLAPI test_user_delete($/;"	f	file:
test_utf16bin_collate	test1.c	/^static int SQLITE_TCLAPI test_utf16bin_collate($/;"	f	file:
test_utf16bin_collate_func	test1.c	/^static int test_utf16bin_collate_func($/;"	f	file:
test_value_overhead	test5.c	/^static int SQLITE_TCLAPI test_value_overhead($/;"	f	file:
test_vfs_oom_test	test_malloc.c	/^static int SQLITE_TCLAPI test_vfs_oom_test($/;"	f	file:
test_vfslog	test_osinst.c	/^static int SQLITE_TCLAPI test_vfslog($/;"	f	file:
test_wal_autocheckpoint	test1.c	/^static int SQLITE_TCLAPI test_wal_autocheckpoint($/;"	f	file:
test_wal_checkpoint	test1.c	/^static int SQLITE_TCLAPI test_wal_checkpoint($/;"	f	file:
test_wal_checkpoint_v2	test1.c	/^static int SQLITE_TCLAPI test_wal_checkpoint_v2($/;"	f	file:
test_zeroblob	test_func.c	/^static void test_zeroblob($/;"	f	file:
testasync_g	test_async.c	/^} testasync_g = { 0 };$/;"	v	typeref:struct:TestAsyncGlobal
testasync_g_writerMutex	test_async.c	/^TCL_DECLARE_MUTEX(testasync_g_writerMutex);$/;"	v
testcase	sqliteInt.h	377;"	d
testcase	sqliteInt.h	379;"	d
testpcache	test_pcache.c	/^struct testpcache {$/;"	s	file:
testpcache	test_pcache.c	/^typedef struct testpcache testpcache;$/;"	t	typeref:struct:testpcache	file:
testpcacheCachesize	test_pcache.c	/^static void testpcacheCachesize(sqlite3_pcache *pCache, int newSize){$/;"	f	file:
testpcacheCreate	test_pcache.c	/^static sqlite3_pcache *testpcacheCreate($/;"	f	file:
testpcacheDestroy	test_pcache.c	/^static void testpcacheDestroy(sqlite3_pcache *pCache){$/;"	f	file:
testpcacheFetch	test_pcache.c	/^static sqlite3_pcache_page *testpcacheFetch($/;"	f	file:
testpcacheGlobal	test_pcache.c	/^static testpcacheGlobalType testpcacheGlobal;$/;"	v	file:
testpcacheGlobalType	test_pcache.c	/^struct testpcacheGlobalType {$/;"	s	file:
testpcacheGlobalType	test_pcache.c	/^typedef struct testpcacheGlobalType testpcacheGlobalType;$/;"	t	typeref:struct:testpcacheGlobalType	file:
testpcacheInit	test_pcache.c	/^static int testpcacheInit(void *pArg){$/;"	f	file:
testpcachePage	test_pcache.c	/^  struct testpcachePage {$/;"	s	struct:testpcache	file:
testpcachePagecount	test_pcache.c	/^static int testpcachePagecount(sqlite3_pcache *pCache){$/;"	f	file:
testpcacheRandom	test_pcache.c	/^static unsigned testpcacheRandom(testpcache *p){$/;"	f	file:
testpcacheRekey	test_pcache.c	/^static void testpcacheRekey($/;"	f	file:
testpcacheShutdown	test_pcache.c	/^static void testpcacheShutdown(void *pArg){$/;"	f	file:
testpcacheTruncate	test_pcache.c	/^static void testpcacheTruncate(sqlite3_pcache *pCache, unsigned iLimit){$/;"	f	file:
testpcacheUnpin	test_pcache.c	/^static void testpcacheUnpin($/;"	f	file:
testvfs_cmd	test_vfs.c	/^static int SQLITE_TCLAPI testvfs_cmd($/;"	f	file:
testvfs_obj_cmd	test_vfs.c	/^static int SQLITE_TCLAPI testvfs_obj_cmd($/;"	f	file:
testvfs_obj_del	test_vfs.c	/^static void SQLITE_TCLAPI testvfs_obj_del(ClientData cd){$/;"	f	file:
textToPointer	test_malloc.c	/^static int textToPointer(const char *z, void **pp){$/;"	f	file:
thread_cleanup	sqlite3ext.h	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines
thread_main	test4.c	/^static void *thread_main(void *pArg){$/;"	f	file:
thread_wait	test4.c	/^static void thread_wait(Thread *p){$/;"	f	file:
threadid	os_unix.c	307;"	d	file:
threadid	os_unix.c	309;"	d	file:
threadset	test4.c	/^static Thread threadset[N_THREAD];$/;"	v	file:
threadset	test7.c	/^static Thread threadset[N_THREAD];$/;"	v	file:
tid	threads.c	/^  pthread_t tid;                 \/* Thread ID *\/$/;"	m	struct:SQLiteThread	file:
tid	threads.c	/^  void *tid;               \/* The thread handle *\/$/;"	m	struct:SQLiteThread	file:
timeDiff	shell.c	/^static double timeDiff(FILETIME *pStart, FILETIME *pEnd){$/;"	f	file:
timeDiff	shell.c	/^static double timeDiff(struct timeval *pStart, struct timeval *pEnd){$/;"	f	file:
timeFunc	date.c	/^static void timeFunc($/;"	f	file:
timeOfDay	shell.c	/^static sqlite3_int64 timeOfDay(void){$/;"	f	file:
tkCREATE	complete.c	45;"	d	file:
tkEND	complete.c	48;"	d	file:
tkEXPLAIN	complete.c	44;"	d	file:
tkOTHER	complete.c	42;"	d	file:
tkSEMI	complete.c	40;"	d	file:
tkTEMP	complete.c	46;"	d	file:
tkTRIGGER	complete.c	47;"	d	file:
tkWS	complete.c	41;"	d	file:
tkt2213Function	test1.c	/^static void tkt2213Function($/;"	f	file:
tmask	insert.c	1077;"	d	file:
tmpCheckReservedLock	test_onefile.c	/^static int tmpCheckReservedLock(sqlite3_file *pFile, int *pResOut){$/;"	f	file:
tmpClose	test_onefile.c	/^static int tmpClose(sqlite3_file *pFile){$/;"	f	file:
tmpDeviceCharacteristics	test_onefile.c	/^static int tmpDeviceCharacteristics(sqlite3_file *pFile){$/;"	f	file:
tmpFileControl	test_onefile.c	/^static int tmpFileControl(sqlite3_file *pFile, int op, void *pArg){$/;"	f	file:
tmpFileSize	test_onefile.c	/^static int tmpFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){$/;"	f	file:
tmpLock	test_onefile.c	/^static int tmpLock(sqlite3_file *pFile, int eLock){$/;"	f	file:
tmpRead	test_onefile.c	/^static int tmpRead($/;"	f	file:
tmpSectorSize	test_onefile.c	/^static int tmpSectorSize(sqlite3_file *pFile){$/;"	f	file:
tmpSync	test_onefile.c	/^static int tmpSync(sqlite3_file *pFile, int flags){$/;"	f	file:
tmpTruncate	test_onefile.c	/^static int tmpTruncate(sqlite3_file *pFile, sqlite_int64 size){$/;"	f	file:
tmpUnlock	test_onefile.c	/^static int tmpUnlock(sqlite3_file *pFile, int eLock){$/;"	f	file:
tmpWrite	test_onefile.c	/^static int tmpWrite($/;"	f	file:
tmp_file	test_onefile.c	/^struct tmp_file {$/;"	s	file:
tmp_file	test_onefile.c	/^typedef struct tmp_file tmp_file;$/;"	t	typeref:struct:tmp_file	file:
tmp_io_methods	test_onefile.c	/^static sqlite3_io_methods tmp_io_methods = {$/;"	v	file:
tnum	sqliteInt.h	/^  int tnum;                \/* DB Page containing root of this index *\/$/;"	m	struct:Index
tnum	sqliteInt.h	/^  int tnum;            \/* Root BTree page for this table *\/$/;"	m	struct:Table
token	vdbe.h	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram
token	vdbeInt.h	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame
totalAlloc	mem5.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	file:
totalExcess	mem5.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
totalFinalize	func.c	/^static void totalFinalize(sqlite3_context *context){$/;"	f	file:
total_changes	func.c	/^static void total_changes($/;"	f	file:
total_changes	sqlite3ext.h	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
touchCount	pcache1.c	/^  u32 touchCount;$/;"	m	struct:PgHdr1	file:
tr_tm	sqliteInt.h	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger
trace	mutex_unix.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace	mutex_w32.c	/^  volatile int trace;        \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace	sqlite3ext.h	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines
traceOut	shell.c	/^  FILE *traceOut;        \/* Output for sqlite3_trace() *\/$/;"	m	struct:ShellState	file:
trace_v2	sqlite3ext.h	/^  int (*trace_v2)(sqlite3*,unsigned,int(*)(unsigned,void*,void*,void*),void*);$/;"	m	struct:sqlite3_api_routines
transCntrChng	os_unix.c	/^  unsigned char transCntrChng;   \/* True if the transaction counter changed *\/$/;"	m	struct:unixFile	file:
trans_opt	parse.y	/^trans_opt ::= .$/;"	l
trans_opt	parse.y	/^trans_opt ::= TRANSACTION nm.$/;"	l
trans_opt	parse.y	/^trans_opt ::= TRANSACTION.$/;"	l
transferJoinMarkings	whereexpr.c	/^static void transferJoinMarkings(Expr *pDerived, Expr *pBase){$/;"	f	file:
transferParseError	trigger.c	/^static void transferParseError(Parse *pTo, Parse *pFrom){$/;"	f	file:
transfer_bindings	sqlite3ext.h	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
translateColumnToCopy	where.c	/^static void translateColumnToCopy($/;"	f	file:
translateP	vdbeaux.c	/^static int translateP(char c, const Op *pOp){$/;"	f	file:
tridxby	parse.y	/^tridxby ::= .$/;"	l
tridxby	parse.y	/^tridxby ::= INDEXED BY nm. {$/;"	l
tridxby	parse.y	/^tridxby ::= NOT INDEXED. {$/;"	l
trigHash	sqliteInt.h	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema
triggerStepAllocate	trigger.c	/^static TriggerStep *triggerStepAllocate($/;"	f	file:
trimFunc	func.c	/^static void trimFunc($/;"	f	file:
truncateOnCommit	wal.c	/^  u8 truncateOnCommit;       \/* True to truncate WAL file on commit *\/$/;"	m	struct:Wal	file:
truthProb	whereInt.h	/^  LogEst truthProb;       \/* Probability of truth for this expression *\/$/;"	m	struct:WhereTerm
tryToClone	shell.c	/^static void tryToClone(ShellState *p, const char *zNewDb){$/;"	f	file:
tryToCloneData	shell.c	/^static void tryToCloneData($/;"	f	file:
tryToCloneSchema	shell.c	/^static void tryToCloneSchema($/;"	f	file:
tsErrno	test_syscall.c	/^static int tsErrno(const char *zFunc){$/;"	f	file:
tsIsFail	test_syscall.c	/^static int tsIsFail(void){$/;"	f	file:
tsIsFailErrno	test_syscall.c	/^static int tsIsFailErrno(const char *zFunc){$/;"	f	file:
ts_access	test_syscall.c	/^static int ts_access(const char *zPath, int mode){$/;"	f	file:
ts_close	test_syscall.c	/^static int ts_close(int fd){$/;"	f	file:
ts_fallocate	test_syscall.c	/^static int ts_fallocate(int fd, off_t off, off_t len){$/;"	f	file:
ts_fchmod	test_syscall.c	/^static int ts_fchmod(int fd, mode_t mode){$/;"	f	file:
ts_fcntl	test_syscall.c	/^static int ts_fcntl(int fd, int cmd, ... ){$/;"	f	file:
ts_fstat	test_syscall.c	/^static int ts_fstat(int fd, struct stat *p){$/;"	f	file:
ts_ftruncate	test_syscall.c	/^static int ts_ftruncate(int fd, off_t n){$/;"	f	file:
ts_getcwd	test_syscall.c	/^static char *ts_getcwd(char *zPath, size_t nPath){$/;"	f	file:
ts_getpagesize	test_syscall.c	/^static int ts_getpagesize(void){$/;"	f	file:
ts_mmap	test_syscall.c	/^static void *ts_mmap($/;"	f	file:
ts_mremap	test_syscall.c	/^static void *ts_mremap(void *a, size_t b, size_t c, int d, ...){$/;"	f	file:
ts_open	test_syscall.c	/^static int ts_open(const char *zFile, int flags, int mode){$/;"	f	file:
ts_pread	test_syscall.c	/^static int ts_pread(int fd, void *aBuf, size_t nBuf, off_t off){$/;"	f	file:
ts_pread64	test_syscall.c	/^static int ts_pread64(int fd, void *aBuf, size_t nBuf, sqlite3_uint64 off){$/;"	f	file:
ts_pwrite	test_syscall.c	/^static int ts_pwrite(int fd, const void *aBuf, size_t nBuf, off_t off){$/;"	f	file:
ts_pwrite64	test_syscall.c	/^static int ts_pwrite64(int fd, const void *aBuf, size_t nBuf, sqlite3_uint64 off){$/;"	f	file:
ts_read	test_syscall.c	/^static int ts_read(int fd, void *aBuf, size_t nBuf){$/;"	f	file:
ts_stat	test_syscall.c	/^static int ts_stat(const char *zPath, struct stat *p){$/;"	f	file:
ts_write	test_syscall.c	/^static int ts_write(int fd, const void *aBuf, size_t nBuf){$/;"	f	file:
tvfsAccess	test_vfs.c	/^static int tvfsAccess($/;"	f	file:
tvfsAllocPage	test_vfs.c	/^static void tvfsAllocPage(TestvfsBuffer *p, int iPage, int pgsz){$/;"	f	file:
tvfsCheckReservedLock	test_vfs.c	/^static int tvfsCheckReservedLock(sqlite3_file *pFile, int *pResOut){$/;"	f	file:
tvfsClose	test_vfs.c	/^static int tvfsClose(sqlite3_file *pFile){$/;"	f	file:
tvfsCurrentTime	test_vfs.c	/^static int tvfsCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){$/;"	f	file:
tvfsDelete	test_vfs.c	/^static int tvfsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f	file:
tvfsDeviceCharacteristics	test_vfs.c	/^static int tvfsDeviceCharacteristics(sqlite3_file *pFile){$/;"	f	file:
tvfsDlClose	test_vfs.c	/^static void tvfsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
tvfsDlError	test_vfs.c	/^static void tvfsDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){$/;"	f	file:
tvfsDlOpen	test_vfs.c	/^static void *tvfsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f	file:
tvfsDlSym	test_vfs.c	/^static void (*tvfsDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym))(void){$/;"	f	file:
tvfsExecTcl	test_vfs.c	/^static void tvfsExecTcl($/;"	f	file:
tvfsFetch	test_vfs.c	/^static int tvfsFetch($/;"	f	file:
tvfsFileControl	test_vfs.c	/^static int tvfsFileControl(sqlite3_file *pFile, int op, void *pArg){$/;"	f	file:
tvfsFileSize	test_vfs.c	/^static int tvfsFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){$/;"	f	file:
tvfsFullPathname	test_vfs.c	/^static int tvfsFullPathname($/;"	f	file:
tvfsGetFd	test_vfs.c	50;"	d	file:
tvfsInjectCantopenerr	test_vfs.c	/^static int tvfsInjectCantopenerr(Testvfs *p){$/;"	f	file:
tvfsInjectFault	test_vfs.c	/^static int tvfsInjectFault(TestFaultInject *p){$/;"	f	file:
tvfsInjectFullerr	test_vfs.c	/^static int tvfsInjectFullerr(Testvfs *p){$/;"	f	file:
tvfsInjectIoerr	test_vfs.c	/^static int tvfsInjectIoerr(Testvfs *p){$/;"	f	file:
tvfsLock	test_vfs.c	/^static int tvfsLock(sqlite3_file *pFile, int eLock){$/;"	f	file:
tvfsOpen	test_vfs.c	/^static int tvfsOpen($/;"	f	file:
tvfsRandomness	test_vfs.c	/^static int tvfsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f	file:
tvfsRead	test_vfs.c	/^static int tvfsRead($/;"	f	file:
tvfsResultCode	test_vfs.c	/^static int tvfsResultCode(Testvfs *p, int *pRc){$/;"	f	file:
tvfsSectorSize	test_vfs.c	/^static int tvfsSectorSize(sqlite3_file *pFile){$/;"	f	file:
tvfsShmBarrier	test_vfs.c	/^static void tvfsShmBarrier(sqlite3_file *pFile){$/;"	f	file:
tvfsShmLock	test_vfs.c	/^static int tvfsShmLock($/;"	f	file:
tvfsShmMap	test_vfs.c	/^static int tvfsShmMap($/;"	f	file:
tvfsShmOpen	test_vfs.c	/^static int tvfsShmOpen(sqlite3_file *pFile){$/;"	f	file:
tvfsShmUnmap	test_vfs.c	/^static int tvfsShmUnmap($/;"	f	file:
tvfsSleep	test_vfs.c	/^static int tvfsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f	file:
tvfsSync	test_vfs.c	/^static int tvfsSync(sqlite3_file *pFile, int flags){$/;"	f	file:
tvfsTruncate	test_vfs.c	/^static int tvfsTruncate(sqlite3_file *pFile, sqlite_int64 size){$/;"	f	file:
tvfsUnfetch	test_vfs.c	/^static int tvfsUnfetch(sqlite3_file *pFile, sqlite3_int64 iOfst, void *p){$/;"	f	file:
tvfsUnlock	test_vfs.c	/^static int tvfsUnlock(sqlite3_file *pFile, int eLock){$/;"	f	file:
tvfsWrite	test_vfs.c	/^static int tvfsWrite($/;"	f	file:
tvfs_io_methods	test_vfs.c	/^static sqlite3_io_methods tvfs_io_methods = {$/;"	v	file:
type	printf.c	/^  etByte type;             \/* Conversion paradigm *\/$/;"	m	struct:et_info	file:
typeMask	vdbesort.c	/^  u8 typeMask;$/;"	m	struct:VdbeSorter	file:
typeofFunc	func.c	/^static void typeofFunc($/;"	f	file:
tz	date.c	/^  int tz;            \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	file:
tzSet	date.c	/^  char tzSet;        \/* Timezone was set explicitly *\/$/;"	m	struct:DateTime	file:
u	analyze.c	/^  } u;$/;"	m	struct:Stat4Sample	typeref:union:Stat4Sample::__anon9	file:
u	bitvec.c	/^  } u;$/;"	m	struct:Bitvec	typeref:union:Bitvec::__anon26	file:
u	mem3.c	/^  } u;$/;"	m	struct:Mem3Block	typeref:union:Mem3Block::__anon22	file:
u	sqliteInt.h	/^    } u;$/;"	m	struct:ExprList::ExprList_item	typeref:union:ExprList::ExprList_item::__anon14
u	sqliteInt.h	/^  } u;$/;"	m	struct:Expr	typeref:union:Expr::__anon12
u	sqliteInt.h	/^  } u;$/;"	m	struct:FuncDef	typeref:union:FuncDef::__anon11
u	sqliteInt.h	/^  } u;$/;"	m	struct:Walker	typeref:union:Walker::__anon19
u	vdbeInt.h	/^  } u;$/;"	m	struct:Mem	typeref:union:Mem::MemValue
u	vdbesort.c	/^  } u;$/;"	m	struct:SorterRecord	typeref:union:SorterRecord::__anon2	file:
u	whereInt.h	/^  } u;$/;"	m	struct:WhereLevel	typeref:union:WhereLevel::__anon3
u	whereInt.h	/^  } u;$/;"	m	struct:WhereLoop	typeref:union:WhereLoop::__anon5
u	whereInt.h	/^  } u;$/;"	m	struct:WhereTerm	typeref:union:WhereTerm::__anon8
u1	sqliteInt.h	/^    } u1;$/;"	m	struct:SrcList::SrcList_item	typeref:union:SrcList::SrcList_item::__anon17
u1	sqliteInt.h	/^  } u1;$/;"	m	struct:sqlite3	typeref:union:sqlite3::__anon10
u16	sqliteInt.h	/^typedef UINT16_TYPE u16;           \/* 2-byte unsigned integer *\/$/;"	t
u32	sqliteInt.h	/^typedef UINT32_TYPE u32;           \/* 4-byte unsigned integer *\/$/;"	t
u64	sqliteInt.h	/^typedef sqlite_uint64 u64;         \/* 8-byte unsigned integer *\/$/;"	t
u8	sqliteInt.h	/^typedef UINT8_TYPE u8;             \/* 1-byte unsigned integer *\/$/;"	t
u8	tclsqlite.c	/^  typedef unsigned char u8;$/;"	t	file:
uTemp	vdbeInt.h	/^  u32 uTemp;          \/* Transient storage for serial_type in OP_MakeRecord *\/$/;"	m	struct:Mem
uc	vdbeInt.h	/^  } uc;$/;"	m	struct:VdbeCursor	typeref:union:VdbeCursor::__anon1
uint32	tclsqlite.c	3545;"	d	file:
unLockFlag	os_unix.c	/^  unsigned char unLockFlag;         \/* 1 = unlock, 0 = lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
unaligned_string_counter	test1.c	/^static int unaligned_string_counter = 0;$/;"	v	file:
unicodeFunc	func.c	/^static void unicodeFunc($/;"	f	file:
uniqNotNull	sqliteInt.h	/^  unsigned uniqNotNull:1;  \/* True if UNIQUE and NOT NULL for all columns *\/$/;"	m	struct:Index
unixAccess	os_unix.c	/^static int unixAccess($/;"	f	file:
unixCheckReservedLock	os_unix.c	/^static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
unixClose	os_unix.c	/^static int unixClose(sqlite3_file *id){$/;"	f	file:
unixCurrentTime	os_unix.c	/^static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){$/;"	f	file:
unixCurrentTime	os_unix.c	6273;"	d	file:
unixCurrentTimeInt64	os_unix.c	/^static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){$/;"	f	file:
unixDelete	os_unix.c	/^static int unixDelete($/;"	f	file:
unixDeviceCharacteristics	os_unix.c	/^static int unixDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
unixDlClose	os_unix.c	/^static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){$/;"	f	file:
unixDlClose	os_unix.c	6139;"	d	file:
unixDlError	os_unix.c	/^static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){$/;"	f	file:
unixDlError	os_unix.c	6137;"	d	file:
unixDlOpen	os_unix.c	/^static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){$/;"	f	file:
unixDlOpen	os_unix.c	6136;"	d	file:
unixDlSym	os_unix.c	/^static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){$/;"	f	file:
unixDlSym	os_unix.c	6138;"	d	file:
unixEnterMutex	os_unix.c	/^static void unixEnterMutex(void){$/;"	f	file:
unixFetch	os_unix.c	/^static int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:
unixFile	os_unix.c	/^struct unixFile {$/;"	s	file:
unixFile	os_unix.c	/^typedef struct unixFile unixFile;$/;"	t	typeref:struct:unixFile	file:
unixFileControl	os_unix.c	/^static int unixFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
unixFileId	os_unix.c	/^struct unixFileId {$/;"	s	file:
unixFileLock	os_unix.c	/^static int unixFileLock(unixFile *pFile, struct flock *pLock){$/;"	f	file:
unixFileSize	os_unix.c	/^static int unixFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	file:
unixFullPathname	os_unix.c	/^static int unixFullPathname($/;"	f	file:
unixGetLastError	os_unix.c	/^static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){$/;"	f	file:
unixGetSystemCall	os_unix.c	/^static sqlite3_syscall_ptr unixGetSystemCall($/;"	f	file:
unixGetTempname	os_unix.c	/^static int unixGetTempname(int nBuf, char *zBuf){$/;"	f	file:
unixGetpagesize	os_unix.c	/^static int unixGetpagesize(void){$/;"	f	file:
unixInodeInfo	os_unix.c	/^struct unixInodeInfo {$/;"	s	file:
unixInodeInfo	os_unix.c	/^typedef struct unixInodeInfo unixInodeInfo;   \/* An i-node *\/$/;"	t	typeref:struct:unixInodeInfo	file:
unixLeaveMutex	os_unix.c	/^static void unixLeaveMutex(void){$/;"	f	file:
unixLock	os_unix.c	/^static int unixLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixLogError	os_unix.c	1118;"	d	file:
unixLogErrorAtLine	os_unix.c	/^static int unixLogErrorAtLine($/;"	f	file:
unixMapfile	os_unix.c	/^static int unixMapfile(unixFile *pFd, i64 nMap){$/;"	f	file:
unixModeBit	os_unix.c	/^static void unixModeBit(unixFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
unixMutexHeld	os_unix.c	/^static int unixMutexHeld(void) {$/;"	f	file:
unixNextSystemCall	os_unix.c	/^static const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
unixOpen	os_unix.c	/^static int unixOpen($/;"	f	file:
unixOpenSharedMemory	os_unix.c	/^static int unixOpenSharedMemory(unixFile *pDbFd){$/;"	f	file:
unixRandomness	os_unix.c	/^static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){$/;"	f	file:
unixRead	os_unix.c	/^static int unixRead($/;"	f	file:
unixRemapfile	os_unix.c	/^static void unixRemapfile($/;"	f	file:
unixSectorSize	os_unix.c	/^static int unixSectorSize(sqlite3_file *NotUsed){$/;"	f	file:
unixSectorSize	os_unix.c	/^static int unixSectorSize(sqlite3_file *id){$/;"	f	file:
unixSetSystemCall	os_unix.c	/^static int unixSetSystemCall($/;"	f	file:
unixShm	os_unix.c	/^struct unixShm {$/;"	s	file:
unixShm	os_unix.c	/^typedef struct unixShm unixShm;               \/* Connection shared memory *\/$/;"	t	typeref:struct:unixShm	file:
unixShmBarrier	os_unix.c	/^static void unixShmBarrier($/;"	f	file:
unixShmBarrier	os_unix.c	4696;"	d	file:
unixShmLock	os_unix.c	/^static int unixShmLock($/;"	f	file:
unixShmLock	os_unix.c	4695;"	d	file:
unixShmMap	os_unix.c	/^static int unixShmMap($/;"	f	file:
unixShmMap	os_unix.c	4694;"	d	file:
unixShmNode	os_unix.c	/^struct unixShmNode {$/;"	s	file:
unixShmNode	os_unix.c	/^typedef struct unixShmNode unixShmNode;       \/* Shared memory instance *\/$/;"	t	typeref:struct:unixShmNode	file:
unixShmPurge	os_unix.c	/^static void unixShmPurge(unixFile *pFd){$/;"	f	file:
unixShmRegionPerMap	os_unix.c	/^static int unixShmRegionPerMap(void){$/;"	f	file:
unixShmSystemLock	os_unix.c	/^static int unixShmSystemLock($/;"	f	file:
unixShmUnmap	os_unix.c	/^static int unixShmUnmap($/;"	f	file:
unixShmUnmap	os_unix.c	4697;"	d	file:
unixSleep	os_unix.c	/^static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){$/;"	f	file:
unixSync	os_unix.c	/^static int unixSync(sqlite3_file *id, int flags){$/;"	f	file:
unixTempFileDir	os_unix.c	/^static const char *unixTempFileDir(void){$/;"	f	file:
unixTruncate	os_unix.c	/^static int unixTruncate(sqlite3_file *id, i64 nByte){$/;"	f	file:
unixUnfetch	os_unix.c	/^static int unixUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:
unixUnlock	os_unix.c	/^static int unixUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixUnmapfile	os_unix.c	/^static void unixUnmapfile(unixFile *pFd){$/;"	f	file:
unixWrite	os_unix.c	/^static int unixWrite($/;"	f	file:
unix_syscall	os_unix.c	/^static struct unix_syscall {$/;"	s	file:
unknownFunc	func.c	/^static void unknownFunc($/;"	f	file:
unlikely	sqliteInt.h	496;"	d
unlockBtreeIfUnused	btree.c	/^static void unlockBtreeIfUnused(BtShared *pBt){$/;"	f	file:
unlockBtreeMutex	btmutex.c	/^static void SQLITE_NOINLINE unlockBtreeMutex(Btree *p){$/;"	f	file:
unlock_notify	sqlite3ext.h	/^  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);$/;"	m	struct:sqlite3_api_routines
unlock_notify_cb	test_thread.c	/^static void unlock_notify_cb(void **apArg, int nArg){$/;"	f	file:
unregister_demovfs	test_demovfs.c	/^static int SQLITE_TCLAPI unregister_demovfs($/;"	f	file:
untestedTerms	whereInt.h	/^  u8 untestedTerms;         \/* Not all WHERE terms resolved by outer loop *\/$/;"	m	struct:WhereInfo
unused	wal.c	/^  u32 unused;                     \/* Unused (padding) field *\/$/;"	m	struct:WalIndexHdr	file:
updateAccumulator	select.c	/^static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
updateMaxBlobsize	vdbe.c	/^static void updateMaxBlobsize(Mem *p){$/;"	f	file:
updateVirtualTable	update.c	/^static void updateVirtualTable($/;"	f	file:
update_hook	sqlite3ext.h	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,$/;"	m	struct:sqlite3_api_routines
upperFunc	func.c	/^static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
uptr	sqliteInt.h	/^  typedef u32 uptr;$/;"	t
uptr	sqliteInt.h	/^  typedef u64 uptr;$/;"	t
uptr	sqliteInt.h	/^  typedef uintptr_t uptr;$/;"	t
uri_boolean	sqlite3ext.h	/^  int (*uri_boolean)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines
uri_int64	sqlite3ext.h	/^  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines
uri_parameter	sqlite3ext.h	/^  const char *(*uri_parameter)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines
usableSize	btreeInt.h	/^  u32 usableSize;       \/* Number of usable bytes on each page *\/$/;"	m	struct:BtShared
usage	shell.c	/^static void usage(int showDetail){$/;"	f	file:
useEvalObjv	tclsqlite.c	/^  int useEvalObjv;      \/* True if it is safe to use Tcl_EvalObjv *\/$/;"	m	struct:SqlFunc	file:
useJournal	pager.c	/^  u8 useJournal;              \/* Use a rollback journal on this file *\/$/;"	m	struct:Pager	file:
useRandomRowid	vdbeInt.h	/^  Bool useRandomRowid:1;\/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor
useSortingIdx	sqliteInt.h	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo
usedAsColumnCache	expr.c	/^static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){$/;"	f	file:
user_data	sqlite3ext.h	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
usesStmtJournal	vdbeInt.h	/^  bft usesStmtJournal:1;  \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe
uses_stmt_journal	test1.c	/^static int SQLITE_TCLAPI uses_stmt_journal($/;"	f	file:
utf8_printf	shell.c	/^void utf8_printf(FILE *out, const char *zFormat, ...){$/;"	f
utf8_printf	shell.c	392;"	d	file:
utf8_to_utf8	test_hexio.c	/^static int SQLITE_TCLAPI utf8_to_utf8($/;"	f	file:
v	rowset.c	/^  i64 v;                        \/* ROWID value for this entry *\/$/;"	m	struct:RowSetEntry	file:
v	vdbeInt.h	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame
v	vdbeInt.h	/^  Vdbe *v;$/;"	m	struct:PreUpdate
v	vdbeaux.c	/^  Vdbe *v;                   \/* Vdbe to iterate through the opcodes of *\/$/;"	m	struct:VdbeOpIter	file:
v1	btreeInt.h	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk
v2	btreeInt.h	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk
vacuumFinalize	vacuum.c	/^static int vacuumFinalize(sqlite3 *db, sqlite3_stmt *pStmt, char **pzErrMsg){$/;"	f	file:
valid	shell.c	/^  int valid;          \/* Is there legit data in here? *\/$/;"	m	struct:SavedModeInfo	file:
validHMS	date.c	/^  char validHMS;     \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	file:
validJD	date.c	/^  char validJD;      \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	file:
validTZ	date.c	/^  char validTZ;      \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	file:
validYMD	date.c	/^  char validYMD;     \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	file:
valueBytes	vdbemem.c	/^static SQLITE_NOINLINE int valueBytes(sqlite3_value *pVal, u8 enc){$/;"	f	file:
valueFromExpr	vdbemem.c	/^static int valueFromExpr($/;"	f	file:
valueFromFunction	vdbemem.c	/^static int valueFromFunction($/;"	f	file:
valueFromFunction	vdbemem.c	1248;"	d	file:
valueNew	vdbemem.c	/^static sqlite3_value *valueNew(sqlite3 *db, struct ValueNewStat4Ctx *p){$/;"	f	file:
valueToText	vdbemem.c	/^static SQLITE_NOINLINE const void *valueToText(sqlite3_value* pVal, u8 enc){$/;"	f	file:
value_blob	sqlite3ext.h	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_bytes	sqlite3ext.h	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_bytes16	sqlite3ext.h	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_double	sqlite3ext.h	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_dup	sqlite3ext.h	/^  sqlite3_value *(*value_dup)(const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_free	sqlite3ext.h	/^  void (*value_free)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_int	sqlite3ext.h	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_int64	sqlite3ext.h	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_numeric_type	sqlite3ext.h	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_subtype	sqlite3ext.h	/^  unsigned int (*value_subtype)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_text	sqlite3ext.h	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_text16	sqlite3ext.h	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_text16be	sqlite3ext.h	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_text16le	sqlite3ext.h	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_type	sqlite3ext.h	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
vdbeAssertFieldCountWithinLimits	vdbeaux.c	/^static void vdbeAssertFieldCountWithinLimits($/;"	f	file:
vdbeAssertFieldCountWithinLimits	vdbeaux.c	3669;"	d	file:
vdbeChangeP4Full	vdbeaux.c	/^static void SQLITE_NOINLINE vdbeChangeP4Full($/;"	f	file:
vdbeClrCopy	vdbemem.c	/^static SQLITE_NOINLINE void vdbeClrCopy(Mem *pTo, const Mem *pFrom, int eType){$/;"	f	file:
vdbeCommit	vdbeaux.c	/^static int vdbeCommit(sqlite3 *db, Vdbe *p){$/;"	f	file:
vdbeCompareMemString	vdbeaux.c	/^static int vdbeCompareMemString($/;"	f	file:
vdbeFreeOpArray	vdbeaux.c	/^static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){$/;"	f	file:
vdbeFreeUnpacked	vdbeaux.c	/^static void vdbeFreeUnpacked(sqlite3 *db, UnpackedRecord *p){$/;"	f	file:
vdbeIncrBgPopulate	vdbesort.c	/^static int vdbeIncrBgPopulate(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrFree	vdbesort.c	/^static void vdbeIncrFree(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrMergerNew	vdbesort.c	/^static int vdbeIncrMergerNew($/;"	f	file:
vdbeIncrMergerSetThreads	vdbesort.c	/^static void vdbeIncrMergerSetThreads(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrPopulate	vdbesort.c	/^static int vdbeIncrPopulate(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrPopulateThread	vdbesort.c	/^static void *vdbeIncrPopulateThread(void *pCtx){$/;"	f	file:
vdbeIncrSwap	vdbesort.c	/^static int vdbeIncrSwap(IncrMerger *pIncr){$/;"	f	file:
vdbeInvokeSqllog	vdbeaux.c	/^static void vdbeInvokeSqllog(Vdbe *v){$/;"	f	file:
vdbeInvokeSqllog	vdbeaux.c	2792;"	d	file:
vdbeLeave	vdbeaux.c	/^static SQLITE_NOINLINE void vdbeLeave(Vdbe *p){$/;"	f	file:
vdbeMemAddTerminator	vdbemem.c	/^static SQLITE_NOINLINE int vdbeMemAddTerminator(Mem *pMem){$/;"	f	file:
vdbeMemClear	vdbemem.c	/^static SQLITE_NOINLINE void vdbeMemClear(Mem *p){$/;"	f	file:
vdbeMemClearExternAndSetNull	vdbemem.c	/^static SQLITE_NOINLINE void vdbeMemClearExternAndSetNull(Mem *p){$/;"	f	file:
vdbeMemFromBtreeResize	vdbemem.c	/^static SQLITE_NOINLINE int vdbeMemFromBtreeResize($/;"	f	file:
vdbeMergeEngineCompare	vdbesort.c	/^static void vdbeMergeEngineCompare($/;"	f	file:
vdbeMergeEngineFree	vdbesort.c	/^static void vdbeMergeEngineFree(MergeEngine *pMerger){$/;"	f	file:
vdbeMergeEngineInit	vdbesort.c	/^static int vdbeMergeEngineInit($/;"	f	file:
vdbeMergeEngineLevel0	vdbesort.c	/^static int vdbeMergeEngineLevel0($/;"	f	file:
vdbeMergeEngineNew	vdbesort.c	/^static MergeEngine *vdbeMergeEngineNew(int nReader){$/;"	f	file:
vdbeMergeEngineStep	vdbesort.c	/^static int vdbeMergeEngineStep($/;"	f	file:
vdbePmaReadBlob	vdbesort.c	/^static int vdbePmaReadBlob($/;"	f	file:
vdbePmaReadVarint	vdbesort.c	/^static int vdbePmaReadVarint(PmaReader *p, u64 *pnOut){$/;"	f	file:
vdbePmaReaderBgIncrInit	vdbesort.c	/^static void *vdbePmaReaderBgIncrInit(void *pCtx){$/;"	f	file:
vdbePmaReaderClear	vdbesort.c	/^static void vdbePmaReaderClear(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderIncrInit	vdbesort.c	/^static int vdbePmaReaderIncrInit(PmaReader *pReadr, int eMode){$/;"	f	file:
vdbePmaReaderIncrMergeInit	vdbesort.c	/^static int vdbePmaReaderIncrMergeInit(PmaReader *pReadr, int eMode){$/;"	f	file:
vdbePmaReaderInit	vdbesort.c	/^static int vdbePmaReaderInit($/;"	f	file:
vdbePmaReaderNext	vdbesort.c	/^static int vdbePmaReaderNext(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderSeek	vdbesort.c	/^static int vdbePmaReaderSeek($/;"	f	file:
vdbePmaWriteBlob	vdbesort.c	/^static void vdbePmaWriteBlob(PmaWriter *p, u8 *pData, int nData){$/;"	f	file:
vdbePmaWriteVarint	vdbesort.c	/^static void vdbePmaWriteVarint(PmaWriter *p, u64 iVal){$/;"	f	file:
vdbePmaWriterFinish	vdbesort.c	/^static int vdbePmaWriterFinish(PmaWriter *p, i64 *piEof){$/;"	f	file:
vdbePmaWriterInit	vdbesort.c	/^static void vdbePmaWriterInit($/;"	f	file:
vdbeRecordCompareDebug	vdbeaux.c	/^static int vdbeRecordCompareDebug($/;"	f	file:
vdbeRecordCompareInt	vdbeaux.c	/^static int vdbeRecordCompareInt($/;"	f	file:
vdbeRecordCompareString	vdbeaux.c	/^static int vdbeRecordCompareString($/;"	f	file:
vdbeRecordDecodeInt	vdbeaux.c	/^static i64 vdbeRecordDecodeInt(u32 serial_type, const u8 *aKey){$/;"	f	file:
vdbeReleaseAndSetInt64	vdbemem.c	/^static SQLITE_NOINLINE void vdbeReleaseAndSetInt64(Mem *pMem, i64 val){$/;"	f	file:
vdbeSafety	vdbeapi.c	/^static int vdbeSafety(Vdbe *p){$/;"	f	file:
vdbeSafetyNotNull	vdbeapi.c	/^static int vdbeSafetyNotNull(Vdbe *p){$/;"	f	file:
vdbeSortAllocUnpacked	vdbesort.c	/^static int vdbeSortAllocUnpacked(SortSubtask *pTask){$/;"	f	file:
vdbeSortSubtaskCleanup	vdbesort.c	/^static void vdbeSortSubtaskCleanup(sqlite3 *db, SortSubtask *pTask){$/;"	f	file:
vdbeSorterAddToTree	vdbesort.c	/^static int vdbeSorterAddToTree($/;"	f	file:
vdbeSorterBlockDebug	vdbesort.c	/^static void vdbeSorterBlockDebug($/;"	f	file:
vdbeSorterBlockDebug	vdbesort.c	1102;"	d	file:
vdbeSorterCompare	vdbesort.c	/^static int vdbeSorterCompare($/;"	f	file:
vdbeSorterCompareInt	vdbesort.c	/^static int vdbeSorterCompareInt($/;"	f	file:
vdbeSorterCompareTail	vdbesort.c	/^static int vdbeSorterCompareTail($/;"	f	file:
vdbeSorterCompareText	vdbesort.c	/^static int vdbeSorterCompareText($/;"	f	file:
vdbeSorterCreateThread	vdbesort.c	/^static int vdbeSorterCreateThread($/;"	f	file:
vdbeSorterExtendFile	vdbesort.c	/^static void vdbeSorterExtendFile(sqlite3 *db, sqlite3_file *pFd, i64 nByte){$/;"	f	file:
vdbeSorterExtendFile	vdbesort.c	1293;"	d	file:
vdbeSorterFlushPMA	vdbesort.c	/^static int vdbeSorterFlushPMA(VdbeSorter *pSorter){$/;"	f	file:
vdbeSorterFlushThread	vdbesort.c	/^static void *vdbeSorterFlushThread(void *pCtx){$/;"	f	file:
vdbeSorterGetCompare	vdbesort.c	/^static SorterCompare vdbeSorterGetCompare(VdbeSorter *p){$/;"	f	file:
vdbeSorterJoinAll	vdbesort.c	/^static int vdbeSorterJoinAll(VdbeSorter *pSorter, int rcin){$/;"	f	file:
vdbeSorterJoinAll	vdbesort.c	1162;"	d	file:
vdbeSorterJoinThread	vdbesort.c	/^static int vdbeSorterJoinThread(SortSubtask *pTask){$/;"	f	file:
vdbeSorterJoinThread	vdbesort.c	1163;"	d	file:
vdbeSorterListToPMA	vdbesort.c	/^static int vdbeSorterListToPMA(SortSubtask *pTask, SorterList *pList){$/;"	f	file:
vdbeSorterMapFile	vdbesort.c	/^static int vdbeSorterMapFile(SortSubtask *pTask, SorterFile *pFile, u8 **pp){$/;"	f	file:
vdbeSorterMerge	vdbesort.c	/^static SorterRecord *vdbeSorterMerge($/;"	f	file:
vdbeSorterMergeTreeBuild	vdbesort.c	/^static int vdbeSorterMergeTreeBuild($/;"	f	file:
vdbeSorterOpenTempFile	vdbesort.c	/^static int vdbeSorterOpenTempFile($/;"	f	file:
vdbeSorterPopulateDebug	vdbesort.c	/^static void vdbeSorterPopulateDebug($/;"	f	file:
vdbeSorterPopulateDebug	vdbesort.c	1101;"	d	file:
vdbeSorterRecordFree	vdbesort.c	/^static void vdbeSorterRecordFree(sqlite3 *db, SorterRecord *pRecord){$/;"	f	file:
vdbeSorterRewindDebug	vdbesort.c	/^static void vdbeSorterRewindDebug(const char *zEvent){$/;"	f	file:
vdbeSorterRewindDebug	vdbesort.c	1100;"	d	file:
vdbeSorterRowkey	vdbesort.c	/^static void *vdbeSorterRowkey($/;"	f	file:
vdbeSorterSetupMerge	vdbesort.c	/^static int vdbeSorterSetupMerge(VdbeSorter *pSorter){$/;"	f	file:
vdbeSorterSort	vdbesort.c	/^static int vdbeSorterSort(SortSubtask *pTask, SorterList *pList){$/;"	f	file:
vdbeSorterTreeDepth	vdbesort.c	/^static int vdbeSorterTreeDepth(int nPMA){$/;"	f	file:
vdbeSorterWorkDebug	vdbesort.c	/^static void vdbeSorterWorkDebug(SortSubtask *pTask, const char *zEvent){$/;"	f	file:
vdbeSorterWorkDebug	vdbesort.c	1099;"	d	file:
vdbeTakeBranch	vdbe.c	/^  static void vdbeTakeBranch(int iSrcLine, u8 I, u8 M){$/;"	f	file:
vdbeUnbind	vdbeapi.c	/^static int vdbeUnbind(Vdbe *p, int i){$/;"	f	file:
vdbeUnpackRecord	vdbeapi.c	/^static UnpackedRecord *vdbeUnpackRecord($/;"	f	file:
vdbeVComment	vdbeaux.c	/^static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){$/;"	f	file:
verifyDbFile	os_unix.c	/^static void verifyDbFile(unixFile *pFile){$/;"	f	file:
versionFunc	func.c	/^static void versionFunc($/;"	f	file:
vfsCurrentTimeInt64	test1.c	/^static int SQLITE_TCLAPI vfsCurrentTimeInt64($/;"	f	file:
vfsFlags	pager.c	/^  u32 vfsFlags;               \/* Flags for sqlite3_vfs.xOpen() *\/$/;"	m	struct:Pager	file:
vfsList	os.c	/^static sqlite3_vfs * SQLITE_WSD vfsList = 0;$/;"	v	file:
vfsList	os.c	327;"	d	file:
vfsUnlink	os.c	/^static void vfsUnlink(sqlite3_vfs *pVfs){$/;"	f	file:
vfs_find	sqlite3ext.h	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines
vfs_initfail_test	test1.c	/^static int SQLITE_TCLAPI vfs_initfail_test($/;"	f	file:
vfs_list	test1.c	/^static int SQLITE_TCLAPI vfs_list($/;"	f	file:
vfs_register	sqlite3ext.h	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines
vfs_reregister_all	test1.c	/^static int SQLITE_TCLAPI vfs_reregister_all($/;"	f	file:
vfs_unlink_test	test1.c	/^static int SQLITE_TCLAPI vfs_unlink_test($/;"	f	file:
vfs_unregister	sqlite3ext.h	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines
vfs_unregister_all	test1.c	/^static int SQLITE_TCLAPI vfs_unregister_all($/;"	f	file:
vfslogAccess	test_osinst.c	/^static int vfslogAccess($/;"	f	file:
vfslogCheckReservedLock	test_osinst.c	/^static int vfslogCheckReservedLock(sqlite3_file *pFile, int *pResOut){$/;"	f	file:
vfslogClose	test_osinst.c	/^static int vfslogClose(sqlite3_file *pFile){$/;"	f	file:
vfslogCurrentTime	test_osinst.c	/^static int vfslogCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){$/;"	f	file:
vfslogCurrentTimeInt64	test_osinst.c	/^static int vfslogCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *p){$/;"	f	file:
vfslogDelete	test_osinst.c	/^static int vfslogDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f	file:
vfslogDeviceCharacteristics	test_osinst.c	/^static int vfslogDeviceCharacteristics(sqlite3_file *pFile){$/;"	f	file:
vfslogDlClose	test_osinst.c	/^static void vfslogDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
vfslogDlError	test_osinst.c	/^static void vfslogDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){$/;"	f	file:
vfslogDlOpen	test_osinst.c	/^static void *vfslogDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f	file:
vfslogDlSym	test_osinst.c	/^static void (*vfslogDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym))(void){$/;"	f	file:
vfslogFileControl	test_osinst.c	/^static int vfslogFileControl(sqlite3_file *pFile, int op, void *pArg){$/;"	f	file:
vfslogFileSize	test_osinst.c	/^static int vfslogFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){$/;"	f	file:
vfslogFullPathname	test_osinst.c	/^static int vfslogFullPathname($/;"	f	file:
vfslogGetLastError	test_osinst.c	/^static int vfslogGetLastError(sqlite3_vfs *pVfs, int a, char *b){$/;"	f	file:
vfslogLock	test_osinst.c	/^static int vfslogLock(sqlite3_file *pFile, int eLock){$/;"	f	file:
vfslogOpen	test_osinst.c	/^static int vfslogOpen($/;"	f	file:
vfslogRandomness	test_osinst.c	/^static int vfslogRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f	file:
vfslogRead	test_osinst.c	/^static int vfslogRead($/;"	f	file:
vfslogSectorSize	test_osinst.c	/^static int vfslogSectorSize(sqlite3_file *pFile){$/;"	f	file:
vfslogShmBarrier	test_osinst.c	/^static void vfslogShmBarrier(sqlite3_file *pFile){$/;"	f	file:
vfslogShmLock	test_osinst.c	/^static int vfslogShmLock(sqlite3_file *pFile, int ofst, int n, int flags){$/;"	f	file:
vfslogShmMap	test_osinst.c	/^static int vfslogShmMap($/;"	f	file:
vfslogShmUnmap	test_osinst.c	/^static int vfslogShmUnmap(sqlite3_file *pFile, int deleteFlag){$/;"	f	file:
vfslogSleep	test_osinst.c	/^static int vfslogSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f	file:
vfslogSync	test_osinst.c	/^static int vfslogSync(sqlite3_file *pFile, int flags){$/;"	f	file:
vfslogTruncate	test_osinst.c	/^static int vfslogTruncate(sqlite3_file *pFile, sqlite_int64 size){$/;"	f	file:
vfslogUnlock	test_osinst.c	/^static int vfslogUnlock(sqlite3_file *pFile, int eLock){$/;"	f	file:
vfslogWrite	test_osinst.c	/^static int vfslogWrite($/;"	f	file:
vfslog_call	test_osinst.c	/^static void vfslog_call($/;"	f	file:
vfslog_eventname	test_osinst.c	/^static const char *vfslog_eventname(int eEvent){$/;"	f	file:
vfslog_finalize	test_osinst.c	/^static void vfslog_finalize(VfslogVfs *p){$/;"	f	file:
vfslog_flush	test_osinst.c	/^static void vfslog_flush(VfslogVfs *p){$/;"	f	file:
vfslog_io_methods	test_osinst.c	/^static sqlite3_io_methods vfslog_io_methods = {$/;"	v	file:
vfslog_string	test_osinst.c	/^static void vfslog_string(sqlite3_vfs *pVfs, const char *zStr){$/;"	f	file:
vfslog_time	test_osinst.c	/^static sqlite3_uint64 vfslog_time(){$/;"	f	file:
vfslog_vfs	test_osinst.c	/^static sqlite3_vfs vfslog_vfs = {$/;"	v	file:
vfstraceAccess	test_vfstrace.c	/^static int vfstraceAccess($/;"	f	file:
vfstraceCheckReservedLock	test_vfstrace.c	/^static int vfstraceCheckReservedLock(sqlite3_file *pFile, int *pResOut){$/;"	f	file:
vfstraceClose	test_vfstrace.c	/^static int vfstraceClose(sqlite3_file *pFile){$/;"	f	file:
vfstraceCurrentTime	test_vfstrace.c	/^static int vfstraceCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){$/;"	f	file:
vfstraceCurrentTimeInt64	test_vfstrace.c	/^static int vfstraceCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f	file:
vfstraceDelete	test_vfstrace.c	/^static int vfstraceDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f	file:
vfstraceDeviceCharacteristics	test_vfstrace.c	/^static int vfstraceDeviceCharacteristics(sqlite3_file *pFile){$/;"	f	file:
vfstraceDlClose	test_vfstrace.c	/^static void vfstraceDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
vfstraceDlError	test_vfstrace.c	/^static void vfstraceDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){$/;"	f	file:
vfstraceDlOpen	test_vfstrace.c	/^static void *vfstraceDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f	file:
vfstraceDlSym	test_vfstrace.c	/^static void (*vfstraceDlSym(sqlite3_vfs *pVfs,void *p,const char *zSym))(void){$/;"	f	file:
vfstraceFileControl	test_vfstrace.c	/^static int vfstraceFileControl(sqlite3_file *pFile, int op, void *pArg){$/;"	f	file:
vfstraceFileSize	test_vfstrace.c	/^static int vfstraceFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){$/;"	f	file:
vfstraceFullPathname	test_vfstrace.c	/^static int vfstraceFullPathname($/;"	f	file:
vfstraceGetLastError	test_vfstrace.c	/^static int vfstraceGetLastError(sqlite3_vfs *pVfs, int iErr, char *zErr){$/;"	f	file:
vfstraceGetSystemCall	test_vfstrace.c	/^static sqlite3_syscall_ptr vfstraceGetSystemCall($/;"	f	file:
vfstraceLock	test_vfstrace.c	/^static int vfstraceLock(sqlite3_file *pFile, int eLock){$/;"	f	file:
vfstraceNextSystemCall	test_vfstrace.c	/^static const char *vfstraceNextSystemCall(sqlite3_vfs *pVfs, const char *zName){$/;"	f	file:
vfstraceOpen	test_vfstrace.c	/^static int vfstraceOpen($/;"	f	file:
vfstraceRandomness	test_vfstrace.c	/^static int vfstraceRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f	file:
vfstraceRead	test_vfstrace.c	/^static int vfstraceRead($/;"	f	file:
vfstraceSectorSize	test_vfstrace.c	/^static int vfstraceSectorSize(sqlite3_file *pFile){$/;"	f	file:
vfstraceSetSystemCall	test_vfstrace.c	/^static int vfstraceSetSystemCall($/;"	f	file:
vfstraceShmBarrier	test_vfstrace.c	/^static void vfstraceShmBarrier(sqlite3_file *pFile){$/;"	f	file:
vfstraceShmLock	test_vfstrace.c	/^static int vfstraceShmLock(sqlite3_file *pFile, int ofst, int n, int flags){$/;"	f	file:
vfstraceShmMap	test_vfstrace.c	/^static int vfstraceShmMap($/;"	f	file:
vfstraceShmUnmap	test_vfstrace.c	/^static int vfstraceShmUnmap(sqlite3_file *pFile, int delFlag){$/;"	f	file:
vfstraceSleep	test_vfstrace.c	/^static int vfstraceSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f	file:
vfstraceSync	test_vfstrace.c	/^static int vfstraceSync(sqlite3_file *pFile, int flags){$/;"	f	file:
vfstraceTruncate	test_vfstrace.c	/^static int vfstraceTruncate(sqlite3_file *pFile, sqlite_int64 size){$/;"	f	file:
vfstraceUnlock	test_vfstrace.c	/^static int vfstraceUnlock(sqlite3_file *pFile, int eLock){$/;"	f	file:
vfstraceWrite	test_vfstrace.c	/^static int vfstraceWrite($/;"	f	file:
vfstrace_file	test_vfstrace.c	/^struct vfstrace_file {$/;"	s	file:
vfstrace_file	test_vfstrace.c	/^typedef struct vfstrace_file vfstrace_file;$/;"	t	typeref:struct:vfstrace_file	file:
vfstrace_info	test_vfstrace.c	/^struct vfstrace_info {$/;"	s	file:
vfstrace_info	test_vfstrace.c	/^typedef struct vfstrace_info vfstrace_info;$/;"	t	typeref:struct:vfstrace_info	file:
vfstrace_print_errcode	test_vfstrace.c	/^static void vfstrace_print_errcode($/;"	f	file:
vfstrace_printf	test_vfstrace.c	/^static void vfstrace_printf($/;"	f	file:
vfstrace_register	test_vfstrace.c	/^int vfstrace_register($/;"	f
viaCoroutine	sqliteInt.h	/^      unsigned viaCoroutine :1;  \/* Implemented as a co-routine *\/$/;"	m	struct:SrcList::SrcList_item::__anon16
vlogBestIndex	test_osinst.c	/^static int vlogBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
vlogClose	test_osinst.c	/^static int vlogClose(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
vlogColumn	test_osinst.c	/^static int vlogColumn($/;"	f	file:
vlogConnect	test_osinst.c	/^static int vlogConnect($/;"	f	file:
vlogDisconnect	test_osinst.c	/^static int vlogDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
vlogEof	test_osinst.c	/^static int vlogEof(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
vlogFilter	test_osinst.c	/^static int vlogFilter($/;"	f	file:
vlogNext	test_osinst.c	/^static int vlogNext(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
vlogOpen	test_osinst.c	/^static int vlogOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
vlogRowid	test_osinst.c	/^static int vlogRowid(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
vmprintf	sqlite3ext.h	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines
vsnprintf	sqlite3ext.h	/^  char *(*vsnprintf)(int,char*,const char*,va_list);$/;"	m	struct:sqlite3_api_routines
vtab	whereInt.h	/^    } vtab;$/;"	m	union:WhereLoop::__anon5	typeref:struct:WhereLoop::__anon5::__anon7
vtabBestIndex	where.c	/^static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){$/;"	f	file:
vtabCallConstructor	vtab.c	/^static int vtabCallConstructor($/;"	f	file:
vtabDisconnectAll	vtab.c	/^static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){$/;"	f	file:
vtabOnConflict	sqliteInt.h	/^  u8 vtabOnConflict;            \/* Value to return for s3_vtab_on_conflict() *\/$/;"	m	struct:sqlite3
vtab_config	sqlite3ext.h	/^  int (*vtab_config)(sqlite3*,int op,...);$/;"	m	struct:sqlite3_api_routines
vtab_on_conflict	sqlite3ext.h	/^  int (*vtab_on_conflict)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
vtabarg	parse.y	/^vtabarg ::= .                       {sqlite3VtabArgInit(pParse);}$/;"	l
vtabarg	parse.y	/^vtabarg ::= vtabarg vtabargtoken.$/;"	l
vtabarglist	parse.y	/^vtabarglist ::= vtabarg.$/;"	l
vtabarglist	parse.y	/^vtabarglist ::= vtabarglist COMMA vtabarg.$/;"	l
vtabargtoken	parse.y	/^vtabargtoken ::= ANY(X).            {sqlite3VtabArgExtend(pParse,&X);}$/;"	l
vtabargtoken	parse.y	/^vtabargtoken ::= lp anylist RP(X).  {sqlite3VtabArgExtend(pParse,&X);}$/;"	l
vxworksFileId	os_unix.c	/^struct vxworksFileId {$/;"	s	file:
vxworksFileList	os_unix.c	/^static struct vxworksFileId *vxworksFileList = 0;$/;"	v	typeref:struct:vxworksFileId	file:
vxworksFindFileId	os_unix.c	/^static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){$/;"	f	file:
vxworksIoFinder	os_unix.c	/^  *(*const vxworksIoFinder)(const char*,unixFile*) = vxworksIoFinderImpl;$/;"	v	file:
vxworksIoFinderImpl	os_unix.c	/^static const sqlite3_io_methods *vxworksIoFinderImpl($/;"	f	file:
vxworksReleaseFileId	os_unix.c	/^static void vxworksReleaseFileId(struct vxworksFileId *pId){$/;"	f	file:
vxworksSimplifyName	os_unix.c	/^static int vxworksSimplifyName(char *z, int n){$/;"	f	file:
wait_for_unlock_notify	test_thread.c	/^static int wait_for_unlock_notify(sqlite3 *db){$/;"	f	file:
walBusyLock	wal.c	/^static int walBusyLock($/;"	f	file:
walCheckpoint	wal.c	/^static int walCheckpoint($/;"	f	file:
walChecksumBytes	wal.c	/^static void walChecksumBytes($/;"	f	file:
walCkptInfo	wal.c	/^static volatile WalCkptInfo *walCkptInfo(Wal *pWal){$/;"	f	file:
walCleanupHash	wal.c	/^static void walCleanupHash(Wal *pWal){$/;"	f	file:
walDecodeFrame	wal.c	/^static int walDecodeFrame($/;"	f	file:
walEncodeFrame	wal.c	/^static void walEncodeFrame($/;"	f	file:
walFrameOffset	wal.c	420;"	d	file:
walFramePage	wal.c	/^static int walFramePage(u32 iFrame){$/;"	f	file:
walFramePgno	wal.c	/^static u32 walFramePgno(Wal *pWal, u32 iFrame){$/;"	f	file:
walHash	wal.c	/^static int walHash(u32 iPage){$/;"	f	file:
walHashGet	wal.c	/^static int walHashGet($/;"	f	file:
walIndexAppend	wal.c	/^static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){$/;"	f	file:
walIndexClose	wal.c	/^static void walIndexClose(Wal *pWal, int isDelete){$/;"	f	file:
walIndexHdr	wal.c	/^static volatile WalIndexHdr *walIndexHdr(Wal *pWal){$/;"	f	file:
walIndexPage	wal.c	/^static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){$/;"	f	file:
walIndexReadHdr	wal.c	/^static int walIndexReadHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexRecover	wal.c	/^static int walIndexRecover(Wal *pWal){$/;"	f	file:
walIndexTryHdr	wal.c	/^static int walIndexTryHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexWriteHdr	wal.c	/^static void walIndexWriteHdr(Wal *pWal){$/;"	f	file:
walIteratorFree	wal.c	/^static void walIteratorFree(WalIterator *p){$/;"	f	file:
walIteratorInit	wal.c	/^static int walIteratorInit(Wal *pWal, WalIterator **pp){$/;"	f	file:
walIteratorNext	wal.c	/^static int walIteratorNext($/;"	f	file:
walLimitSize	wal.c	/^static void walLimitSize(Wal *pWal, i64 nMax){$/;"	f	file:
walLockExclusive	wal.c	/^static int walLockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walLockName	wal.c	/^static const char *walLockName(int lockIdx){$/;"	f	file:
walLockShared	wal.c	/^static int walLockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walMerge	wal.c	/^static void walMerge($/;"	f	file:
walMergesort	wal.c	/^static void walMergesort($/;"	f	file:
walNextHash	wal.c	/^static int walNextHash(int iPriorHash){$/;"	f	file:
walPagesize	wal.c	/^static int walPagesize(Wal *pWal){$/;"	f	file:
walRestartHdr	wal.c	/^static void walRestartHdr(Wal *pWal, u32 salt1){$/;"	f	file:
walRestartLog	wal.c	/^static int walRestartLog(Wal *pWal){$/;"	f	file:
walRewriteChecksums	wal.c	/^static int walRewriteChecksums(Wal *pWal, u32 iLast){$/;"	f	file:
walShmBarrier	wal.c	/^static void walShmBarrier(Wal *pWal){$/;"	f	file:
walSyncFlags	pager.c	/^  u8 walSyncFlags;            \/* SYNC_NORMAL or SYNC_FULL for wal writes *\/$/;"	m	struct:Pager	file:
walTryBeginRead	wal.c	/^static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){$/;"	f	file:
walUnlockExclusive	wal.c	/^static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walUnlockShared	wal.c	/^static void walUnlockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walWriteOneFrame	wal.c	/^static int walWriteOneFrame($/;"	f	file:
walWriteToLog	wal.c	/^static int walWriteToLog($/;"	f	file:
wal_autocheckpoint	sqlite3ext.h	/^  int (*wal_autocheckpoint)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines
wal_checkpoint	sqlite3ext.h	/^  int (*wal_checkpoint)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines
wal_checkpoint_v2	sqlite3ext.h	/^  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);$/;"	m	struct:sqlite3_api_routines
wal_hook	sqlite3ext.h	/^  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);$/;"	m	struct:sqlite3_api_routines
walkExpr	walker.c	/^static SQLITE_NOINLINE int walkExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
walkerDepth	sqliteInt.h	/^  int walkerDepth;                          \/* Number of subqueries *\/$/;"	m	struct:Walker
wantToLock	btreeInt.h	/^  int wantToLock;    \/* Number of nested calls to sqlite3BtreeEnter() *\/$/;"	m	struct:Btree
wc	whereInt.h	/^  WhereClause wc;          \/* Decomposition into subterms *\/$/;"	m	struct:WhereOrInfo
wc	whereInt.h	/^  WhereClause wc;          \/* The subexpression broken out *\/$/;"	m	struct:WhereAndInfo
wctrlFlags	whereInt.h	/^  u16 wctrlFlags;           \/* Flags originally passed to sqlite3WhereBegin() *\/$/;"	m	struct:WhereInfo
whereAndInfoDelete	whereexpr.c	/^static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){$/;"	f	file:
whereClauseInsert	whereexpr.c	/^static int whereClauseInsert(WhereClause *pWC, Expr *p, u16 wtFlags){$/;"	f	file:
whereCombineDisjuncts	whereexpr.c	/^static void whereCombineDisjuncts($/;"	f	file:
whereEqualScanEst	where.c	/^static int whereEqualScanEst($/;"	f	file:
whereForeignKeys	alter.c	/^static char *whereForeignKeys(Parse *pParse, Table *pTab){$/;"	f	file:
whereInScanEst	where.c	/^static int whereInScanEst($/;"	f	file:
whereInfoFree	where.c	/^static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){$/;"	f	file:
whereKeyStats	where.c	/^static int whereKeyStats($/;"	f	file:
whereLikeOptimizationStringFixup	wherecode.c	/^static void whereLikeOptimizationStringFixup($/;"	f	file:
whereLikeOptimizationStringFixup	wherecode.c	596;"	d	file:
whereLoopAddAll	where.c	/^static int whereLoopAddAll(WhereLoopBuilder *pBuilder){$/;"	f	file:
whereLoopAddBtree	where.c	/^static int whereLoopAddBtree($/;"	f	file:
whereLoopAddBtreeIndex	where.c	/^static int whereLoopAddBtreeIndex($/;"	f	file:
whereLoopAddOr	where.c	/^static int whereLoopAddOr($/;"	f	file:
whereLoopAddVirtual	where.c	/^static int whereLoopAddVirtual($/;"	f	file:
whereLoopAddVirtualOne	where.c	/^static int whereLoopAddVirtualOne($/;"	f	file:
whereLoopAdjustCost	where.c	/^static void whereLoopAdjustCost(const WhereLoop *p, WhereLoop *pTemplate){$/;"	f	file:
whereLoopCheaperProperSubset	where.c	/^static int whereLoopCheaperProperSubset($/;"	f	file:
whereLoopClear	where.c	/^static void whereLoopClear(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopClearUnion	where.c	/^static void whereLoopClearUnion(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopDelete	where.c	/^static void whereLoopDelete(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopFindLesser	where.c	/^static WhereLoop **whereLoopFindLesser($/;"	f	file:
whereLoopInit	where.c	/^static void whereLoopInit(WhereLoop *p){$/;"	f	file:
whereLoopInsert	where.c	/^static int whereLoopInsert(WhereLoopBuilder *pBuilder, WhereLoop *pTemplate){$/;"	f	file:
whereLoopOutputAdjust	where.c	/^static void whereLoopOutputAdjust($/;"	f	file:
whereLoopPrint	where.c	/^static void whereLoopPrint(WhereLoop *p, WhereClause *pWC){$/;"	f	file:
whereLoopResize	where.c	/^static int whereLoopResize(sqlite3 *db, WhereLoop *p, int n){$/;"	f	file:
whereLoopXfer	where.c	/^static int whereLoopXfer(sqlite3 *db, WhereLoop *pTo, WhereLoop *pFrom){$/;"	f	file:
whereNthSubterm	whereexpr.c	/^static WhereTerm *whereNthSubterm(WhereTerm *pTerm, int N){$/;"	f	file:
whereOrInfoDelete	whereexpr.c	/^static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){$/;"	f	file:
whereOrInsert	where.c	/^static int whereOrInsert($/;"	f	file:
whereOrMove	where.c	/^static void whereOrMove(WhereOrSet *pDest, WhereOrSet *pSrc){$/;"	f	file:
whereOrName	alter.c	/^static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){$/;"	f	file:
wherePathName	where.c	/^static const char *wherePathName(WherePath *pPath, int nLoop, WhereLoop *pLast){$/;"	f	file:
wherePathSatisfiesOrderBy	where.c	/^static i8 wherePathSatisfiesOrderBy($/;"	f	file:
wherePathSolver	where.c	/^static int wherePathSolver(WhereInfo *pWInfo, LogEst nRowEst){$/;"	f	file:
whereRangeAdjust	where.c	/^static LogEst whereRangeAdjust(WhereTerm *pTerm, LogEst nNew){$/;"	f	file:
whereRangeScanEst	where.c	/^static int whereRangeScanEst($/;"	f	file:
whereRangeSkipScanEst	where.c	/^static int whereRangeSkipScanEst($/;"	f	file:
whereScanInit	where.c	/^static WhereTerm *whereScanInit($/;"	f	file:
whereScanNext	where.c	/^static WhereTerm *whereScanNext(WhereScan *pScan){$/;"	f	file:
whereShortCut	where.c	/^static int whereShortCut(WhereLoopBuilder *pBuilder){$/;"	f	file:
whereSortingCost	where.c	/^static LogEst whereSortingCost($/;"	f	file:
whereTempTriggers	alter.c	/^static char *whereTempTriggers(Parse *pParse, Table *pTab){$/;"	f	file:
whereTermPrint	where.c	/^static void whereTermPrint(WhereTerm *pTerm, int iTerm){$/;"	f	file:
whereUsablePartialIndex	where.c	/^static int whereUsablePartialIndex(int iTab, WhereClause *pWC, Expr *pWhere){$/;"	f	file:
width	test_rtree.c	/^  double width;$/;"	m	struct:Cube	file:
win32FileLocker	test1.c	/^struct win32FileLocker {$/;"	s	file:
win32_delete_file	test1.c	/^static int SQLITE_TCLAPI win32_delete_file($/;"	f	file:
win32_exists_path	test1.c	/^static int SQLITE_TCLAPI win32_exists_path($/;"	f	file:
win32_file_lock	test1.c	/^static int SQLITE_TCLAPI win32_file_lock($/;"	f	file:
win32_file_locker	test1.c	/^static void SQLITE_CDECL win32_file_locker(void *pAppData){$/;"	f	file:
win32_find_file	test1.c	/^static int SQLITE_TCLAPI win32_find_file($/;"	f	file:
win32_mkdir	test1.c	/^static int SQLITE_TCLAPI win32_mkdir($/;"	f	file:
win32_rmdir	test1.c	/^static int SQLITE_TCLAPI win32_rmdir($/;"	f	file:
winAccess	os_win.c	/^static int winAccess($/;"	f	file:
winAppData	os_win.c	/^static winVfsAppData winAppData = {$/;"	v	file:
winCheckReservedLock	os_win.c	/^static int winCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winClose	os_win.c	/^static int winClose(sqlite3_file *id){$/;"	f	file:
winConvertFromUtf8Filename	os_win.c	/^static void *winConvertFromUtf8Filename(const char *zFilename){$/;"	f	file:
winConvertToUtf8Filename	os_win.c	/^static char *winConvertToUtf8Filename(const void *zFilename){$/;"	f	file:
winCurrentTime	os_win.c	/^static int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){$/;"	f	file:
winCurrentTimeInt64	os_win.c	/^static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
winDelete	os_win.c	/^static int winDelete($/;"	f	file:
winDeviceCharacteristics	os_win.c	/^static int winDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
winDlClose	os_win.c	/^static void winDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
winDlClose	os_win.c	5610;"	d	file:
winDlError	os_win.c	/^static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
winDlError	os_win.c	5608;"	d	file:
winDlOpen	os_win.c	/^static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
winDlOpen	os_win.c	5607;"	d	file:
winDlSym	os_win.c	/^static void (*winDlSym(sqlite3_vfs *pVfs,void *pH,const char *zSym))(void){$/;"	f	file:
winDlSym	os_win.c	5609;"	d	file:
winFetch	os_win.c	/^static int winFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:
winFile	os_win.c	/^struct winFile {$/;"	s	file:
winFile	os_win.c	/^typedef struct winFile winFile;$/;"	t	typeref:struct:winFile	file:
winFileControl	os_win.c	/^static int winFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
winFileSize	os_win.c	/^static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){$/;"	f	file:
winFullPathname	os_win.c	/^static int winFullPathname($/;"	f	file:
winGetDirSep	os_win.c	183;"	d	file:
winGetLastError	os_win.c	/^static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winGetLastErrorMsg	os_win.c	/^static int winGetLastErrorMsg(DWORD lastErrno, int nBuf, char *zBuf){$/;"	f	file:
winGetReadLock	os_win.c	/^static int winGetReadLock(winFile *pFile){$/;"	f	file:
winGetSystemCall	os_win.c	/^static sqlite3_syscall_ptr winGetSystemCall($/;"	f	file:
winGetTempname	os_win.c	/^static int winGetTempname(sqlite3_vfs *pVfs, char **pzBuf){$/;"	f	file:
winIoMethod	os_win.c	/^static const sqlite3_io_methods winIoMethod = {$/;"	v	file:
winIoNolockMethod	os_win.c	/^static const sqlite3_io_methods winIoNolockMethod = {$/;"	v	file:
winIoerrCanRetry1	os_win.c	2080;"	d	file:
winIoerrRetry	os_win.c	/^static int winIoerrRetry = SQLITE_WIN32_IOERR_RETRY;$/;"	v	file:
winIoerrRetryDelay	os_win.c	/^static int winIoerrRetryDelay = SQLITE_WIN32_IOERR_RETRY_DELAY;$/;"	v	file:
winIsDir	os_win.c	/^static int winIsDir(const void *zConverted){$/;"	f	file:
winIsDirSep	os_win.c	168;"	d	file:
winIsDriveLetterAndColon	os_win.c	/^static BOOL winIsDriveLetterAndColon($/;"	f	file:
winIsVerbatimPathname	os_win.c	/^static BOOL winIsVerbatimPathname($/;"	f	file:
winLock	os_win.c	/^static int winLock(sqlite3_file *id, int locktype){$/;"	f	file:
winLockFile	os_win.c	/^static BOOL winLockFile($/;"	f	file:
winLogError	os_win.c	2023;"	d	file:
winLogErrorAtLine	os_win.c	/^static int winLogErrorAtLine($/;"	f	file:
winLogIoerr	os_win.c	/^static void winLogIoerr(int nRetry, int lineno){$/;"	f	file:
winMakeEndInDirSep	os_win.c	/^static int winMakeEndInDirSep(int nBuf, char *zBuf){$/;"	f	file:
winMapfile	os_win.c	/^static int winMapfile(winFile *pFd, sqlite3_int64 nByte){$/;"	f	file:
winMbcsToUnicode	os_win.c	/^static LPWSTR winMbcsToUnicode(const char *zText, int useAnsi){$/;"	f	file:
winMbcsToUtf8	os_win.c	/^static char *winMbcsToUtf8(const char *zText, int useAnsi){$/;"	f	file:
winMemAssertMagic	os_win.c	428;"	d	file:
winMemAssertMagic	os_win.c	430;"	d	file:
winMemAssertMagic1	os_win.c	426;"	d	file:
winMemAssertMagic2	os_win.c	427;"	d	file:
winMemData	os_win.c	/^struct winMemData {$/;"	s	file:
winMemData	os_win.c	/^typedef struct winMemData winMemData;$/;"	t	typeref:struct:winMemData	file:
winMemFree	os_win.c	/^static void winMemFree(void *pPrior){$/;"	f	file:
winMemGetDataPtr	os_win.c	433;"	d	file:
winMemGetHeap	os_win.c	434;"	d	file:
winMemGetOwned	os_win.c	435;"	d	file:
winMemInit	os_win.c	/^static int winMemInit(void *pAppData){$/;"	f	file:
winMemMalloc	os_win.c	/^static void *winMemMalloc(int nBytes){$/;"	f	file:
winMemRealloc	os_win.c	/^static void *winMemRealloc(void *pPrior, int nBytes){$/;"	f	file:
winMemRoundup	os_win.c	/^static int winMemRoundup(int n){$/;"	f	file:
winMemShutdown	os_win.c	/^static void winMemShutdown(void *pAppData){$/;"	f	file:
winMemSize	os_win.c	/^static int winMemSize(void *p){$/;"	f	file:
winModeBit	os_win.c	/^static void winModeBit(winFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
winMutexAlloc	mutex_w32.c	/^static sqlite3_mutex *winMutexAlloc(int iType){$/;"	f	file:
winMutexEnd	mutex_w32.c	/^static int winMutexEnd(void){$/;"	f	file:
winMutexEnter	mutex_w32.c	/^static void winMutexEnter(sqlite3_mutex *p){$/;"	f	file:
winMutexFree	mutex_w32.c	/^static void winMutexFree(sqlite3_mutex *p){$/;"	f	file:
winMutexHeld	mutex_w32.c	/^static int winMutexHeld(sqlite3_mutex *p){$/;"	f	file:
winMutexInit	mutex_w32.c	/^static int winMutexInit(void){$/;"	f	file:
winMutexLeave	mutex_w32.c	/^static void winMutexLeave(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld	mutex_w32.c	/^static int winMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld2	mutex_w32.c	/^static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){$/;"	f	file:
winMutexTry	mutex_w32.c	/^static int winMutexTry(sqlite3_mutex *p){$/;"	f	file:
winMutex_isInit	mutex_w32.c	/^static int winMutex_isInit = 0;$/;"	v	file:
winMutex_isNt	mutex_w32.c	/^static int winMutex_isNt = -1; \/* <0 means "need to query" *\/$/;"	v	file:
winMutex_lock	mutex_w32.c	/^static LONG SQLITE_WIN32_VOLATILE winMutex_lock = 0;$/;"	v	file:
winMutex_staticMutexes	mutex_w32.c	/^static sqlite3_mutex winMutex_staticMutexes[] = {$/;"	v	file:
winNextSystemCall	os_win.c	/^static const char *winNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
winNolockAppData	os_win.c	/^static winVfsAppData winNolockAppData = {$/;"	v	file:
winNolockCheckReservedLock	os_win.c	/^static int winNolockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winNolockLock	os_win.c	/^static int winNolockLock(sqlite3_file *id, int locktype){$/;"	f	file:
winNolockUnlock	os_win.c	/^static int winNolockUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winOpen	os_win.c	/^static int winOpen($/;"	f	file:
winOpenSharedMemory	os_win.c	/^static int winOpenSharedMemory(winFile *pDbFd){$/;"	f	file:
winRandomness	os_win.c	/^static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winRead	os_win.c	/^static int winRead($/;"	f	file:
winRetryIoerr	os_win.c	/^static int winRetryIoerr(int *pnRetry, DWORD *pError){$/;"	f	file:
winSectorSize	os_win.c	/^static int winSectorSize(sqlite3_file *id){$/;"	f	file:
winSeekFile	os_win.c	/^static int winSeekFile(winFile *pFile, sqlite3_int64 iOffset){$/;"	f	file:
winSetSystemCall	os_win.c	/^static int winSetSystemCall($/;"	f	file:
winShm	os_win.c	/^struct winShm {$/;"	s	file:
winShm	os_win.c	/^typedef struct winShm winShm;           \/* A connection to shared-memory *\/$/;"	t	typeref:struct:winShm	file:
winShmBarrier	os_win.c	/^static void winShmBarrier($/;"	f	file:
winShmBarrier	os_win.c	4201;"	d	file:
winShmEnterMutex	os_win.c	/^static void winShmEnterMutex(void){$/;"	f	file:
winShmLeaveMutex	os_win.c	/^static void winShmLeaveMutex(void){$/;"	f	file:
winShmLock	os_win.c	/^static int winShmLock($/;"	f	file:
winShmLock	os_win.c	4200;"	d	file:
winShmMap	os_win.c	/^static int winShmMap($/;"	f	file:
winShmMap	os_win.c	4199;"	d	file:
winShmMutexHeld	os_win.c	/^static int winShmMutexHeld(void) {$/;"	f	file:
winShmNode	os_win.c	/^struct winShmNode {$/;"	s	file:
winShmNode	os_win.c	/^typedef struct winShmNode winShmNode;   \/* A region of shared-memory *\/$/;"	t	typeref:struct:winShmNode	file:
winShmNodeList	os_win.c	/^static winShmNode *winShmNodeList = 0;$/;"	v	file:
winShmPurge	os_win.c	/^static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){$/;"	f	file:
winShmSystemLock	os_win.c	/^static int winShmSystemLock($/;"	f	file:
winShmUnmap	os_win.c	/^static int winShmUnmap($/;"	f	file:
winShmUnmap	os_win.c	4202;"	d	file:
winSleep	os_win.c	/^static int winSleep(sqlite3_vfs *pVfs, int microsec){$/;"	f	file:
winSync	os_win.c	/^static int winSync(sqlite3_file *id, int flags){$/;"	f	file:
winSysInfo	os_win.c	/^static SYSTEM_INFO winSysInfo;$/;"	v	file:
winTruncate	os_win.c	/^static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){$/;"	f	file:
winUnfetch	os_win.c	/^static int winUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:
winUnicodeToMbcs	os_win.c	/^static char *winUnicodeToMbcs(LPCWSTR zWideText, int useAnsi){$/;"	f	file:
winUnicodeToUtf8	os_win.c	/^static char *winUnicodeToUtf8(LPCWSTR zWideText){$/;"	f	file:
winUnlock	os_win.c	/^static int winUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winUnlockFile	os_win.c	/^static BOOL winUnlockFile($/;"	f	file:
winUnlockReadLock	os_win.c	/^static int winUnlockReadLock(winFile *pFile){$/;"	f	file:
winUnmapfile	os_win.c	/^static int winUnmapfile(winFile *pFile){$/;"	f	file:
winUtf8ToMbcs	os_win.c	/^static char *winUtf8ToMbcs(const char *zText, int useAnsi){$/;"	f	file:
winUtf8ToUnicode	os_win.c	/^static LPWSTR winUtf8ToUnicode(const char *zText){$/;"	f	file:
winVfsAppData	os_win.c	/^struct winVfsAppData {$/;"	s	file:
winVfsAppData	os_win.c	/^typedef struct winVfsAppData winVfsAppData;$/;"	t	typeref:struct:winVfsAppData	file:
winWrite	os_win.c	/^static int winWrite($/;"	f	file:
win_mem_data	os_win.c	/^static struct winMemData win_mem_data = {$/;"	v	typeref:struct:winMemData	file:
win_syscall	os_win.c	/^static struct win_syscall {$/;"	s	file:
winceCreateLock	os_win.c	/^static int winceCreateLock(const char *zFilename, winFile *pFile){$/;"	f	file:
winceDestroyLock	os_win.c	/^static void winceDestroyLock(winFile *pFile){$/;"	f	file:
winceLock	os_win.c	/^typedef struct winceLock {$/;"	s	file:
winceLock	os_win.c	/^} winceLock;$/;"	t	typeref:struct:winceLock	file:
winceLockFile	os_win.c	/^static BOOL winceLockFile($/;"	f	file:
winceMutexAcquire	os_win.c	/^static void winceMutexAcquire(HANDLE h){$/;"	f	file:
winceMutexRelease	os_win.c	2184;"	d	file:
winceUnlockFile	os_win.c	/^static BOOL winceUnlockFile($/;"	f	file:
withDup	expr.c	/^static With *withDup(sqlite3 *db, With *p){$/;"	f	file:
withDup	expr.c	986;"	d	file:
withExpand	select.c	/^static int withExpand($/;"	f	file:
working_64bit_int	test1.c	/^static int SQLITE_TCLAPI working_64bit_int($/;"	f	file:
wrFlag	vdbeInt.h	/^  u8 wrFlag;            \/* The wrFlag argument to sqlite3BtreeCursor() *\/$/;"	m	struct:VdbeCursor
wrMemFree	test_init.c	/^static void wrMemFree(void *p)            {wrapped.mem.xFree(p);}$/;"	f	file:
wrMemInit	test_init.c	/^static int wrMemInit(void *pAppData){$/;"	f	file:
wrMemMalloc	test_init.c	/^static void *wrMemMalloc(int n)           {return wrapped.mem.xMalloc(n);}$/;"	f	file:
wrMemRealloc	test_init.c	/^static void *wrMemRealloc(void *p, int n) {return wrapped.mem.xRealloc(p, n);}$/;"	f	file:
wrMemRoundup	test_init.c	/^static int wrMemRoundup(int n)            {return wrapped.mem.xRoundup(n);}$/;"	f	file:
wrMemShutdown	test_init.c	/^static void wrMemShutdown(void *pAppData){$/;"	f	file:
wrMemSize	test_init.c	/^static int wrMemSize(void *p)             {return wrapped.mem.xSize(p);}$/;"	f	file:
wrMutexAlloc	test_init.c	/^static sqlite3_mutex *wrMutexAlloc(int e){$/;"	f	file:
wrMutexEnd	test_init.c	/^static int wrMutexEnd(void){$/;"	f	file:
wrMutexEnter	test_init.c	/^static void wrMutexEnter(sqlite3_mutex *p){$/;"	f	file:
wrMutexFree	test_init.c	/^static void wrMutexFree(sqlite3_mutex *p){$/;"	f	file:
wrMutexHeld	test_init.c	/^static int wrMutexHeld(sqlite3_mutex *p){$/;"	f	file:
wrMutexInit	test_init.c	/^static int wrMutexInit(void){$/;"	f	file:
wrMutexLeave	test_init.c	/^static void wrMutexLeave(sqlite3_mutex *p){$/;"	f	file:
wrMutexNotheld	test_init.c	/^static int wrMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
wrMutexTry	test_init.c	/^static int wrMutexTry(sqlite3_mutex *p){$/;"	f	file:
wrPCacheCachesize	test_init.c	/^static void wrPCacheCachesize(sqlite3_pcache *p, int n){$/;"	f	file:
wrPCacheCreate	test_init.c	/^static sqlite3_pcache *wrPCacheCreate(int a, int b, int c){$/;"	f	file:
wrPCacheDestroy	test_init.c	/^static void wrPCacheDestroy(sqlite3_pcache *p){$/;"	f	file:
wrPCacheFetch	test_init.c	/^static sqlite3_pcache_page *wrPCacheFetch(sqlite3_pcache *p, unsigned a, int b){$/;"	f	file:
wrPCacheInit	test_init.c	/^static int wrPCacheInit(void *pArg){$/;"	f	file:
wrPCachePagecount	test_init.c	/^static int wrPCachePagecount(sqlite3_pcache *p){$/;"	f	file:
wrPCacheRekey	test_init.c	/^static void wrPCacheRekey($/;"	f	file:
wrPCacheShutdown	test_init.c	/^static void wrPCacheShutdown(void *pArg){$/;"	f	file:
wrPCacheTruncate	test_init.c	/^static void wrPCacheTruncate(sqlite3_pcache *p, unsigned a){$/;"	f	file:
wrPCacheUnpin	test_init.c	/^static void wrPCacheUnpin(sqlite3_pcache *p, sqlite3_pcache_page *a, int b){$/;"	f	file:
wrapped	test_init.c	/^} wrapped;$/;"	v	typeref:struct:Wrapped	file:
writableSchema	shell.c	/^  int writableSchema;    \/* True if PRAGMA writable_schema=ON *\/$/;"	m	struct:ShellState	file:
write32bits	pager.c	/^static int write32bits(sqlite3_file *fd, i64 offset, u32 val){$/;"	f	file:
writeDbFile	test6.c	/^static int writeDbFile(CrashFile *p, u8 *z, i64 iAmt, i64 iOff){$/;"	f	file:
writeJournalHdr	pager.c	/^static int writeJournalHdr(Pager *pPager){$/;"	f	file:
writeListAppend	test6.c	/^static int writeListAppend($/;"	f	file:
writeListSync	test6.c	/^static int writeListSync(CrashFile *pFile, int isCrash){$/;"	f	file:
writeLock	wal.c	/^  u8 writeLock;              \/* True if in a write transaction *\/$/;"	m	struct:Wal	file:
writeMask	sqliteInt.h	/^  yDbMask writeMask;   \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse
writeMasterJournal	pager.c	/^static int writeMasterJournal(Pager *pPager, const char *zMaster){$/;"	f	file:
writefileFunc	shell.c	/^static void writefileFunc($/;"	f	file:
wsFlags	whereInt.h	/^  u32 wsFlags;          \/* WHERE_* flags describing the plan *\/$/;"	m	struct:WhereLoop
wsdAutoext	loadext.c	658;"	d	file:
wsdAutoext	loadext.c	661;"	d	file:
wsdAutoextInit	loadext.c	656;"	d	file:
wsdAutoextInit	loadext.c	660;"	d	file:
wsdHooks	fault.c	49;"	d	file:
wsdHooks	fault.c	52;"	d	file:
wsdHooksInit	fault.c	47;"	d	file:
wsdHooksInit	fault.c	51;"	d	file:
wsdPrng	random.c	45;"	d	file:
wsdStat	status.c	59;"	d	file:
wsdStat	status.c	62;"	d	file:
wsdStatInit	status.c	58;"	d	file:
wsdStatInit	status.c	61;"	d	file:
wtFlags	whereInt.h	/^  u16 wtFlags;            \/* TERM_xxx bit flags.  See below *\/$/;"	m	struct:WhereTerm
x	sqliteInt.h	/^      } x;$/;"	m	union:ExprList::ExprList_item::__anon14	typeref:struct:ExprList::ExprList_item::__anon14::__anon15
x	sqliteInt.h	/^  } x;$/;"	m	struct:Expr	typeref:union:Expr::__anon13
x	test_rtree.c	/^  double x;$/;"	m	struct:Cube	file:
xAdvance	vdbe.h	/^    int (*xAdvance)(BtCursor *, int *);$/;"	m	union:VdbeOp::p4union
xAuth	sqliteInt.h	/^  sqlite3_xauth xAuth;          \/* Access authorization function *\/$/;"	m	struct:sqlite3
xBacktrace	mem2.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:__anon21	file:
xBenignBegin	fault.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	file:
xBenignEnd	fault.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	file:
xBusy	test_superlock.c	/^  int (*xBusy)(void*,int);        \/* Pointer to busy-handler function *\/$/;"	m	struct:SuperlockBusy	file:
xBusy	test_thread.c	/^static int xBusy(void *pArg, int nBusy){$/;"	f	file:
xBusyHandler	pager.c	/^  int (*xBusyHandler)(void*); \/* Function to call when busy *\/$/;"	m	struct:Pager	file:
xCallback	test_quota.c	/^  void (*xCallback)(             \/* Callback invoked when going over quota *\/$/;"	m	struct:quotaGroup	file:
xCellSize	btreeInt.h	/^  u16 (*xCellSize)(MemPage*,u8*);             \/* cellSizePtr method *\/$/;"	m	struct:MemPage
xCmp	sqliteInt.h	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq
xCodec	pager.c	/^  void *(*xCodec)(void*,void*,Pgno,int); \/* Routine for en\/decoding data *\/$/;"	m	struct:Pager	file:
xCodecFree	pager.c	/^  void (*xCodecFree)(void*);             \/* Destructor for the codec *\/$/;"	m	struct:Pager	file:
xCodecSizeChng	pager.c	/^  void (*xCodecSizeChng)(void*,int,int); \/* Notify of page size changes *\/$/;"	m	struct:Pager	file:
xCollNeeded	sqliteInt.h	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3
xCollNeeded16	sqliteInt.h	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3
xCommitCallback	sqliteInt.h	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3
xCompare	vdbesort.c	/^  SorterCompare xCompare;         \/* Compare function to use *\/$/;"	m	struct:SortSubtask	file:
xDel	sqliteInt.h	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq
xDel	vdbeInt.h	/^  void (*xDel)(void*);\/* Destructor for Mem.z - only valid if MEM_Dyn *\/$/;"	m	struct:Mem
xDelete	vdbeInt.h	/^  void (*xDelete)(void *);        \/* Destructor for the aux data *\/$/;"	m	struct:AuxData
xDestroy	sqliteInt.h	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module
xDestroy	sqliteInt.h	/^  void (*xDestroy)(void *);$/;"	m	struct:FuncDestructor
xDestroy	test_quota.c	/^  void (*xDestroy)(void*);       \/* Optional destructor for pArg *\/$/;"	m	struct:quotaGroup	file:
xExprCallback	sqliteInt.h	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker
xFinalize	sqliteInt.h	/^  void (*xFinalize)(sqlite3_context*);                  \/* Agg finalizer *\/$/;"	m	struct:FuncDef
xFree	test_intarray.c	/^  void (*xFree)(void*);     \/* Function used to free a[] *\/$/;"	m	struct:sqlite3_intarray	file:
xFreeSchema	btreeInt.h	/^  void (*xFreeSchema)(void*);  \/* Destructor for BtShared.pSchema *\/$/;"	m	struct:BtShared
xFunc	sqliteInt.h	/^  int (*xFunc)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler
xLog	sqliteInt.h	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config
xLogcallback	test1.c	/^static void xLogcallback(void *unused, int err, char *zMsg){$/;"	f	file:
xOp	test4.c	/^  void (*xOp)(Thread*);  \/* next operation to do *\/$/;"	m	struct:Thread	file:
xOp	test7.c	/^  void (*xOp)(Thread*);    \/* next operation to do *\/$/;"	m	struct:Thread	file:
xOrig	test_syscall.c	/^  sqlite3_syscall_ptr xOrig;$/;"	m	struct:TestSyscallArray	file:
xOut	test_vfstrace.c	/^  int (*xOut)(const char*, void*);    \/* Send output here *\/$/;"	m	struct:vfstrace_info	file:
xParseCell	btreeInt.h	/^  void (*xParseCell)(MemPage*,u8*,CellInfo*); \/* btreeParseCell method *\/$/;"	m	struct:MemPage
xPreUpdateCallback	sqliteInt.h	/^  void (*xPreUpdateCallback)(   \/* Registered using sqlite3_preupdate_hook() *\/$/;"	m	struct:sqlite3
xProfile	sqliteInt.h	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3
xProgress	sqliteInt.h	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3
xReiniter	pager.c	/^  void (*xReiniter)(DbPage*); \/* Call this routine when reloading pages *\/$/;"	m	struct:Pager	file:
xRollbackCallback	sqliteInt.h	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3
xSFunc	sqliteInt.h	/^  void (*xSFunc)(sqlite3_context*,int,sqlite3_value**); \/* func or agg-step *\/$/;"	m	struct:FuncDef
xSelectCallback	sqliteInt.h	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker
xSelectCallback2	sqliteInt.h	/^  void (*xSelectCallback2)(Walker*,Select*);\/* Second callback for SELECTs *\/$/;"	m	struct:Walker
xSqllog	sqliteInt.h	/^  void(*xSqllog)(void*,sqlite3*,const char*, int);$/;"	m	struct:Sqlite3Config
xStress	pcache.c	/^  int (*xStress)(void*,PgHdr*);       \/* Call to try make a page clean *\/$/;"	m	struct:PCache	file:
xTask	threads.c	/^  void *(*xTask)(void*);         \/* The thread routine *\/$/;"	m	struct:SQLiteThread	file:
xTask	threads.c	/^  void *(*xTask)(void*);   \/* The routine to run as a thread *\/$/;"	m	struct:SQLiteThread	file:
xTest	test_syscall.c	/^  sqlite3_syscall_ptr xTest;$/;"	m	struct:TestSyscallArray	file:
xTestCallback	sqliteInt.h	/^  int (*xTestCallback)(int);        \/* Invoked by sqlite3FaultSim() *\/$/;"	m	struct:Sqlite3Config
xTrace	sqliteInt.h	/^  int (*xTrace)(u32,void*,void*,void*);     \/* Trace function *\/$/;"	m	struct:sqlite3
xUnlockNotify	sqliteInt.h	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3
xUpdateCallback	sqliteInt.h	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3
xVdbeBranch	sqliteInt.h	/^  void (*xVdbeBranch)(void*,int iSrcLine,u8 eThis,u8 eMx);  \/* Callback *\/$/;"	m	struct:Sqlite3Config
xWalCallback	sqliteInt.h	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3
xferCompatibleIndex	insert.c	/^static int xferCompatibleIndex(Index *pDest, Index *pSrc){$/;"	f	file:
xferOptimization	insert.c	/^static int xferOptimization($/;"	f	file:
xmax	test_rtree.c	/^    double xmax;$/;"	m	struct:Circle::Box	file:
xmin	test_rtree.c	/^    double xmin;$/;"	m	struct:Circle::Box	file:
xorMemory	os_win.c	/^static void xorMemory(EntropyGatherer *p, unsigned char *x, int sz){$/;"	f	file:
xthreadsafe	sqlite3ext.h	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines
y	test_rtree.c	/^  double y;$/;"	m	struct:Cube	file:
yColCache	sqliteInt.h	/^  struct yColCache {$/;"	s	struct:Parse
yDbMask	sqliteInt.h	/^  typedef unsigned char yDbMask[(SQLITE_MAX_ATTACHED+9)\/8];$/;"	t
yDbMask	sqliteInt.h	/^  typedef unsigned int yDbMask;$/;"	t
ymax	test_rtree.c	/^    double ymax;$/;"	m	struct:Circle::Box	file:
ymin	test_rtree.c	/^    double ymin;$/;"	m	struct:Circle::Box	file:
ynVar	sqliteInt.h	/^typedef i16 ynVar;$/;"	t
ynVar	sqliteInt.h	/^typedef int ynVar;$/;"	t
z	shell.c	/^  char *z;            \/* Accumulated text for a field *\/$/;"	m	struct:ImportCtx	file:
z	sqliteInt.h	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token
z	test1.c	/^  char *z;     \/* The space *\/$/;"	m	struct:dstr	file:
z	test_multiplex.c	/^    char *z;                          \/* Name of this chunk *\/$/;"	m	struct:multiplexGroup::multiplexReal	file:
z	test_rtree.c	/^  double z;$/;"	m	struct:Cube	file:
z	vdbe.h	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::p4union
z	vdbeInt.h	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:Mem
zAlias	sqliteInt.h	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item
zAlloc	test_onefile.c	/^  char *zAlloc;$/;"	m	struct:tmp_file	file:
zArg	test4.c	/^  char *zArg;            \/* argument usable by xOp *\/$/;"	m	struct:Thread	file:
zArg	test7.c	/^  char *zArg;              \/* argument usable by xOp *\/$/;"	m	struct:Thread	file:
zAuth	tclsqlite.c	/^  char *zAuth;               \/* The authorization callback routine *\/$/;"	m	struct:SqliteDb	file:
zAuthContext	sqliteInt.h	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext
zAuthContext	sqliteInt.h	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse
zAuthPW	sqliteInt.h	/^  char *zAuthPW;                \/* Password used to authenticate *\/$/;"	m	struct:sqlite3_userauth
zAuthUser	sqliteInt.h	/^  char *zAuthUser;              \/* User name used to authenticate *\/$/;"	m	struct:sqlite3_userauth
zBase	sqliteInt.h	/^  char *zBase;         \/* A base allocation.  Not from malloc. *\/$/;"	m	struct:StrAccum
zBase	vdbeInt.h	/^  char zBase[100];   \/* Initial space *\/$/;"	m	struct:Explain
zBuf	test6.c	/^  u8 *zBuf;                    \/* Pointer to copy of written data *\/$/;"	m	struct:WriteBuffer	file:
zBuf	test_fs.c	/^  char *zBuf;$/;"	m	struct:fs_cursor	file:
zBusy	tclsqlite.c	/^  char *zBusy;               \/* The busy callback routine *\/$/;"	m	struct:SqliteDb	file:
zCanonicalName	os_unix.c	/^  char *zCanonicalName;         \/* Canonical filename *\/$/;"	m	struct:vxworksFileId	file:
zChunk	memjournal.c	/^  u8 zChunk[8];                   \/* Content of this chunk *\/$/;"	m	struct:FileChunk	file:
zCol	sqliteInt.h	/^    char *zCol;           \/* Name of column in zTo.  If NULL use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap
zColAff	sqliteInt.h	/^  char *zColAff;           \/* String defining the affinity of each column *\/$/;"	m	struct:Index
zColAff	sqliteInt.h	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table
zColl	sqliteInt.h	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column
zCollName	whereInt.h	/^  const char *zCollName;     \/* Required collating sequence, if not NULL *\/$/;"	m	struct:WhereScan
zComment	vdbe.h	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp
zCommit	tclsqlite.c	/^  char *zCommit;             \/* The commit hook callback routine *\/$/;"	m	struct:SqliteDb	file:
zCrashFile	test6.c	/^  char zCrashFile[500];        \/* Crash during an xSync() on this file *\/ $/;"	m	struct:CrashGlobal	file:
zCteErr	sqliteInt.h	/^    const char *zCteErr;            \/* Error message for circular references *\/$/;"	m	struct:With::Cte
zData	test6.c	/^  u8 *zData;                           \/* Buffer containing file contents *\/$/;"	m	struct:CrashFile	file:
zDatabase	analyze.c	/^  const char *zDatabase;$/;"	m	struct:analysisInfo	file:
zDatabase	sqliteInt.h	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item
zDb	sqliteInt.h	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer
zDb	test_fs.c	/^  char *zDb;                      \/* Name of db containing zTbl *\/$/;"	m	struct:fs_vtab	file:
zDb	vdbeblob.c	/^  char *zDb;              \/* Database name *\/$/;"	m	struct:Incrblob	file:
zDbFilename	shell.c	/^  const char *zDbFilename;    \/* name of the database file *\/$/;"	m	struct:ShellState	file:
zDeleteOnClose	os_win.c	/^  LPWSTR zDeleteOnClose;  \/* Name of file to delete when closing *\/$/;"	m	struct:winFile	file:
zDestTable	shell.c	/^  char *zDestTable;      \/* Name of destination table when MODE_Insert *\/$/;"	m	struct:ShellState	file:
zDir	test_fs.c	/^  char *zDir;                     \/* Buffer containing directory scanned *\/$/;"	m	struct:FsdirCsr	file:
zEnd	sqliteInt.h	/^  const char *zEnd;     \/* One character past the end of input text *\/$/;"	m	struct:ExprSpan
zErr	test4.c	/^  char *zErr;           \/* operation error *\/$/;"	m	struct:Thread	file:
zErr	test7.c	/^  char *zErr;              \/* operation error *\/$/;"	m	struct:Thread	file:
zErrMsg	sqliteInt.h	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse
zErrMsg	table.c	/^  char *zErrMsg;     \/* Error message text, if an error occurs *\/$/;"	m	struct:TabResult	file:
zErrMsg	vdbeInt.h	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe
zFName	test_vfstrace.c	/^  const char *zFName;       \/* Base name of the file *\/$/;"	m	struct:vfstrace_file	file:
zFile	shell.c	/^  const char *zFile;  \/* Name of the input file *\/$/;"	m	struct:ImportCtx	file:
zFile	test_osinst.c	/^  char *zFile;                    \/* File name for pFd *\/$/;"	m	struct:VfslogVtab	file:
zFile	test_vfs.c	/^  char *zFile;                    \/* Associated file name *\/$/;"	m	struct:TestvfsBuffer	file:
zFilename	os_unix.c	/^  char *zFilename;           \/* Name of the mmapped file *\/$/;"	m	struct:unixShmNode	file:
zFilename	os_win.c	/^  char *zFilename;           \/* Name of the file *\/$/;"	m	struct:winShmNode	file:
zFilename	pager.c	/^  char *zFilename;            \/* Name of the database file *\/$/;"	m	struct:Pager	file:
zFilename	test4.c	/^  char *zFilename;       \/* Name of database file *\/$/;"	m	struct:Thread	file:
zFilename	test7.c	/^  char *zFilename;         \/* Name of database file *\/$/;"	m	struct:Thread	file:
zFilename	test_quota.c	/^  char *zFilename;                \/* Name of this file *\/$/;"	m	struct:quotaFile	file:
zFilename	test_vfs.c	/^  const char *zFilename;          \/* Filename as passed to xOpen() *\/$/;"	m	struct:TestvfsFd	file:
zFreeOnClose	shell.c	/^  char *zFreeOnClose;         \/* Filename to free when closing *\/$/;"	m	struct:ShellState	file:
zHelp	shell.c	/^static char zHelp[] =$/;"	v	file:
zIdx	test_sqllog.c	/^  char zIdx[SQLLOG_NAMESZ];       \/* Full path to *.idx file *\/$/;"	m	struct:SLGlobal	file:
zIn	test_server.c	/^  const char *zIn;             \/* Input filename or SQL statement *\/$/;"	m	struct:SqlMessage	file:
zIndexedBy	sqliteInt.h	/^      char *zIndexedBy;    \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	union:SrcList::SrcList_item::__anon17
zJournal	memjournal.c	/^  const char *zJournal;           \/* Name of the journal file *\/$/;"	m	struct:MemJournal	file:
zJournal	pager.c	/^  char *zJournal;             \/* Name of the journal file *\/$/;"	m	struct:Pager	file:
zLogName	test8.c	/^  char *zLogName;         \/* Name of the log table *\/$/;"	m	struct:echo_vtab	file:
zMagicHeader	btree.c	/^static const char zMagicHeader[] = SQLITE_FILE_HEADER;$/;"	v	file:
zMalloc	vdbeInt.h	/^  char *zMalloc;      \/* Space to hold MEM_Str or MEM_Blob if szMalloc>0 *\/$/;"	m	struct:Mem
zMbcsName	test_quota.c	/^  char *zMbcsName;        \/* Full MBCS pathname of the file *\/$/;"	m	struct:quota_FILE	file:
zName	build.c	/^  const char *zName;   \/* Name of the table *\/$/;"	m	struct:TableLock	file:
zName	dbstat.c	/^  char *zName;                    \/* Value of 'name' column *\/$/;"	m	struct:StatCursor	file:
zName	os_unix.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:unix_syscall	file:
zName	os_win.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:win_syscall	file:
zName	pragma.h	/^  const char *const zName;  \/* Name of pragma *\/$/;"	m	struct:sPragmaNames
zName	shell.c	/^  char *zName;             \/* Symbolic name for this session *\/$/;"	m	struct:OpenSession	file:
zName	sqliteInt.h	/^    char *zName;                    \/* Name of this CTE *\/$/;"	m	struct:With::Cte
zName	sqliteInt.h	/^    char *zName;            \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item
zName	sqliteInt.h	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item
zName	sqliteInt.h	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item
zName	sqliteInt.h	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint
zName	sqliteInt.h	/^  char *zName;             \/* Name of this index *\/$/;"	m	struct:Index
zName	sqliteInt.h	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger
zName	sqliteInt.h	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq
zName	sqliteInt.h	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table
zName	sqliteInt.h	/^  char *zName;         \/* Name of this database *\/$/;"	m	struct:Db
zName	sqliteInt.h	/^  char *zName;     \/* Name of this column, \\000, then the type *\/$/;"	m	struct:Column
zName	sqliteInt.h	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module
zName	sqliteInt.h	/^  const char *zName;   \/* SQL name of the function. *\/$/;"	m	struct:FuncDef
zName	tclsqlite.c	/^  char *zName;          \/* Name of this function *\/$/;"	m	struct:SqlFunc	file:
zName	test6.c	/^  char *zName;$/;"	m	struct:CrashFile	file:
zName	test_journal.c	/^  const char *zName;       \/* Name of open file *\/$/;"	m	struct:jt_file	file:
zName	test_multiplex.c	/^  char *zName;                     \/* Base filename of this group *\/$/;"	m	struct:multiplexGroup	file:
zName	test_onefile.c	/^  const char *zName;$/;"	m	struct:fs_real_file	file:
zName	test_syscall.c	/^  const char *zName;$/;"	m	struct:TestSyscallArray	file:
zName	test_vfs.c	/^  char *zName;                    \/* Name of this VFS *\/$/;"	m	struct:Testvfs	file:
zName	vdbeInt.h	/^  char *zName;                    \/* Name of table or index *\/$/;"	m	struct:ScanStatus
zNeededCollation	test1.c	/^static char zNeededCollation[200];$/;"	v	file:
zNull	tclsqlite.c	/^  char *zNull;               \/* Text to substitute for an SQL NULL value *\/$/;"	m	struct:SqliteDb	file:
zOptions	shell.c	/^static const char zOptions[] =$/;"	v	file:
zOut	test_server.c	/^  const char *zOut;            \/* Tail of the SQL statement *\/$/;"	m	struct:SqlMessage	file:
zPagetype	dbstat.c	/^  char *zPagetype;                \/* Value of 'pagetype' column *\/$/;"	m	struct:StatCursor	file:
zPath	dbstat.c	/^  char *zPath;                    \/* Path to this page *\/$/;"	m	struct:StatPage	file:
zPath	dbstat.c	/^  char *zPath;                    \/* Value of 'path' column *\/$/;"	m	struct:StatCursor	file:
zPath	os_unix.c	/^  const char *zPath;                  \/* Name of the file *\/$/;"	m	struct:unixFile	file:
zPath	os_win.c	/^  const char *zPath;      \/* Full pathname of this file *\/$/;"	m	struct:winFile	file:
zPattern	test_quota.c	/^  const char *zPattern;          \/* Filename pattern to be quotaed *\/$/;"	m	struct:quotaGroup	file:
zPfx	btreeInt.h	/^  const char *zPfx; \/* Error message prefix *\/$/;"	m	struct:IntegrityCk
zPool	mem5.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	file:
zPrefix	test_sqllog.c	/^  char zPrefix[SQLLOG_NAMESZ];    \/* Prefix for all created files *\/$/;"	m	struct:SLGlobal	file:
zProfile	tclsqlite.c	/^  char *zProfile;            \/* The profile callback routine *\/$/;"	m	struct:SqliteDb	file:
zProgress	tclsqlite.c	/^  char *zProgress;           \/* The progress callback routine *\/$/;"	m	struct:SqliteDb	file:
zScript	tclsqlite.c	/^  char *zScript;        \/* The script to be run *\/$/;"	m	struct:SqlCollate	file:
zScript	test_thread.c	/^  char *zScript;           \/* The script to execute. *\/$/;"	m	struct:EvalEvent	file:
zScript	test_thread.c	/^  char *zScript;           \/* The script to execute. *\/$/;"	m	struct:SqlThread	file:
zSelName	sqliteInt.h	/^  char zSelName[12];     \/* Symbolic name of this SELECT use for debugging *\/$/;"	m	struct:Select
zShellStatic	shell.c	/^static const char *zShellStatic = 0;$/;"	v	file:
zSpan	sqliteInt.h	/^    char *zSpan;            \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item
zSql	tclsqlite.c	/^  const char *zSql;               \/* Remaining SQL to execute *\/$/;"	m	struct:DbEvalContext	file:
zSql	tclsqlite.c	/^  const char *zSql;        \/* Text of the SQL statement *\/$/;"	m	struct:SqlPreparedStmt	file:
zSql	vdbeInt.h	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe
zStart	sqliteInt.h	/^  const char *zStart;   \/* First character of input text *\/$/;"	m	struct:ExprSpan
zStaticErr	test4.c	/^  char *zStaticErr;     \/* Static error message *\/$/;"	m	struct:Thread	file:
zStaticErr	test7.c	/^  char *zStaticErr;        \/* Static error message *\/$/;"	m	struct:Thread	file:
zTableName	test8.c	/^  char *zTableName;       \/* Name of the real table *\/$/;"	m	struct:echo_vtab	file:
zTail	sqliteInt.h	/^  const char *zTail;        \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse
zTarget	sqliteInt.h	/^  char *zTarget;       \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep
zTbl	test_fs.c	/^  char *zTbl;                     \/* Name of docid->file map table *\/$/;"	m	struct:fs_vtab	file:
zText	sqliteInt.h	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum
zThis	test8.c	/^  char *zThis;            \/* Name of the echo table *\/$/;"	m	struct:echo_vtab	file:
zTitle	mem2.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:__anon21	file:
zTo	sqliteInt.h	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey
zToken	sqliteInt.h	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::__anon12
zTrace	tclsqlite.c	/^  char *zTrace;              \/* The trace callback routine *\/$/;"	m	struct:SqliteDb	file:
zTraceV2	tclsqlite.c	/^  char *zTraceV2;            \/* The trace_v2 callback routine *\/$/;"	m	struct:SqliteDb	file:
zTransient	test_osinst.c	/^  char *zTransient;               \/* Transient 'file' string *\/$/;"	m	struct:VfslogCsr	file:
zType	sqliteInt.h	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer
zVarname	test_thread.c	/^  char *zVarname;          \/* Varname in parent script *\/$/;"	m	struct:SqlThread	file:
zVfs	shell.c	/^  const char *zVfs;           \/* Name of VFS to use *\/$/;"	m	struct:ShellState	file:
zVfsName	test_vfstrace.c	/^  const char *zVfsName;               \/* Name of this trace-VFS *\/$/;"	m	struct:vfstrace_info	file:
zWal	pager.c	/^  char *zWal;                 \/* File name for write-ahead log *\/$/;"	m	struct:Pager	file:
zWalName	wal.c	/^  const char *zWalName;      \/* Name of WAL file *\/$/;"	m	struct:Wal	file:
zeroJournalHdr	pager.c	/^static int zeroJournalHdr(Pager *pPager, int doTruncate){$/;"	f	file:
zeroPage	btree.c	/^static void zeroPage(MemPage *pPage, int flags){$/;"	f	file:
zeroblobFunc	func.c	/^static void zeroblobFunc($/;"	f	file:
